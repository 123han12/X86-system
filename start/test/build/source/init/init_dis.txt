
/home/hsa/x86-code/start/test/build/source/init/init.elf:     file format elf32-i386
/home/hsa/x86-code/start/test/build/source/init/init.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00001000 vaddr 0x82000000 paddr 0x82000000 align 2**12
         filesz 0x00002030 memsz 0x00002094 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017c6  82000000  82000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000004  820017c8  820017c8  000027c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000850  820017e0  820017e0  000027e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  82002040  82002040  00003030  2**5
                  ALLOC
  4 .debug_line   00000ea1  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 00000600  00000000  00000000  00003ed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000634d  00000000  00000000  000044d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000016ca  00000000  00000000  0000a81e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000198  00000000  00000000  0000bee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000a23  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000003d  00000000  00000000  0000caa3  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000005a4  00000000  00000000  0000cae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    df *ABS*	00000000 lib_syscall.c
8200004e l     F .text	0000004c sys_call
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
820017e0 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
820004dd l     F .text	00000293 malloc_extend_top
00000000 l    df *ABS*	00000000 mlock.c
82002088 l     O .bss	00000004 __malloc_recursive_mutex
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
8200208c l     O .bss	00000004 __atexit_recursive_mutex
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
8200162f g     F .text	00000037 cleanup_glue
82000152 g     F .text	0000001b yield
82000308 g     F .text	00000033 ioctl
82000f98 g     F .text	00000006 __malloc_unlock
82002090 g     O .bss	00000004 errno
82000125 g     F .text	0000002d execve
820000c8 g     F .text	0000001b getpid
820004a4 g     F .text	0000001c malloc
820002a5 g     F .text	00000021 isatty
82002040 g     O .bss	00000004 __malloc_top_pad
82002040 g       .bss	00000000 __bss_start__
82000f9e g     F .text	00000040 _sbrk_r
820003a6 g     F .text	00000040 readdir
82002044 g     O .bss	00000004 __malloc_max_sbrked_mem
82000251 g     F .text	0000002d lseek
820017c8 g     O .rodata	00000004 _global_impure_ptr
82001666 g     F .text	00000160 _reclaim_reent
82000203 g     F .text	0000002d write
8200027e g     F .text	00000027 fstat
82002094 g       .bss	00000000 __bss_end__
820010f3 g     F .text	000003db _free_r
8200016d g     F .text	00000021 wait
82000fde g     F .text	00000115 __call_exitprocs
8200202c g     O .data	00000004 __malloc_sbrk_base
82000000 g       .text	00000000 _start
820001d6 g     F .text	0000002d read
82002060 g     O .bss	00000028 __malloc_current_mallinfo
8200041a g     F .text	00000021 unlink
8200010a g     F .text	0000001b fork
82001c20 g     O .data	00000408 __malloc_av_
82000f92 g     F .text	00000006 __malloc_lock
820002c6 g     F .text	00000021 sbrk
82000010 g     F .text	0000003e cstart
8200043b g     F .text	00000025 main
82002048 g     O .bss	00000004 __malloc_max_total_mem
82000770 g     F .text	00000822 _malloc_r
8200033b g     F .text	0000006b opendir
820014ce g     F .text	00000161 _malloc_trim_r
820002e7 g     F .text	00000021 dup
82001c04 g     O .data	00000004 _impure_ptr
820000e3 g     F .text	00000027 print_msg
82002028 g     O .data	00000004 __malloc_trim_threshold
82000460 g     F .text	00000044 exit
8200018e g     F .text	00000021 _exit
820001af g     F .text	00000027 open
820003e6 g     F .text	00000034 closedir
8200009a g     F .text	0000002e msleep
82000230 g     F .text	00000021 close
820004c0 g     F .text	0000001d free



Disassembly of section .text:

82000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
82000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
82000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
82000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
82000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
82000009:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
8200000b:	e9 00 00 00 00       	jmp    82000010 <cstart>

82000010 <cstart>:
extern uint8_t __bss_start__[], __bss_end__[];

/**
 * @brief 应用的初始化，C部分
 */
void cstart (int argc, char ** argv) {
82000010:	55                   	push   %ebp
82000011:	89 e5                	mov    %esp,%ebp
82000013:	83 ec 18             	sub    $0x18,%esp
    // 清空bss区，注意这是必须的！！！
    // 像newlib库中有些代码就依赖于此，未清空时数据未知，导致调用sbrk时申请很大内存空间
    uint8_t * start = __bss_start__;
82000016:	c7 45 f4 40 20 00 82 	movl   $0x82002040,-0xc(%ebp)
    while (start < __bss_end__) {
8200001d:	eb 0c                	jmp    8200002b <cstart+0x1b>
        *start++ = 0;
8200001f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000022:	8d 50 01             	lea    0x1(%eax),%edx
82000025:	89 55 f4             	mov    %edx,-0xc(%ebp)
82000028:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__) {
8200002b:	81 7d f4 94 20 00 82 	cmpl   $0x82002094,-0xc(%ebp)
82000032:	72 eb                	jb     8200001f <cstart+0xf>
    }

    exit(main(argc, argv));
82000034:	83 ec 08             	sub    $0x8,%esp
82000037:	ff 75 0c             	push   0xc(%ebp)
8200003a:	ff 75 08             	push   0x8(%ebp)
8200003d:	e8 f9 03 00 00       	call   8200043b <main>
82000042:	83 c4 10             	add    $0x10,%esp
82000045:	83 ec 0c             	sub    $0xc,%esp
82000048:	50                   	push   %eax
82000049:	e8 12 04 00 00       	call   82000460 <exit>

8200004e <sys_call>:
#include <string.h>

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
8200004e:	55                   	push   %ebp
8200004f:	89 e5                	mov    %esp,%ebp
82000051:	57                   	push   %edi
82000052:	56                   	push   %esi
82000053:	53                   	push   %ebx
82000054:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
82000057:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8200005e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
82000065:	8b 45 08             	mov    0x8(%ebp),%eax
82000068:	8b 40 10             	mov    0x10(%eax),%eax
8200006b:	8b 55 08             	mov    0x8(%ebp),%edx
8200006e:	8b 52 0c             	mov    0xc(%edx),%edx
82000071:	8b 4d 08             	mov    0x8(%ebp),%ecx
82000074:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
82000077:	8b 5d 08             	mov    0x8(%ebp),%ebx
8200007a:	8b 5b 04             	mov    0x4(%ebx),%ebx
8200007d:	8b 75 08             	mov    0x8(%ebp),%esi
82000080:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
82000082:	8d 7d e8             	lea    -0x18(%ebp),%edi
82000085:	50                   	push   %eax
82000086:	52                   	push   %edx
82000087:	51                   	push   %ecx
82000088:	53                   	push   %ebx
82000089:	56                   	push   %esi
8200008a:	ff 1f                	lcall  *(%edi)
8200008c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8200008f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
82000092:	83 c4 10             	add    $0x10,%esp
82000095:	5b                   	pop    %ebx
82000096:	5e                   	pop    %esi
82000097:	5f                   	pop    %edi
82000098:	5d                   	pop    %ebp
82000099:	c3                   	ret    

8200009a <msleep>:

int msleep (int ms) {
8200009a:	55                   	push   %ebp
8200009b:	89 e5                	mov    %esp,%ebp
8200009d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
820000a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
820000a4:	7f 07                	jg     820000ad <msleep+0x13>
        return 0;
820000a6:	b8 00 00 00 00       	mov    $0x0,%eax
820000ab:	eb 19                	jmp    820000c6 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
820000ad:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
820000b4:	8b 45 08             	mov    0x8(%ebp),%eax
820000b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000bd:	50                   	push   %eax
820000be:	e8 8b ff ff ff       	call   8200004e <sys_call>
820000c3:	83 c4 04             	add    $0x4,%esp
}
820000c6:	c9                   	leave  
820000c7:	c3                   	ret    

820000c8 <getpid>:

int getpid() {
820000c8:	55                   	push   %ebp
820000c9:	89 e5                	mov    %esp,%ebp
820000cb:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
820000ce:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
820000d5:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000d8:	50                   	push   %eax
820000d9:	e8 70 ff ff ff       	call   8200004e <sys_call>
820000de:	83 c4 04             	add    $0x4,%esp
}
820000e1:	c9                   	leave  
820000e2:	c3                   	ret    

820000e3 <print_msg>:

int print_msg(char * fmt, int arg) {
820000e3:	55                   	push   %ebp
820000e4:	89 e5                	mov    %esp,%ebp
820000e6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
820000e9:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
820000f0:	8b 45 08             	mov    0x8(%ebp),%eax
820000f3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
820000f6:	8b 45 0c             	mov    0xc(%ebp),%eax
820000f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
820000fc:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000ff:	50                   	push   %eax
82000100:	e8 49 ff ff ff       	call   8200004e <sys_call>
82000105:	83 c4 04             	add    $0x4,%esp
}
82000108:	c9                   	leave  
82000109:	c3                   	ret    

8200010a <fork>:

int fork() {
8200010a:	55                   	push   %ebp
8200010b:	89 e5                	mov    %esp,%ebp
8200010d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
82000110:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
82000117:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200011a:	50                   	push   %eax
8200011b:	e8 2e ff ff ff       	call   8200004e <sys_call>
82000120:	83 c4 04             	add    $0x4,%esp
}
82000123:	c9                   	leave  
82000124:	c3                   	ret    

82000125 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
82000125:	55                   	push   %ebp
82000126:	89 e5                	mov    %esp,%ebp
82000128:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
8200012b:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
82000132:	8b 45 08             	mov    0x8(%ebp),%eax
82000135:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
82000138:	8b 45 0c             	mov    0xc(%ebp),%eax
8200013b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
8200013e:	8b 45 10             	mov    0x10(%ebp),%eax
82000141:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000144:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000147:	50                   	push   %eax
82000148:	e8 01 ff ff ff       	call   8200004e <sys_call>
8200014d:	83 c4 04             	add    $0x4,%esp
}
82000150:	c9                   	leave  
82000151:	c3                   	ret    

82000152 <yield>:

int yield (void) {
82000152:	55                   	push   %ebp
82000153:	89 e5                	mov    %esp,%ebp
82000155:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
82000158:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
8200015f:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000162:	50                   	push   %eax
82000163:	e8 e6 fe ff ff       	call   8200004e <sys_call>
82000168:	83 c4 04             	add    $0x4,%esp
}
8200016b:	c9                   	leave  
8200016c:	c3                   	ret    

8200016d <wait>:

int wait(int* status) {
8200016d:	55                   	push   %ebp
8200016e:	89 e5                	mov    %esp,%ebp
82000170:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
82000173:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
8200017a:	8b 45 08             	mov    0x8(%ebp),%eax
8200017d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
82000180:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000183:	50                   	push   %eax
82000184:	e8 c5 fe ff ff       	call   8200004e <sys_call>
82000189:	83 c4 04             	add    $0x4,%esp
}
8200018c:	c9                   	leave  
8200018d:	c3                   	ret    

8200018e <_exit>:

void _exit(int status) {
8200018e:	55                   	push   %ebp
8200018f:	89 e5                	mov    %esp,%ebp
82000191:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
82000194:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8200019b:	8b 45 08             	mov    0x8(%ebp),%eax
8200019e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
820001a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001a4:	50                   	push   %eax
820001a5:	e8 a4 fe ff ff       	call   8200004e <sys_call>
820001aa:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
820001ad:	eb fe                	jmp    820001ad <_exit+0x1f>

820001af <open>:
}

int open(const char *name, int flags, ...) {
820001af:	55                   	push   %ebp
820001b0:	89 e5                	mov    %esp,%ebp
820001b2:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
820001b5:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
820001bc:	8b 45 08             	mov    0x8(%ebp),%eax
820001bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
820001c2:	8b 45 0c             	mov    0xc(%ebp),%eax
820001c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
820001c8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001cb:	50                   	push   %eax
820001cc:	e8 7d fe ff ff       	call   8200004e <sys_call>
820001d1:	83 c4 04             	add    $0x4,%esp
}
820001d4:	c9                   	leave  
820001d5:	c3                   	ret    

820001d6 <read>:

int read(int file, char *ptr, int len) {
820001d6:	55                   	push   %ebp
820001d7:	89 e5                	mov    %esp,%ebp
820001d9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
820001dc:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
820001e3:	8b 45 08             	mov    0x8(%ebp),%eax
820001e6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
820001e9:	8b 45 0c             	mov    0xc(%ebp),%eax
820001ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
820001ef:	8b 45 10             	mov    0x10(%ebp),%eax
820001f2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
820001f5:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001f8:	50                   	push   %eax
820001f9:	e8 50 fe ff ff       	call   8200004e <sys_call>
820001fe:	83 c4 04             	add    $0x4,%esp
}
82000201:	c9                   	leave  
82000202:	c3                   	ret    

82000203 <write>:

int write(int file, char *ptr, int len) {
82000203:	55                   	push   %ebp
82000204:	89 e5                	mov    %esp,%ebp
82000206:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
82000209:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
82000210:	8b 45 08             	mov    0x8(%ebp),%eax
82000213:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
82000216:	8b 45 0c             	mov    0xc(%ebp),%eax
82000219:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8200021c:	8b 45 10             	mov    0x10(%ebp),%eax
8200021f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000222:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000225:	50                   	push   %eax
82000226:	e8 23 fe ff ff       	call   8200004e <sys_call>
8200022b:	83 c4 04             	add    $0x4,%esp
}
8200022e:	c9                   	leave  
8200022f:	c3                   	ret    

82000230 <close>:

int close(int file) {
82000230:	55                   	push   %ebp
82000231:	89 e5                	mov    %esp,%ebp
82000233:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
82000236:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
8200023d:	8b 45 08             	mov    0x8(%ebp),%eax
82000240:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
82000243:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000246:	50                   	push   %eax
82000247:	e8 02 fe ff ff       	call   8200004e <sys_call>
8200024c:	83 c4 04             	add    $0x4,%esp
}
8200024f:	c9                   	leave  
82000250:	c3                   	ret    

82000251 <lseek>:

int lseek(int file, int ptr, int dir) {
82000251:	55                   	push   %ebp
82000252:	89 e5                	mov    %esp,%ebp
82000254:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
82000257:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
8200025e:	8b 45 08             	mov    0x8(%ebp),%eax
82000261:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
82000264:	8b 45 0c             	mov    0xc(%ebp),%eax
82000267:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
8200026a:	8b 45 10             	mov    0x10(%ebp),%eax
8200026d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000270:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000273:	50                   	push   %eax
82000274:	e8 d5 fd ff ff       	call   8200004e <sys_call>
82000279:	83 c4 04             	add    $0x4,%esp
}
8200027c:	c9                   	leave  
8200027d:	c3                   	ret    

8200027e <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
8200027e:	55                   	push   %ebp
8200027f:	89 e5                	mov    %esp,%ebp
82000281:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
82000284:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8200028b:	8b 45 08             	mov    0x8(%ebp),%eax
8200028e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
82000291:	8b 45 0c             	mov    0xc(%ebp),%eax
82000294:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
82000297:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200029a:	50                   	push   %eax
8200029b:	e8 ae fd ff ff       	call   8200004e <sys_call>
820002a0:	83 c4 04             	add    $0x4,%esp
}
820002a3:	c9                   	leave  
820002a4:	c3                   	ret    

820002a5 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
820002a5:	55                   	push   %ebp
820002a6:	89 e5                	mov    %esp,%ebp
820002a8:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
820002ab:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
820002b2:	8b 45 08             	mov    0x8(%ebp),%eax
820002b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820002b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002bb:	50                   	push   %eax
820002bc:	e8 8d fd ff ff       	call   8200004e <sys_call>
820002c1:	83 c4 04             	add    $0x4,%esp
}
820002c4:	c9                   	leave  
820002c5:	c3                   	ret    

820002c6 <sbrk>:

void * sbrk(ptrdiff_t incr) {
820002c6:	55                   	push   %ebp
820002c7:	89 e5                	mov    %esp,%ebp
820002c9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
820002cc:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
820002d3:	8b 45 08             	mov    0x8(%ebp),%eax
820002d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
820002d9:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002dc:	50                   	push   %eax
820002dd:	e8 6c fd ff ff       	call   8200004e <sys_call>
820002e2:	83 c4 04             	add    $0x4,%esp
}
820002e5:	c9                   	leave  
820002e6:	c3                   	ret    

820002e7 <dup>:

int dup (int file) {
820002e7:	55                   	push   %ebp
820002e8:	89 e5                	mov    %esp,%ebp
820002ea:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
820002ed:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
820002f4:	8b 45 08             	mov    0x8(%ebp),%eax
820002f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820002fa:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002fd:	50                   	push   %eax
820002fe:	e8 4b fd ff ff       	call   8200004e <sys_call>
82000303:	83 c4 04             	add    $0x4,%esp
}
82000306:	c9                   	leave  
82000307:	c3                   	ret    

82000308 <ioctl>:

int ioctl(int fd, int cmd, int arg0, int arg1) {
82000308:	55                   	push   %ebp
82000309:	89 e5                	mov    %esp,%ebp
8200030b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_ioctl;
8200030e:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = fd;
82000315:	8b 45 08             	mov    0x8(%ebp),%eax
82000318:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = cmd;
8200031b:	8b 45 0c             	mov    0xc(%ebp),%eax
8200031e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = arg0;
82000321:	8b 45 10             	mov    0x10(%ebp),%eax
82000324:	89 45 f8             	mov    %eax,-0x8(%ebp)
    args.arg3 = arg1;
82000327:	8b 45 14             	mov    0x14(%ebp),%eax
8200032a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sys_call(&args);
8200032d:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000330:	50                   	push   %eax
82000331:	e8 18 fd ff ff       	call   8200004e <sys_call>
82000336:	83 c4 04             	add    $0x4,%esp
}
82000339:	c9                   	leave  
8200033a:	c3                   	ret    

8200033b <opendir>:

DIR * opendir(const char * name) {
8200033b:	55                   	push   %ebp
8200033c:	89 e5                	mov    %esp,%ebp
8200033e:	83 ec 28             	sub    $0x28,%esp
    DIR * dir = (DIR *)malloc(sizeof(DIR));
82000341:	83 ec 0c             	sub    $0xc,%esp
82000344:	68 10 01 00 00       	push   $0x110
82000349:	e8 56 01 00 00       	call   820004a4 <malloc>
8200034e:	83 c4 10             	add    $0x10,%esp
82000351:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == (DIR *)0) {
82000354:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
82000358:	75 07                	jne    82000361 <opendir+0x26>
        return (DIR *)0;
8200035a:	b8 00 00 00 00       	mov    $0x0,%eax
8200035f:	eb 43                	jmp    820003a4 <opendir+0x69>
    }

    syscall_args_t args;
    args.id = SYS_opendir;
82000361:	c7 45 dc 3c 00 00 00 	movl   $0x3c,-0x24(%ebp)
    args.arg0 = (int)name;
82000368:	8b 45 08             	mov    0x8(%ebp),%eax
8200036b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
8200036e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000371:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = sys_call(&args);
82000374:	83 ec 0c             	sub    $0xc,%esp
82000377:	8d 45 dc             	lea    -0x24(%ebp),%eax
8200037a:	50                   	push   %eax
8200037b:	e8 ce fc ff ff       	call   8200004e <sys_call>
82000380:	83 c4 10             	add    $0x10,%esp
82000383:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
82000386:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8200038a:	79 15                	jns    820003a1 <opendir+0x66>
        free(dir);
8200038c:	83 ec 0c             	sub    $0xc,%esp
8200038f:	ff 75 f4             	push   -0xc(%ebp)
82000392:	e8 29 01 00 00       	call   820004c0 <free>
82000397:	83 c4 10             	add    $0x10,%esp
        return (DIR *)0;
8200039a:	b8 00 00 00 00       	mov    $0x0,%eax
8200039f:	eb 03                	jmp    820003a4 <opendir+0x69>
    }
    return dir;
820003a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
820003a4:	c9                   	leave  
820003a5:	c3                   	ret    

820003a6 <readdir>:

struct dirent* readdir(DIR* dir) {
820003a6:	55                   	push   %ebp
820003a7:	89 e5                	mov    %esp,%ebp
820003a9:	83 ec 20             	sub    $0x20,%esp

    syscall_args_t args;
    args.id = SYS_readdir;
820003ac:	c7 45 e8 3d 00 00 00 	movl   $0x3d,-0x18(%ebp)
    args.arg0 = (int)dir;
820003b3:	8b 45 08             	mov    0x8(%ebp),%eax
820003b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&dir->dirent;
820003b9:	8b 45 08             	mov    0x8(%ebp),%eax
820003bc:	83 c0 04             	add    $0x4,%eax
820003bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = sys_call(&args);
820003c2:	8d 45 e8             	lea    -0x18(%ebp),%eax
820003c5:	50                   	push   %eax
820003c6:	e8 83 fc ff ff       	call   8200004e <sys_call>
820003cb:	83 c4 04             	add    $0x4,%esp
820003ce:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (err < 0) {
820003d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
820003d5:	79 07                	jns    820003de <readdir+0x38>
        return (struct dirent *)0;
820003d7:	b8 00 00 00 00       	mov    $0x0,%eax
820003dc:	eb 06                	jmp    820003e4 <readdir+0x3e>
    }
    return &dir->dirent;
820003de:	8b 45 08             	mov    0x8(%ebp),%eax
820003e1:	83 c0 04             	add    $0x4,%eax
}
820003e4:	c9                   	leave  
820003e5:	c3                   	ret    

820003e6 <closedir>:

int closedir(DIR *dir) {
820003e6:	55                   	push   %ebp
820003e7:	89 e5                	mov    %esp,%ebp
820003e9:	83 ec 28             	sub    $0x28,%esp
    syscall_args_t args;
    args.id = SYS_closedir;
820003ec:	c7 45 e4 3e 00 00 00 	movl   $0x3e,-0x1c(%ebp)
    args.arg0 = (int)dir;
820003f3:	8b 45 08             	mov    0x8(%ebp),%eax
820003f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    sys_call(&args);
820003f9:	8d 45 e4             	lea    -0x1c(%ebp),%eax
820003fc:	50                   	push   %eax
820003fd:	e8 4c fc ff ff       	call   8200004e <sys_call>
82000402:	83 c4 04             	add    $0x4,%esp

    free(dir);
82000405:	83 ec 0c             	sub    $0xc,%esp
82000408:	ff 75 08             	push   0x8(%ebp)
8200040b:	e8 b0 00 00 00       	call   820004c0 <free>
82000410:	83 c4 10             	add    $0x10,%esp
    return 0;
82000413:	b8 00 00 00 00       	mov    $0x0,%eax
}
82000418:	c9                   	leave  
82000419:	c3                   	ret    

8200041a <unlink>:

int unlink(const char *path) {
8200041a:	55                   	push   %ebp
8200041b:	89 e5                	mov    %esp,%ebp
8200041d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_unlink;
82000420:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)path;
82000427:	8b 45 08             	mov    0x8(%ebp),%eax
8200042a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8200042d:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000430:	50                   	push   %eax
82000431:	e8 18 fc ff ff       	call   8200004e <sys_call>
82000436:	83 c4 04             	add    $0x4,%esp
}
82000439:	c9                   	leave  
8200043a:	c3                   	ret    

8200043b <main>:
 * 作者：李述铜
 * 联系邮箱: 527676163@qq.com
 */
#include <stdio.h>

int main (int argc, char ** argv) {
8200043b:	55                   	push   %ebp
8200043c:	89 e5                	mov    %esp,%ebp
8200043e:	83 ec 10             	sub    $0x10,%esp
    *(char *)0 = 0x1234;
82000441:	b8 00 00 00 00       	mov    $0x0,%eax
82000446:	c6 00 34             	movb   $0x34,(%eax)

    int a = 3 / 0;
82000449:	b8 03 00 00 00       	mov    $0x3,%eax
8200044e:	b9 00 00 00 00       	mov    $0x0,%ecx
82000453:	99                   	cltd   
82000454:	f7 f9                	idiv   %ecx
82000456:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return 0;
82000459:	b8 00 00 00 00       	mov    $0x0,%eax
}
8200045e:	c9                   	leave  
8200045f:	c3                   	ret    

82000460 <exit>:
82000460:	55                   	push   %ebp
82000461:	89 e5                	mov    %esp,%ebp
82000463:	83 ec 08             	sub    $0x8,%esp
82000466:	83 ec 08             	sub    $0x8,%esp
82000469:	6a 00                	push   $0x0
8200046b:	ff 75 08             	push   0x8(%ebp)
8200046e:	e8 6b 0b 00 00       	call   82000fde <__call_exitprocs>
82000473:	83 c4 10             	add    $0x10,%esp
82000476:	a1 c8 17 00 82       	mov    0x820017c8,%eax
8200047b:	8b 40 3c             	mov    0x3c(%eax),%eax
8200047e:	85 c0                	test   %eax,%eax
82000480:	74 17                	je     82000499 <exit+0x39>
82000482:	a1 c8 17 00 82       	mov    0x820017c8,%eax
82000487:	8b 40 3c             	mov    0x3c(%eax),%eax
8200048a:	8b 15 c8 17 00 82    	mov    0x820017c8,%edx
82000490:	83 ec 0c             	sub    $0xc,%esp
82000493:	52                   	push   %edx
82000494:	ff d0                	call   *%eax
82000496:	83 c4 10             	add    $0x10,%esp
82000499:	83 ec 0c             	sub    $0xc,%esp
8200049c:	ff 75 08             	push   0x8(%ebp)
8200049f:	e8 ea fc ff ff       	call   8200018e <_exit>

820004a4 <malloc>:
820004a4:	55                   	push   %ebp
820004a5:	89 e5                	mov    %esp,%ebp
820004a7:	83 ec 08             	sub    $0x8,%esp
820004aa:	a1 04 1c 00 82       	mov    0x82001c04,%eax
820004af:	83 ec 08             	sub    $0x8,%esp
820004b2:	ff 75 08             	push   0x8(%ebp)
820004b5:	50                   	push   %eax
820004b6:	e8 b5 02 00 00       	call   82000770 <_malloc_r>
820004bb:	83 c4 10             	add    $0x10,%esp
820004be:	c9                   	leave  
820004bf:	c3                   	ret    

820004c0 <free>:
820004c0:	55                   	push   %ebp
820004c1:	89 e5                	mov    %esp,%ebp
820004c3:	83 ec 08             	sub    $0x8,%esp
820004c6:	a1 04 1c 00 82       	mov    0x82001c04,%eax
820004cb:	83 ec 08             	sub    $0x8,%esp
820004ce:	ff 75 08             	push   0x8(%ebp)
820004d1:	50                   	push   %eax
820004d2:	e8 1c 0c 00 00       	call   820010f3 <_free_r>
820004d7:	83 c4 10             	add    $0x10,%esp
820004da:	90                   	nop
820004db:	c9                   	leave  
820004dc:	c3                   	ret    

820004dd <malloc_extend_top>:
820004dd:	55                   	push   %ebp
820004de:	89 e5                	mov    %esp,%ebp
820004e0:	83 ec 38             	sub    $0x38,%esp
820004e3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820004ea:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820004ef:	8b 40 08             	mov    0x8(%eax),%eax
820004f2:	89 45 e0             	mov    %eax,-0x20(%ebp)
820004f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
820004f8:	8b 40 04             	mov    0x4(%eax),%eax
820004fb:	83 e0 fc             	and    $0xfffffffc,%eax
820004fe:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000501:	8b 55 e0             	mov    -0x20(%ebp),%edx
82000504:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000507:	01 d0                	add    %edx,%eax
82000509:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200050c:	8b 15 40 20 00 82    	mov    0x82002040,%edx
82000512:	8b 45 0c             	mov    0xc(%ebp),%eax
82000515:	01 d0                	add    %edx,%eax
82000517:	83 c0 10             	add    $0x10,%eax
8200051a:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200051d:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
82000524:	a1 2c 20 00 82       	mov    0x8200202c,%eax
82000529:	83 f8 ff             	cmp    $0xffffffff,%eax
8200052c:	74 15                	je     82000543 <malloc_extend_top+0x66>
8200052e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
82000531:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000534:	01 d0                	add    %edx,%eax
82000536:	8d 50 ff             	lea    -0x1(%eax),%edx
82000539:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200053c:	f7 d8                	neg    %eax
8200053e:	21 d0                	and    %edx,%eax
82000540:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000543:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000546:	83 ec 08             	sub    $0x8,%esp
82000549:	50                   	push   %eax
8200054a:	ff 75 08             	push   0x8(%ebp)
8200054d:	e8 4c 0a 00 00       	call   82000f9e <_sbrk_r>
82000552:	83 c4 10             	add    $0x10,%esp
82000555:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000558:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
8200055c:	0f 84 0b 02 00 00    	je     8200076d <malloc_extend_top+0x290>
82000562:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000565:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000568:	73 0e                	jae    82000578 <malloc_extend_top+0x9b>
8200056a:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
8200056f:	39 45 e0             	cmp    %eax,-0x20(%ebp)
82000572:	0f 85 f5 01 00 00    	jne    8200076d <malloc_extend_top+0x290>
82000578:	a1 60 20 00 82       	mov    0x82002060,%eax
8200057d:	89 c2                	mov    %eax,%edx
8200057f:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000582:	01 d0                	add    %edx,%eax
82000584:	a3 60 20 00 82       	mov    %eax,0x82002060
82000589:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200058c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
8200058f:	75 30                	jne    820005c1 <malloc_extend_top+0xe4>
82000591:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000594:	8d 50 ff             	lea    -0x1(%eax),%edx
82000597:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200059a:	21 d0                	and    %edx,%eax
8200059c:	85 c0                	test   %eax,%eax
8200059e:	75 21                	jne    820005c1 <malloc_extend_top+0xe4>
820005a0:	8b 55 e8             	mov    -0x18(%ebp),%edx
820005a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
820005a6:	01 d0                	add    %edx,%eax
820005a8:	89 45 d0             	mov    %eax,-0x30(%ebp)
820005ab:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820005b0:	8b 40 08             	mov    0x8(%eax),%eax
820005b3:	8b 55 d0             	mov    -0x30(%ebp),%edx
820005b6:	83 ca 01             	or     $0x1,%edx
820005b9:	89 50 04             	mov    %edx,0x4(%eax)
820005bc:	e9 76 01 00 00       	jmp    82000737 <malloc_extend_top+0x25a>
820005c1:	a1 2c 20 00 82       	mov    0x8200202c,%eax
820005c6:	83 f8 ff             	cmp    $0xffffffff,%eax
820005c9:	75 0a                	jne    820005d5 <malloc_extend_top+0xf8>
820005cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005ce:	a3 2c 20 00 82       	mov    %eax,0x8200202c
820005d3:	eb 13                	jmp    820005e8 <malloc_extend_top+0x10b>
820005d5:	8b 15 60 20 00 82    	mov    0x82002060,%edx
820005db:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005de:	2b 45 d8             	sub    -0x28(%ebp),%eax
820005e1:	01 d0                	add    %edx,%eax
820005e3:	a3 60 20 00 82       	mov    %eax,0x82002060
820005e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005eb:	83 c0 08             	add    $0x8,%eax
820005ee:	83 e0 07             	and    $0x7,%eax
820005f1:	89 45 cc             	mov    %eax,-0x34(%ebp)
820005f4:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
820005f8:	74 13                	je     8200060d <malloc_extend_top+0x130>
820005fa:	b8 08 00 00 00       	mov    $0x8,%eax
820005ff:	2b 45 cc             	sub    -0x34(%ebp),%eax
82000602:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000605:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000608:	01 45 f4             	add    %eax,-0xc(%ebp)
8200060b:	eb 07                	jmp    82000614 <malloc_extend_top+0x137>
8200060d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
82000614:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000617:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200061a:	01 d0                	add    %edx,%eax
8200061c:	89 c2                	mov    %eax,%edx
8200061e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000621:	83 e8 01             	sub    $0x1,%eax
82000624:	21 c2                	and    %eax,%edx
82000626:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000629:	29 d0                	sub    %edx,%eax
8200062b:	01 45 f0             	add    %eax,-0x10(%ebp)
8200062e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000631:	83 e8 01             	sub    $0x1,%eax
82000634:	21 45 f0             	and    %eax,-0x10(%ebp)
82000637:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200063a:	83 ec 08             	sub    $0x8,%esp
8200063d:	50                   	push   %eax
8200063e:	ff 75 08             	push   0x8(%ebp)
82000641:	e8 58 09 00 00       	call   82000f9e <_sbrk_r>
82000646:	83 c4 10             	add    $0x10,%esp
82000649:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200064c:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
82000650:	75 28                	jne    8200067a <malloc_extend_top+0x19d>
82000652:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
82000659:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82000660:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000663:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000666:	01 d0                	add    %edx,%eax
82000668:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200066b:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
8200066f:	74 09                	je     8200067a <malloc_extend_top+0x19d>
82000671:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000674:	83 e8 08             	sub    $0x8,%eax
82000677:	01 45 ec             	add    %eax,-0x14(%ebp)
8200067a:	a1 60 20 00 82       	mov    0x82002060,%eax
8200067f:	89 c2                	mov    %eax,%edx
82000681:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000684:	01 d0                	add    %edx,%eax
82000686:	a3 60 20 00 82       	mov    %eax,0x82002060
8200068b:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000690:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000693:	89 42 08             	mov    %eax,0x8(%edx)
82000696:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000699:	2b 45 f4             	sub    -0xc(%ebp),%eax
8200069c:	89 c2                	mov    %eax,%edx
8200069e:	8b 45 f0             	mov    -0x10(%ebp),%eax
820006a1:	01 d0                	add    %edx,%eax
820006a3:	89 45 d0             	mov    %eax,-0x30(%ebp)
820006a6:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006ab:	8b 40 08             	mov    0x8(%eax),%eax
820006ae:	8b 55 d0             	mov    -0x30(%ebp),%edx
820006b1:	83 ca 01             	or     $0x1,%edx
820006b4:	89 50 04             	mov    %edx,0x4(%eax)
820006b7:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006bc:	39 45 e0             	cmp    %eax,-0x20(%ebp)
820006bf:	74 76                	je     82000737 <malloc_extend_top+0x25a>
820006c1:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
820006c5:	77 14                	ja     820006db <malloc_extend_top+0x1fe>
820006c7:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006cc:	8b 40 08             	mov    0x8(%eax),%eax
820006cf:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
820006d6:	e9 93 00 00 00       	jmp    8200076e <malloc_extend_top+0x291>
820006db:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006de:	83 e8 0c             	sub    $0xc,%eax
820006e1:	83 e0 f8             	and    $0xfffffff8,%eax
820006e4:	89 45 dc             	mov    %eax,-0x24(%ebp)
820006e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006ea:	8b 40 04             	mov    0x4(%eax),%eax
820006ed:	83 e0 01             	and    $0x1,%eax
820006f0:	0b 45 dc             	or     -0x24(%ebp),%eax
820006f3:	89 c2                	mov    %eax,%edx
820006f5:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006f8:	89 50 04             	mov    %edx,0x4(%eax)
820006fb:	8b 55 e0             	mov    -0x20(%ebp),%edx
820006fe:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000701:	01 d0                	add    %edx,%eax
82000703:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
8200070a:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200070d:	8d 50 04             	lea    0x4(%eax),%edx
82000710:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000713:	01 d0                	add    %edx,%eax
82000715:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
8200071c:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
82000720:	76 15                	jbe    82000737 <malloc_extend_top+0x25a>
82000722:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000725:	83 c0 08             	add    $0x8,%eax
82000728:	83 ec 08             	sub    $0x8,%esp
8200072b:	50                   	push   %eax
8200072c:	ff 75 08             	push   0x8(%ebp)
8200072f:	e8 bf 09 00 00       	call   820010f3 <_free_r>
82000734:	83 c4 10             	add    $0x10,%esp
82000737:	a1 60 20 00 82       	mov    0x82002060,%eax
8200073c:	89 c2                	mov    %eax,%edx
8200073e:	a1 44 20 00 82       	mov    0x82002044,%eax
82000743:	39 c2                	cmp    %eax,%edx
82000745:	76 0a                	jbe    82000751 <malloc_extend_top+0x274>
82000747:	a1 60 20 00 82       	mov    0x82002060,%eax
8200074c:	a3 44 20 00 82       	mov    %eax,0x82002044
82000751:	a1 60 20 00 82       	mov    0x82002060,%eax
82000756:	89 c2                	mov    %eax,%edx
82000758:	a1 48 20 00 82       	mov    0x82002048,%eax
8200075d:	39 c2                	cmp    %eax,%edx
8200075f:	76 0d                	jbe    8200076e <malloc_extend_top+0x291>
82000761:	a1 60 20 00 82       	mov    0x82002060,%eax
82000766:	a3 48 20 00 82       	mov    %eax,0x82002048
8200076b:	eb 01                	jmp    8200076e <malloc_extend_top+0x291>
8200076d:	90                   	nop
8200076e:	c9                   	leave  
8200076f:	c3                   	ret    

82000770 <_malloc_r>:
82000770:	55                   	push   %ebp
82000771:	89 e5                	mov    %esp,%ebp
82000773:	53                   	push   %ebx
82000774:	83 ec 44             	sub    $0x44,%esp
82000777:	8b 45 0c             	mov    0xc(%ebp),%eax
8200077a:	83 c0 0b             	add    $0xb,%eax
8200077d:	83 f8 16             	cmp    $0x16,%eax
82000780:	76 0b                	jbe    8200078d <_malloc_r+0x1d>
82000782:	8b 45 0c             	mov    0xc(%ebp),%eax
82000785:	83 c0 0b             	add    $0xb,%eax
82000788:	83 e0 f8             	and    $0xfffffff8,%eax
8200078b:	eb 05                	jmp    82000792 <_malloc_r+0x22>
8200078d:	b8 10 00 00 00       	mov    $0x10,%eax
82000792:	89 45 d0             	mov    %eax,-0x30(%ebp)
82000795:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000798:	85 c0                	test   %eax,%eax
8200079a:	78 08                	js     820007a4 <_malloc_r+0x34>
8200079c:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200079f:	3b 45 0c             	cmp    0xc(%ebp),%eax
820007a2:	73 13                	jae    820007b7 <_malloc_r+0x47>
820007a4:	8b 45 08             	mov    0x8(%ebp),%eax
820007a7:	c7 00 0c 00 00 00    	movl   $0xc,(%eax)
820007ad:	b8 00 00 00 00       	mov    $0x0,%eax
820007b2:	e9 d6 07 00 00       	jmp    82000f8d <_malloc_r+0x81d>
820007b7:	83 ec 0c             	sub    $0xc,%esp
820007ba:	ff 75 08             	push   0x8(%ebp)
820007bd:	e8 d0 07 00 00       	call   82000f92 <__malloc_lock>
820007c2:	83 c4 10             	add    $0x10,%esp
820007c5:	81 7d d0 f7 01 00 00 	cmpl   $0x1f7,-0x30(%ebp)
820007cc:	0f 87 b0 00 00 00    	ja     82000882 <_malloc_r+0x112>
820007d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
820007d5:	c1 e8 03             	shr    $0x3,%eax
820007d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
820007db:	8b 45 f0             	mov    -0x10(%ebp),%eax
820007de:	83 c0 01             	add    $0x1,%eax
820007e1:	01 c0                	add    %eax,%eax
820007e3:	c1 e0 02             	shl    $0x2,%eax
820007e6:	05 20 1c 00 82       	add    $0x82001c20,%eax
820007eb:	83 e8 08             	sub    $0x8,%eax
820007ee:	89 45 d4             	mov    %eax,-0x2c(%ebp)
820007f1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820007f4:	8b 40 0c             	mov    0xc(%eax),%eax
820007f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
820007fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
820007fd:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
82000800:	75 0d                	jne    8200080f <_malloc_r+0x9f>
82000802:	83 45 d4 08          	addl   $0x8,-0x2c(%ebp)
82000806:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000809:	8b 40 0c             	mov    0xc(%eax),%eax
8200080c:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200080f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000812:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
82000815:	74 62                	je     82000879 <_malloc_r+0x109>
82000817:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200081a:	8b 40 04             	mov    0x4(%eax),%eax
8200081d:	83 e0 fc             	and    $0xfffffffc,%eax
82000820:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000823:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000826:	8b 40 0c             	mov    0xc(%eax),%eax
82000829:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200082c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200082f:	8b 40 08             	mov    0x8(%eax),%eax
82000832:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000835:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000838:	8b 55 d8             	mov    -0x28(%ebp),%edx
8200083b:	89 50 0c             	mov    %edx,0xc(%eax)
8200083e:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000841:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000844:	89 50 08             	mov    %edx,0x8(%eax)
82000847:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200084a:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200084d:	01 d0                	add    %edx,%eax
8200084f:	8b 50 04             	mov    0x4(%eax),%edx
82000852:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000855:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000858:	01 c8                	add    %ecx,%eax
8200085a:	83 ca 01             	or     $0x1,%edx
8200085d:	89 50 04             	mov    %edx,0x4(%eax)
82000860:	83 ec 0c             	sub    $0xc,%esp
82000863:	ff 75 08             	push   0x8(%ebp)
82000866:	e8 2d 07 00 00       	call   82000f98 <__malloc_unlock>
8200086b:	83 c4 10             	add    $0x10,%esp
8200086e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000871:	83 c0 08             	add    $0x8,%eax
82000874:	e9 14 07 00 00       	jmp    82000f8d <_malloc_r+0x81d>
82000879:	83 45 f0 02          	addl   $0x2,-0x10(%ebp)
8200087d:	e9 46 01 00 00       	jmp    820009c8 <_malloc_r+0x258>
82000882:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000885:	c1 e8 09             	shr    $0x9,%eax
82000888:	85 c0                	test   %eax,%eax
8200088a:	75 08                	jne    82000894 <_malloc_r+0x124>
8200088c:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200088f:	c1 e8 03             	shr    $0x3,%eax
82000892:	eb 77                	jmp    8200090b <_malloc_r+0x19b>
82000894:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000897:	c1 e8 09             	shr    $0x9,%eax
8200089a:	83 f8 04             	cmp    $0x4,%eax
8200089d:	77 0b                	ja     820008aa <_malloc_r+0x13a>
8200089f:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008a2:	c1 e8 06             	shr    $0x6,%eax
820008a5:	83 c0 38             	add    $0x38,%eax
820008a8:	eb 61                	jmp    8200090b <_malloc_r+0x19b>
820008aa:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008ad:	c1 e8 09             	shr    $0x9,%eax
820008b0:	83 f8 14             	cmp    $0x14,%eax
820008b3:	77 0b                	ja     820008c0 <_malloc_r+0x150>
820008b5:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008b8:	c1 e8 09             	shr    $0x9,%eax
820008bb:	83 c0 5b             	add    $0x5b,%eax
820008be:	eb 4b                	jmp    8200090b <_malloc_r+0x19b>
820008c0:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008c3:	c1 e8 09             	shr    $0x9,%eax
820008c6:	83 f8 54             	cmp    $0x54,%eax
820008c9:	77 0b                	ja     820008d6 <_malloc_r+0x166>
820008cb:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008ce:	c1 e8 0c             	shr    $0xc,%eax
820008d1:	83 c0 6e             	add    $0x6e,%eax
820008d4:	eb 35                	jmp    8200090b <_malloc_r+0x19b>
820008d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008d9:	c1 e8 09             	shr    $0x9,%eax
820008dc:	3d 54 01 00 00       	cmp    $0x154,%eax
820008e1:	77 0b                	ja     820008ee <_malloc_r+0x17e>
820008e3:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008e6:	c1 e8 0f             	shr    $0xf,%eax
820008e9:	83 c0 77             	add    $0x77,%eax
820008ec:	eb 1d                	jmp    8200090b <_malloc_r+0x19b>
820008ee:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008f1:	c1 e8 09             	shr    $0x9,%eax
820008f4:	3d 54 05 00 00       	cmp    $0x554,%eax
820008f9:	77 0b                	ja     82000906 <_malloc_r+0x196>
820008fb:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008fe:	c1 e8 12             	shr    $0x12,%eax
82000901:	83 c0 7c             	add    $0x7c,%eax
82000904:	eb 05                	jmp    8200090b <_malloc_r+0x19b>
82000906:	b8 7e 00 00 00       	mov    $0x7e,%eax
8200090b:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200090e:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000911:	83 c0 01             	add    $0x1,%eax
82000914:	01 c0                	add    %eax,%eax
82000916:	c1 e0 02             	shl    $0x2,%eax
82000919:	05 20 1c 00 82       	add    $0x82001c20,%eax
8200091e:	83 e8 08             	sub    $0x8,%eax
82000921:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000924:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000927:	8b 40 0c             	mov    0xc(%eax),%eax
8200092a:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200092d:	e9 86 00 00 00       	jmp    820009b8 <_malloc_r+0x248>
82000932:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000935:	8b 40 04             	mov    0x4(%eax),%eax
82000938:	83 e0 fc             	and    $0xfffffffc,%eax
8200093b:	89 45 cc             	mov    %eax,-0x34(%ebp)
8200093e:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000941:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000944:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000947:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
8200094b:	7e 06                	jle    82000953 <_malloc_r+0x1e3>
8200094d:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
82000951:	eb 71                	jmp    820009c4 <_malloc_r+0x254>
82000953:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000957:	78 56                	js     820009af <_malloc_r+0x23f>
82000959:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200095c:	8b 40 0c             	mov    0xc(%eax),%eax
8200095f:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000962:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000965:	8b 40 08             	mov    0x8(%eax),%eax
82000968:	89 45 dc             	mov    %eax,-0x24(%ebp)
8200096b:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200096e:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000971:	89 50 0c             	mov    %edx,0xc(%eax)
82000974:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000977:	8b 55 dc             	mov    -0x24(%ebp),%edx
8200097a:	89 50 08             	mov    %edx,0x8(%eax)
8200097d:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000980:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000983:	01 d0                	add    %edx,%eax
82000985:	8b 50 04             	mov    0x4(%eax),%edx
82000988:	8b 4d f4             	mov    -0xc(%ebp),%ecx
8200098b:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200098e:	01 c8                	add    %ecx,%eax
82000990:	83 ca 01             	or     $0x1,%edx
82000993:	89 50 04             	mov    %edx,0x4(%eax)
82000996:	83 ec 0c             	sub    $0xc,%esp
82000999:	ff 75 08             	push   0x8(%ebp)
8200099c:	e8 f7 05 00 00       	call   82000f98 <__malloc_unlock>
820009a1:	83 c4 10             	add    $0x10,%esp
820009a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009a7:	83 c0 08             	add    $0x8,%eax
820009aa:	e9 de 05 00 00       	jmp    82000f8d <_malloc_r+0x81d>
820009af:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009b2:	8b 40 0c             	mov    0xc(%eax),%eax
820009b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009bb:	3b 45 ec             	cmp    -0x14(%ebp),%eax
820009be:	0f 85 6e ff ff ff    	jne    82000932 <_malloc_r+0x1c2>
820009c4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
820009c8:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
820009cd:	8b 40 08             	mov    0x8(%eax),%eax
820009d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009d3:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
820009d8:	39 45 f4             	cmp    %eax,-0xc(%ebp)
820009db:	0f 84 9c 02 00 00    	je     82000c7d <_malloc_r+0x50d>
820009e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009e4:	8b 40 04             	mov    0x4(%eax),%eax
820009e7:	83 e0 fc             	and    $0xfffffffc,%eax
820009ea:	89 45 cc             	mov    %eax,-0x34(%ebp)
820009ed:	8b 45 cc             	mov    -0x34(%ebp),%eax
820009f0:	2b 45 d0             	sub    -0x30(%ebp),%eax
820009f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
820009f6:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
820009fa:	7e 7a                	jle    82000a76 <_malloc_r+0x306>
820009fc:	8b 55 f4             	mov    -0xc(%ebp),%edx
820009ff:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000a02:	01 d0                	add    %edx,%eax
82000a04:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000a07:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000a0a:	83 c8 01             	or     $0x1,%eax
82000a0d:	89 c2                	mov    %eax,%edx
82000a0f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a12:	89 50 04             	mov    %edx,0x4(%eax)
82000a15:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000a1a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000a1d:	89 50 0c             	mov    %edx,0xc(%eax)
82000a20:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a25:	8b 40 0c             	mov    0xc(%eax),%eax
82000a28:	89 42 08             	mov    %eax,0x8(%edx)
82000a2b:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a30:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a33:	89 50 0c             	mov    %edx,0xc(%eax)
82000a36:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a39:	8b 50 0c             	mov    0xc(%eax),%edx
82000a3c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a3f:	89 50 08             	mov    %edx,0x8(%eax)
82000a42:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a45:	83 c8 01             	or     $0x1,%eax
82000a48:	89 c2                	mov    %eax,%edx
82000a4a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a4d:	89 50 04             	mov    %edx,0x4(%eax)
82000a50:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000a53:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a56:	01 c2                	add    %eax,%edx
82000a58:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a5b:	89 02                	mov    %eax,(%edx)
82000a5d:	83 ec 0c             	sub    $0xc,%esp
82000a60:	ff 75 08             	push   0x8(%ebp)
82000a63:	e8 30 05 00 00       	call   82000f98 <__malloc_unlock>
82000a68:	83 c4 10             	add    $0x10,%esp
82000a6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a6e:	83 c0 08             	add    $0x8,%eax
82000a71:	e9 17 05 00 00       	jmp    82000f8d <_malloc_r+0x81d>
82000a76:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000a7b:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a80:	89 50 0c             	mov    %edx,0xc(%eax)
82000a83:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a88:	8b 40 0c             	mov    0xc(%eax),%eax
82000a8b:	89 42 08             	mov    %eax,0x8(%edx)
82000a8e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000a92:	78 32                	js     82000ac6 <_malloc_r+0x356>
82000a94:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000a97:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000a9a:	01 d0                	add    %edx,%eax
82000a9c:	8b 50 04             	mov    0x4(%eax),%edx
82000a9f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000aa2:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000aa5:	01 c8                	add    %ecx,%eax
82000aa7:	83 ca 01             	or     $0x1,%edx
82000aaa:	89 50 04             	mov    %edx,0x4(%eax)
82000aad:	83 ec 0c             	sub    $0xc,%esp
82000ab0:	ff 75 08             	push   0x8(%ebp)
82000ab3:	e8 e0 04 00 00       	call   82000f98 <__malloc_unlock>
82000ab8:	83 c4 10             	add    $0x10,%esp
82000abb:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000abe:	83 c0 08             	add    $0x8,%eax
82000ac1:	e9 c7 04 00 00       	jmp    82000f8d <_malloc_r+0x81d>
82000ac6:	81 7d cc ff 01 00 00 	cmpl   $0x1ff,-0x34(%ebp)
82000acd:	77 7f                	ja     82000b4e <_malloc_r+0x3de>
82000acf:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ad2:	c1 e8 03             	shr    $0x3,%eax
82000ad5:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000ad8:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000add:	8b 58 04             	mov    0x4(%eax),%ebx
82000ae0:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000ae3:	8d 50 03             	lea    0x3(%eax),%edx
82000ae6:	85 c0                	test   %eax,%eax
82000ae8:	0f 48 c2             	cmovs  %edx,%eax
82000aeb:	c1 f8 02             	sar    $0x2,%eax
82000aee:	ba 01 00 00 00       	mov    $0x1,%edx
82000af3:	89 c1                	mov    %eax,%ecx
82000af5:	d3 e2                	shl    %cl,%edx
82000af7:	89 d0                	mov    %edx,%eax
82000af9:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000afe:	09 d8                	or     %ebx,%eax
82000b00:	89 42 04             	mov    %eax,0x4(%edx)
82000b03:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000b06:	83 c0 01             	add    $0x1,%eax
82000b09:	01 c0                	add    %eax,%eax
82000b0b:	c1 e0 02             	shl    $0x2,%eax
82000b0e:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000b13:	83 e8 08             	sub    $0x8,%eax
82000b16:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000b19:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b1c:	8b 40 08             	mov    0x8(%eax),%eax
82000b1f:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000b22:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b25:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000b28:	89 50 0c             	mov    %edx,0xc(%eax)
82000b2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b2e:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000b31:	89 50 08             	mov    %edx,0x8(%eax)
82000b34:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b37:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000b3a:	89 50 08             	mov    %edx,0x8(%eax)
82000b3d:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b40:	8b 50 08             	mov    0x8(%eax),%edx
82000b43:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000b46:	89 50 0c             	mov    %edx,0xc(%eax)
82000b49:	e9 2f 01 00 00       	jmp    82000c7d <_malloc_r+0x50d>
82000b4e:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b51:	c1 e8 09             	shr    $0x9,%eax
82000b54:	85 c0                	test   %eax,%eax
82000b56:	75 08                	jne    82000b60 <_malloc_r+0x3f0>
82000b58:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b5b:	c1 e8 03             	shr    $0x3,%eax
82000b5e:	eb 77                	jmp    82000bd7 <_malloc_r+0x467>
82000b60:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b63:	c1 e8 09             	shr    $0x9,%eax
82000b66:	83 f8 04             	cmp    $0x4,%eax
82000b69:	77 0b                	ja     82000b76 <_malloc_r+0x406>
82000b6b:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b6e:	c1 e8 06             	shr    $0x6,%eax
82000b71:	83 c0 38             	add    $0x38,%eax
82000b74:	eb 61                	jmp    82000bd7 <_malloc_r+0x467>
82000b76:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b79:	c1 e8 09             	shr    $0x9,%eax
82000b7c:	83 f8 14             	cmp    $0x14,%eax
82000b7f:	77 0b                	ja     82000b8c <_malloc_r+0x41c>
82000b81:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b84:	c1 e8 09             	shr    $0x9,%eax
82000b87:	83 c0 5b             	add    $0x5b,%eax
82000b8a:	eb 4b                	jmp    82000bd7 <_malloc_r+0x467>
82000b8c:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b8f:	c1 e8 09             	shr    $0x9,%eax
82000b92:	83 f8 54             	cmp    $0x54,%eax
82000b95:	77 0b                	ja     82000ba2 <_malloc_r+0x432>
82000b97:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b9a:	c1 e8 0c             	shr    $0xc,%eax
82000b9d:	83 c0 6e             	add    $0x6e,%eax
82000ba0:	eb 35                	jmp    82000bd7 <_malloc_r+0x467>
82000ba2:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ba5:	c1 e8 09             	shr    $0x9,%eax
82000ba8:	3d 54 01 00 00       	cmp    $0x154,%eax
82000bad:	77 0b                	ja     82000bba <_malloc_r+0x44a>
82000baf:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bb2:	c1 e8 0f             	shr    $0xf,%eax
82000bb5:	83 c0 77             	add    $0x77,%eax
82000bb8:	eb 1d                	jmp    82000bd7 <_malloc_r+0x467>
82000bba:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bbd:	c1 e8 09             	shr    $0x9,%eax
82000bc0:	3d 54 05 00 00       	cmp    $0x554,%eax
82000bc5:	77 0b                	ja     82000bd2 <_malloc_r+0x462>
82000bc7:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bca:	c1 e8 12             	shr    $0x12,%eax
82000bcd:	83 c0 7c             	add    $0x7c,%eax
82000bd0:	eb 05                	jmp    82000bd7 <_malloc_r+0x467>
82000bd2:	b8 7e 00 00 00       	mov    $0x7e,%eax
82000bd7:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000bda:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000bdd:	83 c0 01             	add    $0x1,%eax
82000be0:	01 c0                	add    %eax,%eax
82000be2:	c1 e0 02             	shl    $0x2,%eax
82000be5:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000bea:	83 e8 08             	sub    $0x8,%eax
82000bed:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000bf0:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000bf3:	8b 40 08             	mov    0x8(%eax),%eax
82000bf6:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000bf9:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000bfc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000bff:	75 36                	jne    82000c37 <_malloc_r+0x4c7>
82000c01:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000c06:	8b 58 04             	mov    0x4(%eax),%ebx
82000c09:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000c0c:	8d 50 03             	lea    0x3(%eax),%edx
82000c0f:	85 c0                	test   %eax,%eax
82000c11:	0f 48 c2             	cmovs  %edx,%eax
82000c14:	c1 f8 02             	sar    $0x2,%eax
82000c17:	ba 01 00 00 00       	mov    $0x1,%edx
82000c1c:	89 c1                	mov    %eax,%ecx
82000c1e:	d3 e2                	shl    %cl,%edx
82000c20:	89 d0                	mov    %edx,%eax
82000c22:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000c27:	09 d8                	or     %ebx,%eax
82000c29:	89 42 04             	mov    %eax,0x4(%edx)
82000c2c:	eb 28                	jmp    82000c56 <_malloc_r+0x4e6>
82000c2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c31:	8b 40 08             	mov    0x8(%eax),%eax
82000c34:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000c37:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c3a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000c3d:	74 0e                	je     82000c4d <_malloc_r+0x4dd>
82000c3f:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c42:	8b 40 04             	mov    0x4(%eax),%eax
82000c45:	83 e0 fc             	and    $0xfffffffc,%eax
82000c48:	39 45 cc             	cmp    %eax,-0x34(%ebp)
82000c4b:	72 e1                	jb     82000c2e <_malloc_r+0x4be>
82000c4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c50:	8b 40 0c             	mov    0xc(%eax),%eax
82000c53:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000c56:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c59:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000c5c:	89 50 0c             	mov    %edx,0xc(%eax)
82000c5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c62:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000c65:	89 50 08             	mov    %edx,0x8(%eax)
82000c68:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c6b:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000c6e:	89 50 08             	mov    %edx,0x8(%eax)
82000c71:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c74:	8b 50 08             	mov    0x8(%eax),%edx
82000c77:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c7a:	89 50 0c             	mov    %edx,0xc(%eax)
82000c7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000c80:	8d 50 03             	lea    0x3(%eax),%edx
82000c83:	85 c0                	test   %eax,%eax
82000c85:	0f 48 c2             	cmovs  %edx,%eax
82000c88:	c1 f8 02             	sar    $0x2,%eax
82000c8b:	ba 01 00 00 00       	mov    $0x1,%edx
82000c90:	89 c1                	mov    %eax,%ecx
82000c92:	d3 e2                	shl    %cl,%edx
82000c94:	89 d0                	mov    %edx,%eax
82000c96:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000c99:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000c9e:	8b 40 04             	mov    0x4(%eax),%eax
82000ca1:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000ca4:	0f 87 13 02 00 00    	ja     82000ebd <_malloc_r+0x74d>
82000caa:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000caf:	8b 40 04             	mov    0x4(%eax),%eax
82000cb2:	23 45 e4             	and    -0x1c(%ebp),%eax
82000cb5:	85 c0                	test   %eax,%eax
82000cb7:	75 27                	jne    82000ce0 <_malloc_r+0x570>
82000cb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000cbc:	83 e0 fc             	and    $0xfffffffc,%eax
82000cbf:	83 c0 04             	add    $0x4,%eax
82000cc2:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000cc5:	d1 65 e4             	shll   -0x1c(%ebp)
82000cc8:	eb 07                	jmp    82000cd1 <_malloc_r+0x561>
82000cca:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000cce:	d1 65 e4             	shll   -0x1c(%ebp)
82000cd1:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000cd6:	8b 40 04             	mov    0x4(%eax),%eax
82000cd9:	23 45 e4             	and    -0x1c(%ebp),%eax
82000cdc:	85 c0                	test   %eax,%eax
82000cde:	74 ea                	je     82000cca <_malloc_r+0x55a>
82000ce0:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000ce3:	89 45 e0             	mov    %eax,-0x20(%ebp)
82000ce6:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000ce9:	83 c0 01             	add    $0x1,%eax
82000cec:	01 c0                	add    %eax,%eax
82000cee:	c1 e0 02             	shl    $0x2,%eax
82000cf1:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000cf6:	83 e8 08             	sub    $0x8,%eax
82000cf9:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000cfc:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000cff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82000d02:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000d05:	8b 40 0c             	mov    0xc(%eax),%eax
82000d08:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000d0b:	e9 22 01 00 00       	jmp    82000e32 <_malloc_r+0x6c2>
82000d10:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d13:	8b 40 04             	mov    0x4(%eax),%eax
82000d16:	83 e0 fc             	and    $0xfffffffc,%eax
82000d19:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000d1c:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000d1f:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000d22:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000d25:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000d29:	0f 8e 9e 00 00 00    	jle    82000dcd <_malloc_r+0x65d>
82000d2f:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000d32:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d35:	01 d0                	add    %edx,%eax
82000d37:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000d3a:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d3d:	83 c8 01             	or     $0x1,%eax
82000d40:	89 c2                	mov    %eax,%edx
82000d42:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d45:	89 50 04             	mov    %edx,0x4(%eax)
82000d48:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d4b:	8b 40 0c             	mov    0xc(%eax),%eax
82000d4e:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d54:	8b 40 08             	mov    0x8(%eax),%eax
82000d57:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000d5a:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000d5d:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000d60:	89 50 0c             	mov    %edx,0xc(%eax)
82000d63:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000d66:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000d69:	89 50 08             	mov    %edx,0x8(%eax)
82000d6c:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000d71:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000d74:	89 50 0c             	mov    %edx,0xc(%eax)
82000d77:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000d7c:	8b 40 0c             	mov    0xc(%eax),%eax
82000d7f:	89 42 08             	mov    %eax,0x8(%edx)
82000d82:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000d87:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d8a:	89 50 0c             	mov    %edx,0xc(%eax)
82000d8d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d90:	8b 50 0c             	mov    0xc(%eax),%edx
82000d93:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d96:	89 50 08             	mov    %edx,0x8(%eax)
82000d99:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000d9c:	83 c8 01             	or     $0x1,%eax
82000d9f:	89 c2                	mov    %eax,%edx
82000da1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000da4:	89 50 04             	mov    %edx,0x4(%eax)
82000da7:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000daa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000dad:	01 c2                	add    %eax,%edx
82000daf:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000db2:	89 02                	mov    %eax,(%edx)
82000db4:	83 ec 0c             	sub    $0xc,%esp
82000db7:	ff 75 08             	push   0x8(%ebp)
82000dba:	e8 d9 01 00 00       	call   82000f98 <__malloc_unlock>
82000dbf:	83 c4 10             	add    $0x10,%esp
82000dc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000dc5:	83 c0 08             	add    $0x8,%eax
82000dc8:	e9 c0 01 00 00       	jmp    82000f8d <_malloc_r+0x81d>
82000dcd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000dd1:	78 56                	js     82000e29 <_malloc_r+0x6b9>
82000dd3:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000dd6:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000dd9:	01 d0                	add    %edx,%eax
82000ddb:	8b 50 04             	mov    0x4(%eax),%edx
82000dde:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000de1:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000de4:	01 c8                	add    %ecx,%eax
82000de6:	83 ca 01             	or     $0x1,%edx
82000de9:	89 50 04             	mov    %edx,0x4(%eax)
82000dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000def:	8b 40 0c             	mov    0xc(%eax),%eax
82000df2:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000df5:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000df8:	8b 40 08             	mov    0x8(%eax),%eax
82000dfb:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000dfe:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000e01:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000e04:	89 50 0c             	mov    %edx,0xc(%eax)
82000e07:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000e0a:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000e0d:	89 50 08             	mov    %edx,0x8(%eax)
82000e10:	83 ec 0c             	sub    $0xc,%esp
82000e13:	ff 75 08             	push   0x8(%ebp)
82000e16:	e8 7d 01 00 00       	call   82000f98 <__malloc_unlock>
82000e1b:	83 c4 10             	add    $0x10,%esp
82000e1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e21:	83 c0 08             	add    $0x8,%eax
82000e24:	e9 64 01 00 00       	jmp    82000f8d <_malloc_r+0x81d>
82000e29:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e2c:	8b 40 0c             	mov    0xc(%eax),%eax
82000e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000e32:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e35:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82000e38:	0f 85 d2 fe ff ff    	jne    82000d10 <_malloc_r+0x5a0>
82000e3e:	83 45 ec 08          	addl   $0x8,-0x14(%ebp)
82000e42:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
82000e46:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000e49:	83 e0 03             	and    $0x3,%eax
82000e4c:	85 c0                	test   %eax,%eax
82000e4e:	0f 85 ae fe ff ff    	jne    82000d02 <_malloc_r+0x592>
82000e54:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000e57:	83 e0 03             	and    $0x3,%eax
82000e5a:	85 c0                	test   %eax,%eax
82000e5c:	75 19                	jne    82000e77 <_malloc_r+0x707>
82000e5e:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000e63:	8b 48 04             	mov    0x4(%eax),%ecx
82000e66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
82000e69:	f7 d0                	not    %eax
82000e6b:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000e70:	21 c8                	and    %ecx,%eax
82000e72:	89 42 04             	mov    %eax,0x4(%edx)
82000e75:	eb 13                	jmp    82000e8a <_malloc_r+0x71a>
82000e77:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
82000e7b:	83 6d d4 08          	subl   $0x8,-0x2c(%ebp)
82000e7f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000e82:	8b 40 08             	mov    0x8(%eax),%eax
82000e85:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
82000e88:	74 ca                	je     82000e54 <_malloc_r+0x6e4>
82000e8a:	d1 65 e4             	shll   -0x1c(%ebp)
82000e8d:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000e92:	8b 40 04             	mov    0x4(%eax),%eax
82000e95:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000e98:	77 23                	ja     82000ebd <_malloc_r+0x74d>
82000e9a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82000e9e:	74 1d                	je     82000ebd <_malloc_r+0x74d>
82000ea0:	eb 07                	jmp    82000ea9 <_malloc_r+0x739>
82000ea2:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000ea6:	d1 65 e4             	shll   -0x1c(%ebp)
82000ea9:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000eae:	8b 40 04             	mov    0x4(%eax),%eax
82000eb1:	23 45 e4             	and    -0x1c(%ebp),%eax
82000eb4:	85 c0                	test   %eax,%eax
82000eb6:	74 ea                	je     82000ea2 <_malloc_r+0x732>
82000eb8:	e9 23 fe ff ff       	jmp    82000ce0 <_malloc_r+0x570>
82000ebd:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ec2:	8b 40 08             	mov    0x8(%eax),%eax
82000ec5:	8b 40 04             	mov    0x4(%eax),%eax
82000ec8:	83 e0 fc             	and    $0xfffffffc,%eax
82000ecb:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000ece:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000ed1:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ed6:	8b 40 08             	mov    0x8(%eax),%eax
82000ed9:	8b 40 04             	mov    0x4(%eax),%eax
82000edc:	83 e0 fc             	and    $0xfffffffc,%eax
82000edf:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000ee2:	77 06                	ja     82000eea <_malloc_r+0x77a>
82000ee4:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000ee8:	7f 53                	jg     82000f3d <_malloc_r+0x7cd>
82000eea:	83 ec 08             	sub    $0x8,%esp
82000eed:	ff 75 d0             	push   -0x30(%ebp)
82000ef0:	ff 75 08             	push   0x8(%ebp)
82000ef3:	e8 e5 f5 ff ff       	call   820004dd <malloc_extend_top>
82000ef8:	83 c4 10             	add    $0x10,%esp
82000efb:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f00:	8b 40 08             	mov    0x8(%eax),%eax
82000f03:	8b 40 04             	mov    0x4(%eax),%eax
82000f06:	83 e0 fc             	and    $0xfffffffc,%eax
82000f09:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000f0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000f0f:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f14:	8b 40 08             	mov    0x8(%eax),%eax
82000f17:	8b 40 04             	mov    0x4(%eax),%eax
82000f1a:	83 e0 fc             	and    $0xfffffffc,%eax
82000f1d:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000f20:	77 06                	ja     82000f28 <_malloc_r+0x7b8>
82000f22:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000f26:	7f 15                	jg     82000f3d <_malloc_r+0x7cd>
82000f28:	83 ec 0c             	sub    $0xc,%esp
82000f2b:	ff 75 08             	push   0x8(%ebp)
82000f2e:	e8 65 00 00 00       	call   82000f98 <__malloc_unlock>
82000f33:	83 c4 10             	add    $0x10,%esp
82000f36:	b8 00 00 00 00       	mov    $0x0,%eax
82000f3b:	eb 50                	jmp    82000f8d <_malloc_r+0x81d>
82000f3d:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f42:	8b 40 08             	mov    0x8(%eax),%eax
82000f45:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000f48:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f4b:	83 c8 01             	or     $0x1,%eax
82000f4e:	89 c2                	mov    %eax,%edx
82000f50:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f53:	89 50 04             	mov    %edx,0x4(%eax)
82000f56:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000f5b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000f5e:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f61:	01 c8                	add    %ecx,%eax
82000f63:	89 42 08             	mov    %eax,0x8(%edx)
82000f66:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000f69:	83 c8 01             	or     $0x1,%eax
82000f6c:	89 c2                	mov    %eax,%edx
82000f6e:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f73:	8b 40 08             	mov    0x8(%eax),%eax
82000f76:	89 50 04             	mov    %edx,0x4(%eax)
82000f79:	83 ec 0c             	sub    $0xc,%esp
82000f7c:	ff 75 08             	push   0x8(%ebp)
82000f7f:	e8 14 00 00 00       	call   82000f98 <__malloc_unlock>
82000f84:	83 c4 10             	add    $0x10,%esp
82000f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f8a:	83 c0 08             	add    $0x8,%eax
82000f8d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
82000f90:	c9                   	leave  
82000f91:	c3                   	ret    

82000f92 <__malloc_lock>:
82000f92:	55                   	push   %ebp
82000f93:	89 e5                	mov    %esp,%ebp
82000f95:	90                   	nop
82000f96:	5d                   	pop    %ebp
82000f97:	c3                   	ret    

82000f98 <__malloc_unlock>:
82000f98:	55                   	push   %ebp
82000f99:	89 e5                	mov    %esp,%ebp
82000f9b:	90                   	nop
82000f9c:	5d                   	pop    %ebp
82000f9d:	c3                   	ret    

82000f9e <_sbrk_r>:
82000f9e:	55                   	push   %ebp
82000f9f:	89 e5                	mov    %esp,%ebp
82000fa1:	83 ec 18             	sub    $0x18,%esp
82000fa4:	c7 05 90 20 00 82 00 	movl   $0x0,0x82002090
82000fab:	00 00 00 
82000fae:	83 ec 0c             	sub    $0xc,%esp
82000fb1:	ff 75 0c             	push   0xc(%ebp)
82000fb4:	e8 0d f3 ff ff       	call   820002c6 <sbrk>
82000fb9:	83 c4 10             	add    $0x10,%esp
82000fbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000fbf:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000fc3:	75 14                	jne    82000fd9 <_sbrk_r+0x3b>
82000fc5:	a1 90 20 00 82       	mov    0x82002090,%eax
82000fca:	85 c0                	test   %eax,%eax
82000fcc:	74 0b                	je     82000fd9 <_sbrk_r+0x3b>
82000fce:	8b 15 90 20 00 82    	mov    0x82002090,%edx
82000fd4:	8b 45 08             	mov    0x8(%ebp),%eax
82000fd7:	89 10                	mov    %edx,(%eax)
82000fd9:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000fdc:	c9                   	leave  
82000fdd:	c3                   	ret    

82000fde <__call_exitprocs>:
82000fde:	55                   	push   %ebp
82000fdf:	89 e5                	mov    %esp,%ebp
82000fe1:	57                   	push   %edi
82000fe2:	56                   	push   %esi
82000fe3:	53                   	push   %ebx
82000fe4:	83 ec 1c             	sub    $0x1c,%esp
82000fe7:	a1 c8 17 00 82       	mov    0x820017c8,%eax
82000fec:	8b 98 48 01 00 00    	mov    0x148(%eax),%ebx
82000ff2:	a1 c8 17 00 82       	mov    0x820017c8,%eax
82000ff7:	05 48 01 00 00       	add    $0x148,%eax
82000ffc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000fff:	90                   	nop
82001000:	85 db                	test   %ebx,%ebx
82001002:	0f 84 e1 00 00 00    	je     820010e9 <__call_exitprocs+0x10b>
82001008:	8d bb 88 00 00 00    	lea    0x88(%ebx),%edi
8200100e:	8b 43 04             	mov    0x4(%ebx),%eax
82001011:	8d 70 ff             	lea    -0x1(%eax),%esi
82001014:	e9 c6 00 00 00       	jmp    820010df <__call_exitprocs+0x101>
82001019:	b8 01 00 00 00       	mov    $0x1,%eax
8200101e:	89 f1                	mov    %esi,%ecx
82001020:	d3 e0                	shl    %cl,%eax
82001022:	89 45 e0             	mov    %eax,-0x20(%ebp)
82001025:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
82001029:	74 17                	je     82001042 <__call_exitprocs+0x64>
8200102b:	85 ff                	test   %edi,%edi
8200102d:	0f 84 a5 00 00 00    	je     820010d8 <__call_exitprocs+0xfa>
82001033:	8d 46 20             	lea    0x20(%esi),%eax
82001036:	8b 04 87             	mov    (%edi,%eax,4),%eax
82001039:	39 45 0c             	cmp    %eax,0xc(%ebp)
8200103c:	0f 85 96 00 00 00    	jne    820010d8 <__call_exitprocs+0xfa>
82001042:	8b 44 b3 08          	mov    0x8(%ebx,%esi,4),%eax
82001046:	89 45 dc             	mov    %eax,-0x24(%ebp)
82001049:	8b 43 04             	mov    0x4(%ebx),%eax
8200104c:	83 e8 01             	sub    $0x1,%eax
8200104f:	39 c6                	cmp    %eax,%esi
82001051:	75 0b                	jne    8200105e <__call_exitprocs+0x80>
82001053:	8b 43 04             	mov    0x4(%ebx),%eax
82001056:	83 e8 01             	sub    $0x1,%eax
82001059:	89 43 04             	mov    %eax,0x4(%ebx)
8200105c:	eb 08                	jmp    82001066 <__call_exitprocs+0x88>
8200105e:	c7 44 b3 08 00 00 00 	movl   $0x0,0x8(%ebx,%esi,4)
82001065:	00 
82001066:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
8200106a:	74 6f                	je     820010db <__call_exitprocs+0xfd>
8200106c:	8b 43 04             	mov    0x4(%ebx),%eax
8200106f:	89 45 d8             	mov    %eax,-0x28(%ebp)
82001072:	85 ff                	test   %edi,%edi
82001074:	74 0f                	je     82001085 <__call_exitprocs+0xa7>
82001076:	8b 97 00 01 00 00    	mov    0x100(%edi),%edx
8200107c:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200107f:	21 d0                	and    %edx,%eax
82001081:	85 c0                	test   %eax,%eax
82001083:	75 07                	jne    8200108c <__call_exitprocs+0xae>
82001085:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001088:	ff d0                	call   *%eax
8200108a:	eb 32                	jmp    820010be <__call_exitprocs+0xe0>
8200108c:	8b 97 04 01 00 00    	mov    0x104(%edi),%edx
82001092:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001095:	21 d0                	and    %edx,%eax
82001097:	85 c0                	test   %eax,%eax
82001099:	75 14                	jne    820010af <__call_exitprocs+0xd1>
8200109b:	8b 04 b7             	mov    (%edi,%esi,4),%eax
8200109e:	83 ec 08             	sub    $0x8,%esp
820010a1:	50                   	push   %eax
820010a2:	ff 75 08             	push   0x8(%ebp)
820010a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
820010a8:	ff d0                	call   *%eax
820010aa:	83 c4 10             	add    $0x10,%esp
820010ad:	eb 0f                	jmp    820010be <__call_exitprocs+0xe0>
820010af:	8b 04 b7             	mov    (%edi,%esi,4),%eax
820010b2:	83 ec 0c             	sub    $0xc,%esp
820010b5:	50                   	push   %eax
820010b6:	8b 45 dc             	mov    -0x24(%ebp),%eax
820010b9:	ff d0                	call   *%eax
820010bb:	83 c4 10             	add    $0x10,%esp
820010be:	8b 43 04             	mov    0x4(%ebx),%eax
820010c1:	39 45 d8             	cmp    %eax,-0x28(%ebp)
820010c4:	0f 85 1d ff ff ff    	jne    82000fe7 <__call_exitprocs+0x9>
820010ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
820010cd:	8b 00                	mov    (%eax),%eax
820010cf:	39 c3                	cmp    %eax,%ebx
820010d1:	74 09                	je     820010dc <__call_exitprocs+0xfe>
820010d3:	e9 0f ff ff ff       	jmp    82000fe7 <__call_exitprocs+0x9>
820010d8:	90                   	nop
820010d9:	eb 01                	jmp    820010dc <__call_exitprocs+0xfe>
820010db:	90                   	nop
820010dc:	83 ee 01             	sub    $0x1,%esi
820010df:	85 f6                	test   %esi,%esi
820010e1:	0f 89 32 ff ff ff    	jns    82001019 <__call_exitprocs+0x3b>
820010e7:	eb 01                	jmp    820010ea <__call_exitprocs+0x10c>
820010e9:	90                   	nop
820010ea:	90                   	nop
820010eb:	8d 65 f4             	lea    -0xc(%ebp),%esp
820010ee:	5b                   	pop    %ebx
820010ef:	5e                   	pop    %esi
820010f0:	5f                   	pop    %edi
820010f1:	5d                   	pop    %ebp
820010f2:	c3                   	ret    

820010f3 <_free_r>:
820010f3:	55                   	push   %ebp
820010f4:	89 e5                	mov    %esp,%ebp
820010f6:	53                   	push   %ebx
820010f7:	83 ec 34             	sub    $0x34,%esp
820010fa:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
820010fe:	0f 84 c4 03 00 00    	je     820014c8 <_free_r+0x3d5>
82001104:	83 ec 0c             	sub    $0xc,%esp
82001107:	ff 75 08             	push   0x8(%ebp)
8200110a:	e8 83 fe ff ff       	call   82000f92 <__malloc_lock>
8200110f:	83 c4 10             	add    $0x10,%esp
82001112:	8b 45 0c             	mov    0xc(%ebp),%eax
82001115:	83 e8 08             	sub    $0x8,%eax
82001118:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200111b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200111e:	8b 40 04             	mov    0x4(%eax),%eax
82001121:	89 45 e0             	mov    %eax,-0x20(%ebp)
82001124:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001127:	83 e0 fe             	and    $0xfffffffe,%eax
8200112a:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200112d:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001130:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001133:	01 d0                	add    %edx,%eax
82001135:	89 45 dc             	mov    %eax,-0x24(%ebp)
82001138:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200113b:	8b 40 04             	mov    0x4(%eax),%eax
8200113e:	83 e0 fc             	and    $0xfffffffc,%eax
82001141:	89 45 d8             	mov    %eax,-0x28(%ebp)
82001144:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001149:	8b 40 08             	mov    0x8(%eax),%eax
8200114c:	39 45 dc             	cmp    %eax,-0x24(%ebp)
8200114f:	0f 85 94 00 00 00    	jne    820011e9 <_free_r+0xf6>
82001155:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001158:	01 45 f0             	add    %eax,-0x10(%ebp)
8200115b:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200115e:	83 e0 01             	and    $0x1,%eax
82001161:	85 c0                	test   %eax,%eax
82001163:	75 3a                	jne    8200119f <_free_r+0xac>
82001165:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001168:	8b 00                	mov    (%eax),%eax
8200116a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8200116d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001170:	f7 d8                	neg    %eax
82001172:	01 45 f4             	add    %eax,-0xc(%ebp)
82001175:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001178:	01 45 f0             	add    %eax,-0x10(%ebp)
8200117b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200117e:	8b 40 0c             	mov    0xc(%eax),%eax
82001181:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001184:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001187:	8b 40 08             	mov    0x8(%eax),%eax
8200118a:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200118d:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001190:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001193:	89 50 0c             	mov    %edx,0xc(%eax)
82001196:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001199:	8b 55 e8             	mov    -0x18(%ebp),%edx
8200119c:	89 50 08             	mov    %edx,0x8(%eax)
8200119f:	8b 45 f0             	mov    -0x10(%ebp),%eax
820011a2:	83 c8 01             	or     $0x1,%eax
820011a5:	89 c2                	mov    %eax,%edx
820011a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011aa:	89 50 04             	mov    %edx,0x4(%eax)
820011ad:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
820011b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011b5:	89 42 08             	mov    %eax,0x8(%edx)
820011b8:	a1 28 20 00 82       	mov    0x82002028,%eax
820011bd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
820011c0:	72 14                	jb     820011d6 <_free_r+0xe3>
820011c2:	a1 40 20 00 82       	mov    0x82002040,%eax
820011c7:	83 ec 08             	sub    $0x8,%esp
820011ca:	50                   	push   %eax
820011cb:	ff 75 08             	push   0x8(%ebp)
820011ce:	e8 fb 02 00 00       	call   820014ce <_malloc_trim_r>
820011d3:	83 c4 10             	add    $0x10,%esp
820011d6:	83 ec 0c             	sub    $0xc,%esp
820011d9:	ff 75 08             	push   0x8(%ebp)
820011dc:	e8 b7 fd ff ff       	call   82000f98 <__malloc_unlock>
820011e1:	83 c4 10             	add    $0x10,%esp
820011e4:	e9 e0 02 00 00       	jmp    820014c9 <_free_r+0x3d6>
820011e9:	8b 45 dc             	mov    -0x24(%ebp),%eax
820011ec:	8b 55 d8             	mov    -0x28(%ebp),%edx
820011ef:	89 50 04             	mov    %edx,0x4(%eax)
820011f2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820011f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
820011fc:	83 e0 01             	and    $0x1,%eax
820011ff:	85 c0                	test   %eax,%eax
82001201:	75 52                	jne    82001255 <_free_r+0x162>
82001203:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001206:	8b 00                	mov    (%eax),%eax
82001208:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8200120b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200120e:	f7 d8                	neg    %eax
82001210:	01 45 f4             	add    %eax,-0xc(%ebp)
82001213:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001216:	01 45 f0             	add    %eax,-0x10(%ebp)
82001219:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200121c:	8b 40 08             	mov    0x8(%eax),%eax
8200121f:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82001224:	39 d0                	cmp    %edx,%eax
82001226:	75 09                	jne    82001231 <_free_r+0x13e>
82001228:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
8200122f:	eb 24                	jmp    82001255 <_free_r+0x162>
82001231:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001234:	8b 40 0c             	mov    0xc(%eax),%eax
82001237:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200123a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200123d:	8b 40 08             	mov    0x8(%eax),%eax
82001240:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001243:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001246:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001249:	89 50 0c             	mov    %edx,0xc(%eax)
8200124c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200124f:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001252:	89 50 08             	mov    %edx,0x8(%eax)
82001255:	8b 55 dc             	mov    -0x24(%ebp),%edx
82001258:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200125b:	01 d0                	add    %edx,%eax
8200125d:	8b 40 04             	mov    0x4(%eax),%eax
82001260:	83 e0 01             	and    $0x1,%eax
82001263:	85 c0                	test   %eax,%eax
82001265:	75 75                	jne    820012dc <_free_r+0x1e9>
82001267:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200126a:	01 45 f0             	add    %eax,-0x10(%ebp)
8200126d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82001271:	75 45                	jne    820012b8 <_free_r+0x1c5>
82001273:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001276:	8b 40 08             	mov    0x8(%eax),%eax
82001279:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
8200127e:	39 d0                	cmp    %edx,%eax
82001280:	75 36                	jne    820012b8 <_free_r+0x1c5>
82001282:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82001289:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
8200128e:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001291:	89 50 0c             	mov    %edx,0xc(%eax)
82001294:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82001299:	8b 40 0c             	mov    0xc(%eax),%eax
8200129c:	89 42 08             	mov    %eax,0x8(%edx)
8200129f:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
820012a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012a7:	89 50 0c             	mov    %edx,0xc(%eax)
820012aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012ad:	8b 50 0c             	mov    0xc(%eax),%edx
820012b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012b3:	89 50 08             	mov    %edx,0x8(%eax)
820012b6:	eb 24                	jmp    820012dc <_free_r+0x1e9>
820012b8:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012bb:	8b 40 0c             	mov    0xc(%eax),%eax
820012be:	89 45 ec             	mov    %eax,-0x14(%ebp)
820012c1:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012c4:	8b 40 08             	mov    0x8(%eax),%eax
820012c7:	89 45 e8             	mov    %eax,-0x18(%ebp)
820012ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
820012cd:	8b 55 ec             	mov    -0x14(%ebp),%edx
820012d0:	89 50 0c             	mov    %edx,0xc(%eax)
820012d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
820012d6:	8b 55 e8             	mov    -0x18(%ebp),%edx
820012d9:	89 50 08             	mov    %edx,0x8(%eax)
820012dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012df:	83 c8 01             	or     $0x1,%eax
820012e2:	89 c2                	mov    %eax,%edx
820012e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012e7:	89 50 04             	mov    %edx,0x4(%eax)
820012ea:	8b 55 f4             	mov    -0xc(%ebp),%edx
820012ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012f0:	01 c2                	add    %eax,%edx
820012f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012f5:	89 02                	mov    %eax,(%edx)
820012f7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
820012fb:	0f 85 b7 01 00 00    	jne    820014b8 <_free_r+0x3c5>
82001301:	81 7d f0 ff 01 00 00 	cmpl   $0x1ff,-0x10(%ebp)
82001308:	77 7f                	ja     82001389 <_free_r+0x296>
8200130a:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200130d:	c1 e8 03             	shr    $0x3,%eax
82001310:	89 45 d0             	mov    %eax,-0x30(%ebp)
82001313:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001318:	8b 58 04             	mov    0x4(%eax),%ebx
8200131b:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200131e:	8d 50 03             	lea    0x3(%eax),%edx
82001321:	85 c0                	test   %eax,%eax
82001323:	0f 48 c2             	cmovs  %edx,%eax
82001326:	c1 f8 02             	sar    $0x2,%eax
82001329:	ba 01 00 00 00       	mov    $0x1,%edx
8200132e:	89 c1                	mov    %eax,%ecx
82001330:	d3 e2                	shl    %cl,%edx
82001332:	89 d0                	mov    %edx,%eax
82001334:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82001339:	09 d8                	or     %ebx,%eax
8200133b:	89 42 04             	mov    %eax,0x4(%edx)
8200133e:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001341:	83 c0 01             	add    $0x1,%eax
82001344:	01 c0                	add    %eax,%eax
82001346:	c1 e0 02             	shl    $0x2,%eax
82001349:	05 20 1c 00 82       	add    $0x82001c20,%eax
8200134e:	83 e8 08             	sub    $0x8,%eax
82001351:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001354:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001357:	8b 40 08             	mov    0x8(%eax),%eax
8200135a:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200135d:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001360:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001363:	89 50 0c             	mov    %edx,0xc(%eax)
82001366:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001369:	8b 55 e8             	mov    -0x18(%ebp),%edx
8200136c:	89 50 08             	mov    %edx,0x8(%eax)
8200136f:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001372:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001375:	89 50 08             	mov    %edx,0x8(%eax)
82001378:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200137b:	8b 50 08             	mov    0x8(%eax),%edx
8200137e:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001381:	89 50 0c             	mov    %edx,0xc(%eax)
82001384:	e9 2f 01 00 00       	jmp    820014b8 <_free_r+0x3c5>
82001389:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200138c:	c1 e8 09             	shr    $0x9,%eax
8200138f:	85 c0                	test   %eax,%eax
82001391:	75 08                	jne    8200139b <_free_r+0x2a8>
82001393:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001396:	c1 e8 03             	shr    $0x3,%eax
82001399:	eb 77                	jmp    82001412 <_free_r+0x31f>
8200139b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200139e:	c1 e8 09             	shr    $0x9,%eax
820013a1:	83 f8 04             	cmp    $0x4,%eax
820013a4:	77 0b                	ja     820013b1 <_free_r+0x2be>
820013a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013a9:	c1 e8 06             	shr    $0x6,%eax
820013ac:	83 c0 38             	add    $0x38,%eax
820013af:	eb 61                	jmp    82001412 <_free_r+0x31f>
820013b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013b4:	c1 e8 09             	shr    $0x9,%eax
820013b7:	83 f8 14             	cmp    $0x14,%eax
820013ba:	77 0b                	ja     820013c7 <_free_r+0x2d4>
820013bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013bf:	c1 e8 09             	shr    $0x9,%eax
820013c2:	83 c0 5b             	add    $0x5b,%eax
820013c5:	eb 4b                	jmp    82001412 <_free_r+0x31f>
820013c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013ca:	c1 e8 09             	shr    $0x9,%eax
820013cd:	83 f8 54             	cmp    $0x54,%eax
820013d0:	77 0b                	ja     820013dd <_free_r+0x2ea>
820013d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013d5:	c1 e8 0c             	shr    $0xc,%eax
820013d8:	83 c0 6e             	add    $0x6e,%eax
820013db:	eb 35                	jmp    82001412 <_free_r+0x31f>
820013dd:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013e0:	c1 e8 09             	shr    $0x9,%eax
820013e3:	3d 54 01 00 00       	cmp    $0x154,%eax
820013e8:	77 0b                	ja     820013f5 <_free_r+0x302>
820013ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013ed:	c1 e8 0f             	shr    $0xf,%eax
820013f0:	83 c0 77             	add    $0x77,%eax
820013f3:	eb 1d                	jmp    82001412 <_free_r+0x31f>
820013f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013f8:	c1 e8 09             	shr    $0x9,%eax
820013fb:	3d 54 05 00 00       	cmp    $0x554,%eax
82001400:	77 0b                	ja     8200140d <_free_r+0x31a>
82001402:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001405:	c1 e8 12             	shr    $0x12,%eax
82001408:	83 c0 7c             	add    $0x7c,%eax
8200140b:	eb 05                	jmp    82001412 <_free_r+0x31f>
8200140d:	b8 7e 00 00 00       	mov    $0x7e,%eax
82001412:	89 45 d0             	mov    %eax,-0x30(%ebp)
82001415:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001418:	83 c0 01             	add    $0x1,%eax
8200141b:	01 c0                	add    %eax,%eax
8200141d:	c1 e0 02             	shl    $0x2,%eax
82001420:	05 20 1c 00 82       	add    $0x82001c20,%eax
82001425:	83 e8 08             	sub    $0x8,%eax
82001428:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200142b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200142e:	8b 40 08             	mov    0x8(%eax),%eax
82001431:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001434:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001437:	3b 45 ec             	cmp    -0x14(%ebp),%eax
8200143a:	75 36                	jne    82001472 <_free_r+0x37f>
8200143c:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001441:	8b 58 04             	mov    0x4(%eax),%ebx
82001444:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001447:	8d 50 03             	lea    0x3(%eax),%edx
8200144a:	85 c0                	test   %eax,%eax
8200144c:	0f 48 c2             	cmovs  %edx,%eax
8200144f:	c1 f8 02             	sar    $0x2,%eax
82001452:	ba 01 00 00 00       	mov    $0x1,%edx
82001457:	89 c1                	mov    %eax,%ecx
82001459:	d3 e2                	shl    %cl,%edx
8200145b:	89 d0                	mov    %edx,%eax
8200145d:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82001462:	09 d8                	or     %ebx,%eax
82001464:	89 42 04             	mov    %eax,0x4(%edx)
82001467:	eb 28                	jmp    82001491 <_free_r+0x39e>
82001469:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200146c:	8b 40 08             	mov    0x8(%eax),%eax
8200146f:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001472:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001475:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82001478:	74 0e                	je     82001488 <_free_r+0x395>
8200147a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200147d:	8b 40 04             	mov    0x4(%eax),%eax
82001480:	83 e0 fc             	and    $0xfffffffc,%eax
82001483:	39 45 f0             	cmp    %eax,-0x10(%ebp)
82001486:	72 e1                	jb     82001469 <_free_r+0x376>
82001488:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200148b:	8b 40 0c             	mov    0xc(%eax),%eax
8200148e:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001491:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001494:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001497:	89 50 0c             	mov    %edx,0xc(%eax)
8200149a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200149d:	8b 55 e8             	mov    -0x18(%ebp),%edx
820014a0:	89 50 08             	mov    %edx,0x8(%eax)
820014a3:	8b 45 ec             	mov    -0x14(%ebp),%eax
820014a6:	8b 55 f4             	mov    -0xc(%ebp),%edx
820014a9:	89 50 08             	mov    %edx,0x8(%eax)
820014ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
820014af:	8b 50 08             	mov    0x8(%eax),%edx
820014b2:	8b 45 e8             	mov    -0x18(%ebp),%eax
820014b5:	89 50 0c             	mov    %edx,0xc(%eax)
820014b8:	83 ec 0c             	sub    $0xc,%esp
820014bb:	ff 75 08             	push   0x8(%ebp)
820014be:	e8 d5 fa ff ff       	call   82000f98 <__malloc_unlock>
820014c3:	83 c4 10             	add    $0x10,%esp
820014c6:	eb 01                	jmp    820014c9 <_free_r+0x3d6>
820014c8:	90                   	nop
820014c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
820014cc:	c9                   	leave  
820014cd:	c3                   	ret    

820014ce <_malloc_trim_r>:
820014ce:	55                   	push   %ebp
820014cf:	89 e5                	mov    %esp,%ebp
820014d1:	83 ec 28             	sub    $0x28,%esp
820014d4:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
820014db:	83 ec 0c             	sub    $0xc,%esp
820014de:	ff 75 08             	push   0x8(%ebp)
820014e1:	e8 ac fa ff ff       	call   82000f92 <__malloc_lock>
820014e6:	83 c4 10             	add    $0x10,%esp
820014e9:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820014ee:	8b 40 08             	mov    0x8(%eax),%eax
820014f1:	8b 40 04             	mov    0x4(%eax),%eax
820014f4:	83 e0 fc             	and    $0xfffffffc,%eax
820014f7:	89 45 f0             	mov    %eax,-0x10(%ebp)
820014fa:	8b 45 f0             	mov    -0x10(%ebp),%eax
820014fd:	2b 45 0c             	sub    0xc(%ebp),%eax
82001500:	89 c2                	mov    %eax,%edx
82001502:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001505:	01 d0                	add    %edx,%eax
82001507:	83 e8 11             	sub    $0x11,%eax
8200150a:	ba 00 00 00 00       	mov    $0x0,%edx
8200150f:	f7 75 f4             	divl   -0xc(%ebp)
82001512:	83 e8 01             	sub    $0x1,%eax
82001515:	0f af 45 f4          	imul   -0xc(%ebp),%eax
82001519:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200151c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200151f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
82001522:	7d 18                	jge    8200153c <_malloc_trim_r+0x6e>
82001524:	83 ec 0c             	sub    $0xc,%esp
82001527:	ff 75 08             	push   0x8(%ebp)
8200152a:	e8 69 fa ff ff       	call   82000f98 <__malloc_unlock>
8200152f:	83 c4 10             	add    $0x10,%esp
82001532:	b8 00 00 00 00       	mov    $0x0,%eax
82001537:	e9 f1 00 00 00       	jmp    8200162d <_malloc_trim_r+0x15f>
8200153c:	83 ec 08             	sub    $0x8,%esp
8200153f:	6a 00                	push   $0x0
82001541:	ff 75 08             	push   0x8(%ebp)
82001544:	e8 55 fa ff ff       	call   82000f9e <_sbrk_r>
82001549:	83 c4 10             	add    $0x10,%esp
8200154c:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200154f:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001554:	8b 50 08             	mov    0x8(%eax),%edx
82001557:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200155a:	01 d0                	add    %edx,%eax
8200155c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
8200155f:	74 18                	je     82001579 <_malloc_trim_r+0xab>
82001561:	83 ec 0c             	sub    $0xc,%esp
82001564:	ff 75 08             	push   0x8(%ebp)
82001567:	e8 2c fa ff ff       	call   82000f98 <__malloc_unlock>
8200156c:	83 c4 10             	add    $0x10,%esp
8200156f:	b8 00 00 00 00       	mov    $0x0,%eax
82001574:	e9 b4 00 00 00       	jmp    8200162d <_malloc_trim_r+0x15f>
82001579:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200157c:	f7 d8                	neg    %eax
8200157e:	83 ec 08             	sub    $0x8,%esp
82001581:	50                   	push   %eax
82001582:	ff 75 08             	push   0x8(%ebp)
82001585:	e8 14 fa ff ff       	call   82000f9e <_sbrk_r>
8200158a:	83 c4 10             	add    $0x10,%esp
8200158d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82001590:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
82001594:	75 61                	jne    820015f7 <_malloc_trim_r+0x129>
82001596:	83 ec 08             	sub    $0x8,%esp
82001599:	6a 00                	push   $0x0
8200159b:	ff 75 08             	push   0x8(%ebp)
8200159e:	e8 fb f9 ff ff       	call   82000f9e <_sbrk_r>
820015a3:	83 c4 10             	add    $0x10,%esp
820015a6:	89 45 e8             	mov    %eax,-0x18(%ebp)
820015a9:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820015ae:	8b 50 08             	mov    0x8(%eax),%edx
820015b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015b4:	29 d0                	sub    %edx,%eax
820015b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
820015b9:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
820015bd:	7e 23                	jle    820015e2 <_malloc_trim_r+0x114>
820015bf:	8b 15 2c 20 00 82    	mov    0x8200202c,%edx
820015c5:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015c8:	29 d0                	sub    %edx,%eax
820015ca:	a3 60 20 00 82       	mov    %eax,0x82002060
820015cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015d2:	83 c8 01             	or     $0x1,%eax
820015d5:	89 c2                	mov    %eax,%edx
820015d7:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820015dc:	8b 40 08             	mov    0x8(%eax),%eax
820015df:	89 50 04             	mov    %edx,0x4(%eax)
820015e2:	83 ec 0c             	sub    $0xc,%esp
820015e5:	ff 75 08             	push   0x8(%ebp)
820015e8:	e8 ab f9 ff ff       	call   82000f98 <__malloc_unlock>
820015ed:	83 c4 10             	add    $0x10,%esp
820015f0:	b8 00 00 00 00       	mov    $0x0,%eax
820015f5:	eb 36                	jmp    8200162d <_malloc_trim_r+0x15f>
820015f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015fa:	2b 45 ec             	sub    -0x14(%ebp),%eax
820015fd:	83 c8 01             	or     $0x1,%eax
82001600:	89 c2                	mov    %eax,%edx
82001602:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001607:	8b 40 08             	mov    0x8(%eax),%eax
8200160a:	89 50 04             	mov    %edx,0x4(%eax)
8200160d:	a1 60 20 00 82       	mov    0x82002060,%eax
82001612:	2b 45 ec             	sub    -0x14(%ebp),%eax
82001615:	a3 60 20 00 82       	mov    %eax,0x82002060
8200161a:	83 ec 0c             	sub    $0xc,%esp
8200161d:	ff 75 08             	push   0x8(%ebp)
82001620:	e8 73 f9 ff ff       	call   82000f98 <__malloc_unlock>
82001625:	83 c4 10             	add    $0x10,%esp
82001628:	b8 01 00 00 00       	mov    $0x1,%eax
8200162d:	c9                   	leave  
8200162e:	c3                   	ret    

8200162f <cleanup_glue>:
8200162f:	55                   	push   %ebp
82001630:	89 e5                	mov    %esp,%ebp
82001632:	83 ec 08             	sub    $0x8,%esp
82001635:	8b 45 0c             	mov    0xc(%ebp),%eax
82001638:	8b 00                	mov    (%eax),%eax
8200163a:	85 c0                	test   %eax,%eax
8200163c:	74 14                	je     82001652 <cleanup_glue+0x23>
8200163e:	8b 45 0c             	mov    0xc(%ebp),%eax
82001641:	8b 00                	mov    (%eax),%eax
82001643:	83 ec 08             	sub    $0x8,%esp
82001646:	50                   	push   %eax
82001647:	ff 75 08             	push   0x8(%ebp)
8200164a:	e8 e0 ff ff ff       	call   8200162f <cleanup_glue>
8200164f:	83 c4 10             	add    $0x10,%esp
82001652:	83 ec 08             	sub    $0x8,%esp
82001655:	ff 75 0c             	push   0xc(%ebp)
82001658:	ff 75 08             	push   0x8(%ebp)
8200165b:	e8 93 fa ff ff       	call   820010f3 <_free_r>
82001660:	83 c4 10             	add    $0x10,%esp
82001663:	90                   	nop
82001664:	c9                   	leave  
82001665:	c3                   	ret    

82001666 <_reclaim_reent>:
82001666:	55                   	push   %ebp
82001667:	89 e5                	mov    %esp,%ebp
82001669:	83 ec 28             	sub    $0x28,%esp
8200166c:	a1 04 1c 00 82       	mov    0x82001c04,%eax
82001671:	39 45 08             	cmp    %eax,0x8(%ebp)
82001674:	0f 84 49 01 00 00    	je     820017c3 <_reclaim_reent+0x15d>
8200167a:	8b 45 08             	mov    0x8(%ebp),%eax
8200167d:	8b 40 4c             	mov    0x4c(%eax),%eax
82001680:	85 c0                	test   %eax,%eax
82001682:	74 64                	je     820016e8 <_reclaim_reent+0x82>
82001684:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8200168b:	eb 3e                	jmp    820016cb <_reclaim_reent+0x65>
8200168d:	8b 45 08             	mov    0x8(%ebp),%eax
82001690:	8b 50 4c             	mov    0x4c(%eax),%edx
82001693:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001696:	c1 e0 02             	shl    $0x2,%eax
82001699:	01 d0                	add    %edx,%eax
8200169b:	8b 00                	mov    (%eax),%eax
8200169d:	89 45 f0             	mov    %eax,-0x10(%ebp)
820016a0:	eb 1f                	jmp    820016c1 <_reclaim_reent+0x5b>
820016a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820016a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
820016a8:	8b 45 f0             	mov    -0x10(%ebp),%eax
820016ab:	8b 00                	mov    (%eax),%eax
820016ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
820016b0:	83 ec 08             	sub    $0x8,%esp
820016b3:	ff 75 e8             	push   -0x18(%ebp)
820016b6:	ff 75 08             	push   0x8(%ebp)
820016b9:	e8 35 fa ff ff       	call   820010f3 <_free_r>
820016be:	83 c4 10             	add    $0x10,%esp
820016c1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
820016c5:	75 db                	jne    820016a2 <_reclaim_reent+0x3c>
820016c7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
820016cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
820016ce:	83 f8 1f             	cmp    $0x1f,%eax
820016d1:	76 ba                	jbe    8200168d <_reclaim_reent+0x27>
820016d3:	8b 45 08             	mov    0x8(%ebp),%eax
820016d6:	8b 40 4c             	mov    0x4c(%eax),%eax
820016d9:	83 ec 08             	sub    $0x8,%esp
820016dc:	50                   	push   %eax
820016dd:	ff 75 08             	push   0x8(%ebp)
820016e0:	e8 0e fa ff ff       	call   820010f3 <_free_r>
820016e5:	83 c4 10             	add    $0x10,%esp
820016e8:	8b 45 08             	mov    0x8(%ebp),%eax
820016eb:	8b 40 40             	mov    0x40(%eax),%eax
820016ee:	85 c0                	test   %eax,%eax
820016f0:	74 15                	je     82001707 <_reclaim_reent+0xa1>
820016f2:	8b 45 08             	mov    0x8(%ebp),%eax
820016f5:	8b 40 40             	mov    0x40(%eax),%eax
820016f8:	83 ec 08             	sub    $0x8,%esp
820016fb:	50                   	push   %eax
820016fc:	ff 75 08             	push   0x8(%ebp)
820016ff:	e8 ef f9 ff ff       	call   820010f3 <_free_r>
82001704:	83 c4 10             	add    $0x10,%esp
82001707:	8b 45 08             	mov    0x8(%ebp),%eax
8200170a:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001710:	85 c0                	test   %eax,%eax
82001712:	74 50                	je     82001764 <_reclaim_reent+0xfe>
82001714:	8b 45 08             	mov    0x8(%ebp),%eax
82001717:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
8200171d:	8b 55 08             	mov    0x8(%ebp),%edx
82001720:	81 c2 4c 01 00 00    	add    $0x14c,%edx
82001726:	39 d0                	cmp    %edx,%eax
82001728:	74 3a                	je     82001764 <_reclaim_reent+0xfe>
8200172a:	8b 45 08             	mov    0x8(%ebp),%eax
8200172d:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001733:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001736:	eb 1f                	jmp    82001757 <_reclaim_reent+0xf1>
82001738:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200173b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8200173e:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001741:	8b 00                	mov    (%eax),%eax
82001743:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001746:	83 ec 08             	sub    $0x8,%esp
82001749:	ff 75 e4             	push   -0x1c(%ebp)
8200174c:	ff 75 08             	push   0x8(%ebp)
8200174f:	e8 9f f9 ff ff       	call   820010f3 <_free_r>
82001754:	83 c4 10             	add    $0x10,%esp
82001757:	8b 45 08             	mov    0x8(%ebp),%eax
8200175a:	05 4c 01 00 00       	add    $0x14c,%eax
8200175f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
82001762:	75 d4                	jne    82001738 <_reclaim_reent+0xd2>
82001764:	8b 45 08             	mov    0x8(%ebp),%eax
82001767:	8b 40 54             	mov    0x54(%eax),%eax
8200176a:	85 c0                	test   %eax,%eax
8200176c:	74 15                	je     82001783 <_reclaim_reent+0x11d>
8200176e:	8b 45 08             	mov    0x8(%ebp),%eax
82001771:	8b 40 54             	mov    0x54(%eax),%eax
82001774:	83 ec 08             	sub    $0x8,%esp
82001777:	50                   	push   %eax
82001778:	ff 75 08             	push   0x8(%ebp)
8200177b:	e8 73 f9 ff ff       	call   820010f3 <_free_r>
82001780:	83 c4 10             	add    $0x10,%esp
82001783:	8b 45 08             	mov    0x8(%ebp),%eax
82001786:	8b 40 38             	mov    0x38(%eax),%eax
82001789:	85 c0                	test   %eax,%eax
8200178b:	74 36                	je     820017c3 <_reclaim_reent+0x15d>
8200178d:	8b 45 08             	mov    0x8(%ebp),%eax
82001790:	8b 40 3c             	mov    0x3c(%eax),%eax
82001793:	83 ec 0c             	sub    $0xc,%esp
82001796:	ff 75 08             	push   0x8(%ebp)
82001799:	ff d0                	call   *%eax
8200179b:	83 c4 10             	add    $0x10,%esp
8200179e:	8b 45 08             	mov    0x8(%ebp),%eax
820017a1:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
820017a7:	85 c0                	test   %eax,%eax
820017a9:	74 18                	je     820017c3 <_reclaim_reent+0x15d>
820017ab:	8b 45 08             	mov    0x8(%ebp),%eax
820017ae:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
820017b4:	83 ec 08             	sub    $0x8,%esp
820017b7:	50                   	push   %eax
820017b8:	ff 75 08             	push   0x8(%ebp)
820017bb:	e8 6f fe ff ff       	call   8200162f <cleanup_glue>
820017c0:	83 c4 10             	add    $0x10,%esp
820017c3:	90                   	nop
820017c4:	c9                   	leave  
820017c5:	c3                   	ret    
