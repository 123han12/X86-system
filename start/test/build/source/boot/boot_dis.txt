
/home/hsa/x86-code/start/test/build/source/boot/boot.elf:     file format elf32-i386
/home/hsa/x86-code/start/test/build/source/boot/boot.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000b4 memsz 0x000000b4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000046 memsz 0x00000046 flags r-x
    LOAD off    0x00000dfe vaddr 0x00007dfe paddr 0x00007dfe align 2**12
         filesz 0x00000002 memsz 0x00000002 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000046  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 boot_end      00000002  00007dfe  00007dfe  00000dfe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002b  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000040  00000000  00000000  00000e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   0000005d  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000041  00000000  00000000  00000ecd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line   000000ac  00000000  00000000  00000f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_frame  00000034  00000000  00000000  00000fbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000109  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line_str 00000093  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00007c19 l       .text	00000000 read_loader
00007dfe l       boot_end	00000000 boot_sig
00000000 l    df *ABS*	00000000 boot.c
00007c2f g     F .text	00000017 boot_entry
00007c00 g       .text	00000000 _start
00008000 g       .text	00000000 __bss_start
00008000 g       .text	00000000 _edata
00008000 g       .text	00000000 _end



Disassembly of section .text:

00007c00 <_start>:
 	.text
	.global _start
	.extern boot_entry
_start:
	// 重置数据段寄存器
	mov $0, %ax
    7c00:	b8 00 00             	mov    $0x0,%ax
	mov %ax, %ds
    7c03:	8e d8                	mov    %ax,%ds
	mov %ax, %ss
    7c05:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    7c07:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    7c09:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    7c0b:	8e e8                	mov    %ax,%gs

	// 根据https://wiki.osdev.org/Memory_Map_(x86)
	// 使用0x7c00之前的空间作栈，大约有30KB的RAM，足够boot和loader使用
	mov $_start, %esp
    7c0d:	66 bc 00 7c 00 00    	mov    $0x7c00,%esp

	// 显示boot加载完成提示
	mov $0xe, %ah
    7c13:	b4 0e                	mov    $0xe,%ah
	mov $'L', %al
    7c15:	b0 4c                	mov    $0x4c,%al
	int $0x10
    7c17:	cd 10                	int    $0x10

00007c19 <read_loader>:

	// 加载loader，只支持磁盘1
	// https://wiki.osdev.org/Disk_access_using_the_BIOS_(INT_13h)
read_loader:
	mov $0x8000, %bx	// 读取到的内存地址
    7c19:	bb 00 80             	mov    $0x8000,%bx
	mov $0x2, %cx		// ch:磁道号，cl起始扇区号
    7c1c:	b9 02 00             	mov    $0x2,%cx
	mov $0x2, %ah		// ah: 0x2读磁盘命令
    7c1f:	b4 02                	mov    $0x2,%ah
	mov $64, %al		// al: 读取的扇区数量, 必须小于128，暂设置成32KB
    7c21:	b0 40                	mov    $0x40,%al
	mov $0x0080, %dx	// dh: 磁头号，dl驱动器号0x80(磁盘1)
    7c23:	ba 80 00             	mov    $0x80,%dx
	int $0x13
    7c26:	cd 13                	int    $0x13
	jc read_loader
    7c28:	72 ef                	jb     7c19 <read_loader>

	// 跳转至c部分执行，再由c部分做一些处理
	jmp boot_entry
    7c2a:	e9 02 00             	jmp    7c2f <boot_entry>

	// 原地跳转
	jmp .
    7c2d:	eb fe                	jmp    7c2d <read_loader+0x14>

00007c2f <boot_entry>:

/**
 * Boot的C入口函数
 * 只完成一项功能，即从磁盘找到loader文件然后加载到内容中，并跳转过去
 */
void boot_entry(void) {
    7c2f:	66 55                	push   %ebp
    7c31:	66 89 e5             	mov    %esp,%ebp
    7c34:	66 83 ec 08          	sub    $0x8,%esp
	((void (*)(void))LOADER_START_ADDR)();
    7c38:	66 b8 00 80 00 00    	mov    $0x8000,%eax
    7c3e:	66 ff d0             	call   *%eax
} 
    7c41:	90                   	nop
    7c42:	66 c9                	leavel 
    7c44:	66 c3                	retl   

Disassembly of section boot_end:

00007dfe <boot_sig>:
    7dfe:	55                   	push   %bp
    7dff:	aa                   	stos   %al,%es:(%di)
