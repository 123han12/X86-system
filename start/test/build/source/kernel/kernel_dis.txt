
/home/hsa/x86-code/start/test/build/source/kernel/kernel.elf:     file format elf32-i386
/home/hsa/x86-code/start/test/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00009ebc memsz 0x00009ebc flags r-x
    LOAD off    0x0000b000 vaddr 0x0001a000 paddr 0x0001a000 align 2**12
         filesz 0x00000178 memsz 0x000460c0 flags rw-
    LOAD off    0x0000c000 vaddr 0x80000000 paddr 0x000600c0 align 2**12
         filesz 0x00000387 memsz 0x00000387 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008adb  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000013dc  00018ae0  00018ae0  00009ae0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001a000  0001a000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000450c0  0001b000  0001b000  0000b178  2**12
                  ALLOC
  4 .first_task   00000387  80000000  000600c0  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   00004a58  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_line_str 00000b27  00000000  00000000  00010ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000103ad  00000000  00000000  00011906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00003667  00000000  00000000  00021cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000340  00000000  00000000  00025320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000272e  00000000  00000000  00025660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_rnglists 00000093  00000000  00000000  00027d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000002b  00000000  00000000  00027e21  2**0
                  CONTENTS, READONLY
 13 .debug_frame  00002ba4  00000000  00000000  00027e4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010323 l     F .text	00000017 up2
0001033a l     F .text	0000000d down2
00010347 l     F .text	0000000c write_cr3
00010353 l     F .text	00000014 pde_index
00010367 l     F .text	00000027 pde_paddr
0001038e l     F .text	00000010 pte_index
0001039e l     F .text	00000027 pte_paddr
000103c5 l     F .text	0000000f get_pte_perm
000103d4 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00000028 paddr_alloc
0001c000 l     O .bss	00001000 kernel_page_dir
000103e5 l     F .text	00000013 current_page_dir
000103f8 l     F .text	00000058 addr_alloc_init
00010450 l     F .text	00000067 addr_alloc_page
000104b7 l     F .text	00000062 addr_free_page
00010519 l     F .text	00000066 show_mem_info
0001057f l     F .text	0000003c total_mem_size
00018c44 l     O .rodata	00000012 __func__.5
0001a000 l     O .data	00000050 kernel_map.4
00018c58 l     O .rodata	00000013 __func__.3
00018c6c l     O .rodata	00000011 __func__.2
00018c80 l     O .rodata	0000000c __func__.1
00018c8c l     O .rodata	00000009 __func__.0
00000000 l    df *ABS*	00000000 syscall.c
00018ca0 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010fc3 l     F .text	0000000c write_cr3
00010fcf l     F .text	00000007 hlt
00010fd6 l     F .text	0000000c write_tr
00010fe2 l     F .text	0000001b list_node_init
00010ffd l     F .text	0000000b list_node_next
00011008 l     F .text	0000000b list_count
00011013 l     F .text	0000000a list_first
0001101d l     F .text	00000011 mmu_set_page_dir
0001d000 l     O .bss	000005c0 task_manager
0001d5c0 l     O .bss	00001000 idle_task_stack
0001e5c0 l     O .bss	00016400 task_table
000349c0 l     O .bss	00000014 task_table_mutex
0001102e l     F .text	000001cd tss_init
00018fec l     O .rodata	0000000a __func__.3
00018ff8 l     O .rodata	00000010 __func__.2
0001151a l     F .text	0000000a idle_task_entry
00011664 l     F .text	00000045 task_next_run
00011942 l     F .text	00000069 alloc_task
000119ab l     F .text	00000030 free_task
00011a3f l     F .text	00000063 copy_opened_files
00011c3c l     F .text	00000126 load_phdr
00019008 l     O .rodata	0000000a __func__.1
00011d62 l     F .text	00000213 load_elf_file
00011f75 l     F .text	00000130 copy_args
00019014 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 cpu.c
000124de l     F .text	00000028 lgdt
00012506 l     F .text	0000001a far_jump
000349e0 l     O .bss	00000800 gdt_table
000351e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00012758 l     F .text	0000001d inb
00012775 l     F .text	00000021 outb
00012796 l     F .text	00000007 cli
0001279d l     F .text	00000007 sti
000127a4 l     F .text	00000011 read_cr2
000127b5 l     F .text	00000028 lidt
000127dd l     F .text	00000007 hlt
000127e4 l     F .text	00000010 read_eflags
000127f4 l     F .text	0000000b write_eflags
00035200 l     O .bss	00000400 idt_table
000127ff l     F .text	000000ff dump_core_regs
000128fe l     F .text	00000071 do_default_handler
00012d36 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
0001312d l     F .text	0000001d inb
0001314a l     F .text	00000021 outb
00035600 l     O .bss	00000340 console_buf
0001316b l     F .text	00000074 read_cursor_pos
000131df l     F .text	000000bf update_cursor_pos
0001341d l     F .text	00000092 erase_rows
000134af l     F .text	00000088 scroll_up
00013537 l     F .text	00000010 move_to_col0
00013547 l     F .text	00000038 move_next_line
0001357f l     F .text	00000077 move_forward
000135f6 l     F .text	00000094 show_char
0001368a l     F .text	00000078 move_backword
00013702 l     F .text	00000086 clear_display
00013788 l     F .text	00000073 move_next_tab
0001391e l     F .text	0000003a erase_backword
00013958 l     F .text	000000b3 write_normal
00013a0b l     F .text	00000029 clear_esc_param
00013a34 l     F .text	0000007c write_esc
00013ab0 l     F .text	0000009a set_font_style
00019600 l     O .rodata	00000020 color_table.0
00013b4a l     F .text	00000035 move_left
00013b7f l     F .text	00000049 move_right
00013bc8 l     F .text	00000033 move_cursor
00013bfb l     F .text	00000051 erase_in_display
00013c4c l     F .text	000000f8 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001a050 l     O .data	00000008 dev_desc_tbl
00035940 l     O .bss	00000a00 dev_tbl
00013e45 l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 disk.c
00014134 l     F .text	0000001d inb
00014151 l     F .text	0000001f inw
00014170 l     F .text	00000021 outb
00014191 l     F .text	00000021 outw
00036340 l     O .bss	00000250 disk_buf
00036590 l     O .bss	00000014 mutex
000365a4 l     O .bss	00000010 op_sem
000365b4 l     O .bss	00000004 task_on_op
000141b2 l     F .text	00000130 ata_send_cmd
000142e2 l     F .text	00000051 ata_read_data
00014333 l     F .text	00000051 ata_write_data
00014384 l     F .text	0000004b ata_wait_data
000143cf l     F .text	000000ff print_disk_info
000144ce l     F .text	00000119 detect_part_info
000145e7 l     F .text	00000127 identify_disk
00000000 l    df *ABS*	00000000 kbd.c
00014bc4 l     F .text	0000001d inb
00014be1 l     F .text	00000021 outb
000365b8 l     O .bss	00000004 kbd_state
000197e0 l     O .rodata	00000200 map_table
00014c02 l     F .text	00000015 get_key
00014c17 l     F .text	0000001a is_make_code
00014cdb l     F .text	00000045 update_led_status
00014d20 l     F .text	0000003c do_fx_key
00014d5c l     F .text	000001d0 do_normal_key
00014f2c l     F .text	00000089 do_e0_key
000365bc l     O .bss	00000004 recv_state.1
000365c0 l     O .bss	00000004 inited.0
00000000 l    df *ABS*	00000000 time.c
000150bb l     F .text	00000021 outb
000365c4 l     O .bss	00000004 sys_tick
00015104 l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 tty.c
000365e0 l     O .bss	000022a0 tty_devs
00038880 l     O .bss	00000004 curr_tty
000152bc l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 devfs.c
0001a0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
0001593e l     F .text	00000017 up2
00015955 l     F .text	00000059 bread_sector
000159ae l     F .text	0000003e bwrite_secotr
00015d8a l     F .text	00000087 to_sfn
00015fad l     F .text	00000080 read_dir_entry
0001602d l     F .text	000000aa write_dir_entry
000160d7 l     F .text	0000016f expand_file
00016246 l     F .text	000000c2 move_file_pos
00016584 l     F .text	00000063 read_from_diritem
00000000 l    df *ABS*	00000000 file.c
000388a0 l     O .bss	00024000 file_table
0005c8a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00016fdf l     F .text	0000000b list_node_next
00016fea l     F .text	0000000a list_first
0005c8c0 l     O .bss	0000000c mounted_list
0005c8cc l     O .bss	0000000c free_list
0005c8e0 l     O .bss	000017c0 fs_tbl
0005e0a0 l     O .bss	00000004 root_fs
00016ff4 l     F .text	0000001d is_fd_bad
00017011 l     F .text	00000026 get_fs_op
00017037 l     F .text	000001c7 mount
000171fe l     F .text	00000060 mount_list_init
00019d78 l     O .rodata	00000008 __func__.1
000173f1 l     F .text	0000002b fs_protect
0001741c l     F .text	0000002b fs_unprotect
00019d80 l     O .rodata	0000000a __func__.0
00000000 l    df *ABS*	00000000 init.c
0005e0a4 l     O .bss	00000004 init_boot_info
00019e30 l     O .rodata	00000013 __func__.0
00000000 l    df *ABS*	00000000 mutex.c
00017d29 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00017eb8 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
0001822c l     F .text	00000007 hlt
0001a174 l     O .data	00000004 num2ch.0
00000000 l    df *ABS*	00000000 list.c
000187e8 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0005e0a8 l     O .bss	00000014 mutex
0005e0bc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
00015f69 g     F .text	00000044 diritem_get_type
0001812e g     F .text	00000030 bitmap_get_bit
00018416 g     F .text	0000004f kernel_memcpy
00017909 g     F .text	000000fc sys_close
00011707 g     F .text	0000000a task_current
00017349 g     F .text	00000050 path_begin_with
800001d1 g     F .first_task	0000001b yield
000130f9 g     F .text	0000000b irq_enable_global
0001887f g     F .text	00000064 list_insert_last
00011711 g     F .text	00000030 task_file
000102a5 g       .text	00000000 exception_handler_kbd
00010e08 g     F .text	0000010c sys_sbrk
000117b9 g     F .text	00000061 sys_yield
000119db g     F .text	00000064 sys_msleep
00012aa3 g     F .text	0000001c do_handler_segment_not_present
00011605 g     F .text	00000034 task_set_ready
00015c5d g     F .text	0000012d cluster_alloc_free
0001815e g     F .text	0000001b bitmap_is_set
00018465 g     F .text	00000041 kernel_memset
00014019 g     F .text	0000004c dev_write
00017874 g     F .text	00000095 sys_lseek
0001507b g     F .text	00000040 kbd_init
00015ad3 g     F .text	0000012f cluster_set_next
00010267 g       .text	00000000 exception_handler_virtual_exception
00014b86 g     F .text	00000006 disk_close
00010f2e g     F .text	00000095 do_handler_syscall
00018233 g     F .text	0000002d strings_count
0001273a g     F .text	0000001e cpu_init
000189e0 g     F .text	0000002f log_init
00016cc0 g     F .text	000000f4 fatfs_readdir
00011aa2 g     F .text	0000019a sys_fork
00017ccc g     F .text	0000005d init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00014b7c g     F .text	0000000a disk_control
000125ed g     F .text	00000039 gdt_free_sel
00010f14 g     F .text	0000001a sys_print_msg
0001a140 g     O .data	00000034 fatfs_op
000182a6 g     F .text	00000047 kernel_strcpy
0001a000 g       .data	00000000 s_data
800001a4 g     F .first_task	0000002d execve
80000147 g     F .first_task	0000001b getpid
00012fdc g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00015ed6 g     F .text	00000093 diritem_get_name
00015e11 g     F .text	00000037 diritem_name_match
000100a4 g       .text	00000000 exception_handler_breakpoint
000129fb g     F .text	0000001c do_handler_overflow
00012cc6 g     F .text	0000001c do_handler_alignment_check
0001066b g     F .text	0000008c memory_create_map
000176eb g     F .text	000000c5 sys_read
00017399 g     F .text	00000058 path_next_child
00014c92 g     F .text	00000035 kbd_wait_recv_ready
0001691c g     F .text	0000021e fatfs_write
0001336e g     F .text	000000af console_select
000101b3 g       .text	00000000 exception_handler_general_protection
00012adb g     F .text	000000d8 do_handler_general_protection
00013819 g     F .text	0000001e restore_cursor
00017fd8 g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
0001298b g     F .text	0000001c do_handler_divider
0001806a g     F .text	000000c4 bitmap_set_bit
00012a6b g     F .text	0000001c do_handler_double_fault
00016db4 g     F .text	0000000a fatfs_closedir
00012bb3 g     F .text	000000f7 do_handler_page_fault
00016308 g     F .text	00000240 fatfs_mount
80000324 g     F .first_task	00000021 isatty
00016775 g     F .text	000001a7 fatfs_read
0001013f g       .text	00000000 exception_handler_double_fault
00012dc9 g     F .text	0000002b pic_send_eoi
00011510 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107b3 g     F .text	00000085 memory_create_uvm
00017ee6 g     F .text	0000006e sem_wait
00010c4c g     F .text	00000025 memory_alloc_page_for
000150dc g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00017a50 g     F .text	00000093 sys_fstat
00013fcd g     F .text	0000004c dev_read
00016bc4 g     F .text	000000df fatfs_seek
00016b3a g     F .text	0000008a fatfs_close
00012d1a g     F .text	0000001c do_handler_virtual_exception
00015914 g     F .text	0000000a devfs_stat
000100c3 g       .text	00000000 exception_handler_overflow
000102e3 g       .text	00000000 simple_switch
000102c4 g       .text	00000000 exception_handler_ide_primary
00016548 g     F .text	0000003c fatfs_unmount
800002d0 g     F .first_task	0000002d lseek
0005e0c0 g     O .bss	00002000 stack
0001470e g     F .text	000000f9 disk_init
0001725e g     F .text	00000090 fs_init
00016f77 g     F .text	00000038 file_inc_ref
00010c8b g     F .text	00000099 memory_free_page
000600c0 g       *ABS*	00000000 s_first_task
00011794 g     F .text	00000025 task_remove_fd
00015612 g     F .text	000000b9 tty_control
00013837 g     F .text	000000e7 console_init
000154f1 g     F .text	00000121 tty_read
00011374 g     F .text	0000008f task_uninit
00010b63 g     F .text	000000e9 memory_alloc_for_page_dir
0001591e g     F .text	00000020 devfs_ioctl
000151b3 g     F .text	0000007f tty_fifo_get
000100e2 g       .text	00000000 exception_handler_bound_range
000156d1 g     F .text	0000006d tty_in
00015a15 g     F .text	000000be cluster_get_next
00017f54 g     F .text	00000084 sem_notify
00010ae0 g     F .text	00000083 memory_copy_uvm_data
00014065 g     F .text	0000004c dev_control
00014fb5 g     F .text	000000c6 do_handler_kbd
00012a33 g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00017b36 g     F .text	00000053 sys_readdir
00012caa g     F .text	0000001c do_handler_fpu_error
00011425 g     F .text	000000eb task_first_init
00012ce2 g     F .text	0000001c do_handler_machine_check
80000282 g     F .first_task	0000002d write
00017447 g     F .text	00000182 sys_open
000129a7 g     F .text	0000001c do_handler_Debug
800002fd g     F .first_task	00000027 fstat
00017a05 g     F .text	0000004b sys_isatty
00018820 g     F .text	0000005f list_insert_first
00013e83 g     F .text	0000014a dev_open
000172ee g     F .text	0000005b path_to_num
000116e5 g     F .text	00000022 task_set_wakeup
000129c3 g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
0001517c g     F .text	00000037 tty_fifo_init
0001a060 g     O .data	00000038 dev_disk_desc
000182ed g     F .text	00000070 kernel_strncpy
000130ee g     F .text	0000000b irq_disable_global
000177b0 g     F .text	000000c4 sys_write
800001ec g     F .first_task	00000021 wait
00060447 g       *ABS*	00000000 mem_free_start
00014c66 g     F .text	0000002c kbd_write
00017c29 g     F .text	0000003d kernel_init
00017ec3 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00018666 g     F .text	0000014c kernel_vsprintf
00018260 g     F .text	00000046 get_file_name
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000140b1 g     F .text	00000083 dev_close
000137fb g     F .text	0000001e save_cursor
000600c0 g       .bss	00000000 e_data
80000255 g     F .first_task	0000002d read
00017d62 g     F .text	00000097 mutex_lock
00017b89 g     F .text	00000050 sys_closedir
00016dbe g     F .text	000000ec fatfs_unlink
00011741 g     F .text	00000053 task_alloc_fd
0001590a g     F .text	0000000a devfs_seek
00010229 g       .text	00000000 exception_handler_machine_check
00015404 g     F .text	000000ed tty_write
00012a87 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00015232 g     F .text	0000008a tty_fifo_put
00060447 g       *ABS*	00000000 e_first_task
000116a9 g     F .text	0000003c task_set_sleep
000175c9 g     F .text	0000009e sys_dup
000187b2 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00012fa2 g     F .text	0000003a irq_install
0001269f g     F .text	00000088 init_gdt
00015767 g     F .text	00000017 devfs_mount
0001530b g     F .text	000000f9 tty_open
80000189 g     F .first_task	0000001b fork
00013104 g     F .text	00000018 irq_enter_protection
00017d34 g     F .text	0000002e mutex_init
00013067 g     F .text	00000087 irq_disable
80000345 g     F .first_task	00000021 sbrk
0001a100 g     O .data	00000034 devfs_op
00015784 g     F .text	00000123 devfs_open
00010248 g       .text	00000000 exception_handler_smd_exception
00017667 g     F .text	00000084 sys_ioctl
00010838 g     F .text	0000010f memory_destroy_uvm
00018001 g     F .text	00000016 bitmap_byte_count
00012a4f g     F .text	0000001c do_handler_device_unavailable
00017bd9 g     F .text	00000050 sys_unlink
000159ec g     F .text	00000029 cluster_is_valid
00016cad g     F .text	00000013 fatfs_opendir
0001181a g     F .text	0000003c task_dispatch
00010947 g     F .text	00000153 memory_copy_uvm
000156cb g     F .text	00000006 tty_close
000158cb g     F .text	00000024 devfs_write
00017c66 g     F .text	00000066 move_to_first_task
00012727 g     F .text	00000013 switch_to_tss
000158ef g     F .text	0000001b devfs_close
00013d44 g     F .text	000000fb console_write
00014c31 g     F .text	00000035 kbd_wait_send_ready
80000366 g     F .first_task	00000021 dup
000184a6 g     F .text	0000005e kernel_memcmp
000106f7 g     F .text	000000bc create_kernel_table
000187fb g     F .text	00000025 list_init
00012cfe g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
00011639 g     F .text	0000002b task_set_block
0001296f g     F .text	0000001c do_handler_unknown
00010c71 g     F .text	0000001a memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
00011403 g     F .text	00000022 task_switch_from_to
00012df4 g     F .text	000001ae irq_init
00017df9 g     F .text	000000bf mutex_unlock
00016faf g     F .text	00000030 file_table_init
0001311c g     F .text	00000011 irq_leave_protection
00016f35 g     F .text	00000042 file_free
00014cc7 g     F .text	00000014 kbd_read
00015e48 g     F .text	0000008e diritem_init
80000162 g     F .first_task	00000027 print_msg
0001835d g     F .text	0000003b kernel_strlen
00012520 g     F .text	00000086 segment_desc_set
00012a17 g     F .text	0000001c do_handler_bound_range
000102f8 g       .text	00000000 exception_handler_syscall
00014807 g     F .text	000000f5 disk_open
000165e7 g     F .text	0000018e fatfs_open
000188e3 g     F .text	00000078 list_remove_first
00019ebc g       .rodata	00000000 e_text
00018398 g     F .text	0000007e kernel_strncmp
00017ae3 g     F .text	00000053 sys_opendir
00018017 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
0001329e g     F .text	000000d0 console_set_cursor
00010085 g       .text	00000000 exception_handler_NMI
00016ca3 g     F .text	0000000a fatfs_stat
00018179 g     F .text	000000b3 bitmap_alloc_nbits
00016eaa g     F .text	0000008b file_alloc
00011524 g     F .text	000000e1 task_manager_init
00011347 g     F .text	0000002d task_start
00010066 g       .text	00000000 exception_handler_Debug
00011856 g     F .text	000000ec task_time_tick
00010d24 g     F .text	000000e4 memory_init
000120a5 g     F .text	000001bb sys_execve
00014a3c g     F .text	00000140 disk_write
00012276 g     F .text	00000115 sys_wait
0001238b g     F .text	00000153 sys_exit
0001573e g     F .text	00000029 tty_select
00013e3f g     F .text	00000006 console_close
00010a9a g     F .text	00000046 memory_get_paddr
00012abf g     F .text	0000001c do_handler_stack_segment_fault
000129df g     F .text	0000001c do_handler_breakpoint
0001577e g     F .text	00000006 devfs_unmount
8000020d g     F .first_task	00000021 _exit
000158a7 g     F .text	00000024 devfs_read
00018a0f g     F .text	000000cc log_printf
000111fb g     F .text	0000014c task_init
000148fc g     F .text	00000140 disk_read
8000022e g     F .first_task	00000027 open
00015c02 g     F .text	0000005b cluster_free_chain
00018642 g     F .text	00000024 kernel_sprintf
00012260 g     F .text	00000016 sys_getpid
00012626 g     F .text	00000079 gdt_alloc_desc
00018504 g     F .text	0000013e kernel_itoa
0001895b g     F .text	00000085 list_remove
000125a6 g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002e msleep
800002af g     F .first_task	00000021 close
00014b8c g     F .text	00000038 do_handler_ide_primary
000105bb g     F .text	000000b0 find_pte
00015164 g     F .text	00000018 time_init
0001a0a0 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    # 第二种方法
    # mov 4(%esp), %eax
    # push %eax

    # 第三种方法
    push 4(%esp)
   10000:	ff 74 24 04          	push   0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 20 7c 00 00       	call   17c29 <kernel_init>

	// 重新加载GDT
	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		// 16为数据段选择子
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	// 栈设置
	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc c0 00 06 00       	mov    $0x600c0,%esp

	// 栈和段等沿用之前的设置
	jmp init_main
   10023:	e9 a4 7c 00 00       	jmp    17ccc <init_main>

00010028 <exception_handler_unknown>:
		// 跳过压入的异常号和错误码
		add $(2*4), %esp
		iret
.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 36 29 00 00       	call   1296f <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 33 29 00 00       	call   1298b <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 30 29 00 00       	call   129a7 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 2d 29 00 00       	call   129c3 <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 2a 29 00 00       	call   129df <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 27 29 00 00       	call   129fb <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 24 29 00 00       	call   12a17 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 21 29 00 00       	call   12a33 <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 1e 29 00 00       	call   12a4f <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 1d 29 00 00       	call   12a6b <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 1c 29 00 00       	call   12a87 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 1b 29 00 00       	call   12aa3 <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 1a 29 00 00       	call   12abf <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 19 29 00 00       	call   12adb <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 d4 29 00 00       	call   12bb3 <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 ac 2a 00 00       	call   12caa <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 ab 2a 00 00       	call   12cc6 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 a8 2a 00 00       	call   12ce2 <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 a5 2a 00 00       	call   12cfe <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 a2 2a 00 00       	call   12d1a <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

// 硬件中断
exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 45 4e 00 00       	call   150dc <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102a5:	6a 00                	push   $0x0
   102a7:	6a 21                	push   $0x21
   102a9:	60                   	pusha  
   102aa:	1e                   	push   %ds
   102ab:	06                   	push   %es
   102ac:	0f a0                	push   %fs
   102ae:	0f a8                	push   %gs
   102b0:	54                   	push   %esp
   102b1:	e8 ff 4c 00 00       	call   14fb5 <do_handler_kbd>
   102b6:	83 c4 04             	add    $0x4,%esp
   102b9:	0f a9                	pop    %gs
   102bb:	0f a1                	pop    %fs
   102bd:	07                   	pop    %es
   102be:	1f                   	pop    %ds
   102bf:	61                   	popa   
   102c0:	83 c4 08             	add    $0x8,%esp
   102c3:	cf                   	iret   

000102c4 <exception_handler_ide_primary>:
exception_handler ide_primary, 0x2E, 0
   102c4:	6a 00                	push   $0x0
   102c6:	6a 2e                	push   $0x2e
   102c8:	60                   	pusha  
   102c9:	1e                   	push   %ds
   102ca:	06                   	push   %es
   102cb:	0f a0                	push   %fs
   102cd:	0f a8                	push   %gs
   102cf:	54                   	push   %esp
   102d0:	e8 b7 48 00 00       	call   14b8c <do_handler_ide_primary>
   102d5:	83 c4 04             	add    $0x4,%esp
   102d8:	0f a9                	pop    %gs
   102da:	0f a1                	pop    %fs
   102dc:	07                   	pop    %es
   102dd:	1f                   	pop    %ds
   102de:	61                   	popa   
   102df:	83 c4 08             	add    $0x8,%esp
   102e2:	cf                   	iret   

000102e3 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
	.text
	.global simple_switch
simple_switch:
	movl 4(%esp), %eax   // 取from->stack
   102e3:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102e7:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102eb:	55                   	push   %ebp
	push %ebx
   102ec:	53                   	push   %ebx
	push %esi
   102ed:	56                   	push   %esi
	push %edi
   102ee:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102ef:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102f1:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102f3:	5f                   	pop    %edi
	pop %esi
   102f4:	5e                   	pop    %esi
	pop %ebx
   102f5:	5b                   	pop    %ebx
	pop %ebp
   102f6:	5d                   	pop    %ebp
  	ret
   102f7:	c3                   	ret    

000102f8 <exception_handler_syscall>:

     .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
	// 保存前一任务的状态
	pusha
   102f8:	60                   	pusha  
	push %ds
   102f9:	1e                   	push   %ds
	push %es
   102fa:	06                   	push   %es
	push %fs
   102fb:	0f a0                	push   %fs
	push %gs
   102fd:	0f a8                	push   %gs
	pushf
   102ff:	9c                   	pushf  

	// 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   10300:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   10305:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   10307:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   10309:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   1030b:	8e e8                	mov    %eax,%gs

    // 调用处理函数
    mov %esp, %eax
   1030d:	89 e0                	mov    %esp,%eax
    push %eax
   1030f:	50                   	push   %eax
	call do_handler_syscall
   10310:	e8 19 0c 00 00       	call   10f2e <do_handler_syscall>
	add $4, %esp
   10315:	83 c4 04             	add    $0x4,%esp

    // 再切换回来
	popf
   10318:	9d                   	popf   
	pop %gs
   10319:	0f a9                	pop    %gs
	pop %fs
   1031b:	0f a1                	pop    %fs
	pop %es
   1031d:	07                   	pop    %es
	pop %ds
   1031e:	1f                   	pop    %ds
	popa
   1031f:	61                   	popa   
	
	// 5个参数，加上5*4，不加会导致返回时ss取不出来，最后返回出现问题
   10320:	ca 14 00             	lret   $0x14

00010323 <up2>:

#include <stdarg.h>
#include "comm/types.h"

// 向上对齐到页边界
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10323:	55                   	push   %ebp
   10324:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10326:	8b 55 08             	mov    0x8(%ebp),%edx
   10329:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032c:	01 d0                	add    %edx,%eax
   1032e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10331:	8b 45 0c             	mov    0xc(%ebp),%eax
   10334:	f7 d8                	neg    %eax
   10336:	21 d0                	and    %edx,%eax
}
   10338:	5d                   	pop    %ebp
   10339:	c3                   	ret    

0001033a <down2>:

// 向下对齐到界边界
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   1033a:	55                   	push   %ebp
   1033b:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1033d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10340:	f7 d8                	neg    %eax
   10342:	23 45 08             	and    0x8(%ebp),%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	0f 22 d8             	mov    %eax,%cr3
}
   10350:	90                   	nop
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <pde_index>:
#pragma pack()

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index (uint32_t vaddr) {
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
   10356:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	c1 e8 16             	shr    $0x16,%eax
   1035f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10362:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10365:	c9                   	leave  
   10366:	c3                   	ret    

00010367 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr (pde_t * pde) {
   10367:	55                   	push   %ebp
   10368:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10371:	c0 ea 04             	shr    $0x4,%dl
   10374:	0f b6 ca             	movzbl %dl,%ecx
   10377:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   1037b:	c1 e2 04             	shl    $0x4,%edx
   1037e:	09 ca                	or     %ecx,%edx
   10380:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10384:	c1 e0 0c             	shl    $0xc,%eax
   10387:	09 d0                	or     %edx,%eax
   10389:	c1 e0 0c             	shl    $0xc,%eax
}
   1038c:	5d                   	pop    %ebp
   1038d:	c3                   	ret    

0001038e <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index (uint32_t vaddr) {
   1038e:	55                   	push   %ebp
   1038f:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;   // 取中间10位
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	c1 e8 0c             	shr    $0xc,%eax
   10397:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1039c:	5d                   	pop    %ebp
   1039d:	c3                   	ret    

0001039e <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr (pte_t * pte) {
   1039e:	55                   	push   %ebp
   1039f:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   103a8:	c0 ea 04             	shr    $0x4,%dl
   103ab:	0f b6 ca             	movzbl %dl,%ecx
   103ae:	0f b6 50 02          	movzbl 0x2(%eax),%edx
   103b2:	c1 e2 04             	shl    $0x4,%edx
   103b5:	09 ca                	or     %ecx,%edx
   103b7:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103bb:	c1 e0 0c             	shl    $0xc,%eax
   103be:	09 d0                	or     %edx,%eax
   103c0:	c1 e0 0c             	shl    $0xc,%eax
}
   103c3:	5d                   	pop    %ebp
   103c4:	c3                   	ret    

000103c5 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm (pte_t * pte) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);                   // 2023年2月19 同学发现有问题，改了下
   103c8:	8b 45 08             	mov    0x8(%ebp),%eax
   103cb:	8b 00                	mov    (%eax),%eax
   103cd:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103d2:	5d                   	pop    %ebp
   103d3:	c3                   	ret    

000103d4 <mmu_set_page_dir>:

/**
 * @brief 重新加载整个页表
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir (uint32_t paddr) {
   103d4:	55                   	push   %ebp
   103d5:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103d7:	ff 75 08             	push   0x8(%ebp)
   103da:	e8 68 ff ff ff       	call   10347 <write_cr3>
   103df:	83 c4 04             	add    $0x4,%esp
}
   103e2:	90                   	nop
   103e3:	c9                   	leave  
   103e4:	c3                   	ret    

000103e5 <current_page_dir>:
static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); // 内核页目录表

/**
 * @brief 获取当前页表地址
 */
static pde_t * current_page_dir (void) {
   103e5:	55                   	push   %ebp
   103e6:	89 e5                	mov    %esp,%ebp
   103e8:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103eb:	e8 17 13 00 00       	call   11707 <task_current>
   103f0:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
}
   103f6:	c9                   	leave  
   103f7:	c3                   	ret    

000103f8 <addr_alloc_init>:
/**
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
                    uint32_t start, uint32_t size, uint32_t page_size) {
   103f8:	55                   	push   %ebp
   103f9:	89 e5                	mov    %esp,%ebp
   103fb:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	83 ec 0c             	sub    $0xc,%esp
   10404:	50                   	push   %eax
   10405:	e8 2a 79 00 00       	call   17d34 <mutex_init>
   1040a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 10             	mov    0x10(%ebp),%edx
   10413:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 55 14             	mov    0x14(%ebp),%edx
   1041c:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 55 18             	mov    0x18(%ebp),%edx
   10425:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 40 24             	mov    0x24(%eax),%eax
   1042e:	ba 00 00 00 00       	mov    $0x0,%edx
   10433:	f7 75 18             	divl   0x18(%ebp)
   10436:	89 c2                	mov    %eax,%edx
   10438:	8b 45 08             	mov    0x8(%ebp),%eax
   1043b:	83 c0 14             	add    $0x14,%eax
   1043e:	6a 00                	push   $0x0
   10440:	52                   	push   %edx
   10441:	ff 75 0c             	push   0xc(%ebp)
   10444:	50                   	push   %eax
   10445:	e8 cd 7b 00 00       	call   18017 <bitmap_init>
   1044a:	83 c4 10             	add    $0x10,%esp
}
   1044d:	90                   	nop
   1044e:	c9                   	leave  
   1044f:	c3                   	ret    

00010450 <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   10450:	55                   	push   %ebp
   10451:	89 e5                	mov    %esp,%ebp
   10453:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	83 ec 0c             	sub    $0xc,%esp
   10463:	50                   	push   %eax
   10464:	e8 f9 78 00 00       	call   17d62 <mutex_lock>
   10469:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	83 c0 14             	add    $0x14,%eax
   10472:	83 ec 04             	sub    $0x4,%esp
   10475:	ff 75 0c             	push   0xc(%ebp)
   10478:	6a 00                	push   $0x0
   1047a:	50                   	push   %eax
   1047b:	e8 f9 7c 00 00       	call   18179 <bitmap_alloc_nbits>
   10480:	83 c4 10             	add    $0x10,%esp
   10483:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1048a:	78 17                	js     104a3 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 48 20             	mov    0x20(%eax),%ecx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	8b 50 1c             	mov    0x1c(%eax),%edx
   10498:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1049b:	0f af c2             	imul   %edx,%eax
   1049e:	01 c8                	add    %ecx,%eax
   104a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	83 ec 0c             	sub    $0xc,%esp
   104a9:	50                   	push   %eax
   104aa:	e8 4a 79 00 00       	call   17df9 <mutex_unlock>
   104af:	83 c4 10             	add    $0x10,%esp
    return addr;
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104b5:	c9                   	leave  
   104b6:	c3                   	ret    

000104b7 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   104b7:	55                   	push   %ebp
   104b8:	89 e5                	mov    %esp,%ebp
   104ba:	53                   	push   %ebx
   104bb:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 98 78 00 00       	call   17d62 <mutex_lock>
   104ca:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	8b 50 20             	mov    0x20(%eax),%edx
   104d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   104d6:	29 d0                	sub    %edx,%eax
   104d8:	89 c1                	mov    %eax,%ecx
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104e0:	89 c8                	mov    %ecx,%eax
   104e2:	ba 00 00 00 00       	mov    $0x0,%edx
   104e7:	f7 f3                	div    %ebx
   104e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ef:	8b 55 08             	mov    0x8(%ebp),%edx
   104f2:	83 c2 14             	add    $0x14,%edx
   104f5:	6a 00                	push   $0x0
   104f7:	ff 75 10             	push   0x10(%ebp)
   104fa:	50                   	push   %eax
   104fb:	52                   	push   %edx
   104fc:	e8 69 7b 00 00       	call   1806a <bitmap_set_bit>
   10501:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	50                   	push   %eax
   1050b:	e8 e9 78 00 00       	call   17df9 <mutex_unlock>
   10510:	83 c4 10             	add    $0x10,%esp
}
   10513:	90                   	nop
   10514:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10517:	c9                   	leave  
   10518:	c3                   	ret    

00010519 <show_mem_info>:

static void show_mem_info (boot_info_t * boot_info) {
   10519:	55                   	push   %ebp
   1051a:	89 e5                	mov    %esp,%ebp
   1051c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1051f:	83 ec 0c             	sub    $0xc,%esp
   10522:	68 e0 8a 01 00       	push   $0x18ae0
   10527:	e8 e3 84 00 00       	call   18a0f <log_printf>
   1052c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10536:	eb 29                	jmp    10561 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i,
   10538:	8b 45 08             	mov    0x8(%ebp),%eax
   1053b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1053e:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10548:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1054b:	52                   	push   %edx
   1054c:	50                   	push   %eax
   1054d:	ff 75 f4             	push   -0xc(%ebp)
   10550:	68 ec 8a 01 00       	push   $0x18aec
   10555:	e8 b5 84 00 00       	call   18a0f <log_printf>
   1055a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	8b 40 50             	mov    0x50(%eax),%eax
   10567:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1056a:	7c cc                	jl     10538 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1056c:	83 ec 0c             	sub    $0xc,%esp
   1056f:	68 fe 8a 01 00       	push   $0x18afe
   10574:	e8 96 84 00 00       	call   18a0f <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp
}
   1057c:	90                   	nop
   1057d:	c9                   	leave  
   1057e:	c3                   	ret    

0001057f <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t * boot_info) {
   1057f:	55                   	push   %ebp
   10580:	89 e5                	mov    %esp,%ebp
   10582:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1058c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10593:	eb 16                	jmp    105ab <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1059b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1059f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105a2:	01 d0                	add    %edx,%eax
   105a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   105a7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	8b 40 50             	mov    0x50(%eax),%eax
   105b1:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105b4:	7c df                	jl     10595 <total_mem_size+0x16>
    }
    return mem_size;
   105b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105b9:	c9                   	leave  
   105ba:	c3                   	ret    

000105bb <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   105bb:	55                   	push   %ebp
   105bc:	89 e5                	mov    %esp,%ebp
   105be:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105c1:	ff 75 0c             	push   0xc(%ebp)
   105c4:	e8 8a fd ff ff       	call   10353 <pde_index>
   105c9:	83 c4 04             	add    $0x4,%esp
   105cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	01 d0                	add    %edx,%eax
   105d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   105db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105de:	0f b6 00             	movzbl (%eax),%eax
   105e1:	83 e0 01             	and    $0x1,%eax
   105e4:	84 c0                	test   %al,%al
   105e6:	74 10                	je     105f8 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   105e8:	ff 75 f0             	push   -0x10(%ebp)
   105eb:	e8 77 fd ff ff       	call   10367 <pde_paddr>
   105f0:	83 c4 04             	add    $0x4,%esp
   105f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105f6:	eb 57                	jmp    1064f <find_pte+0x94>
    } else {
        // 如果不存在，则考虑分配一个
        if (alloc == 0) {
   105f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105fc:	75 07                	jne    10605 <find_pte+0x4a>
            return (pte_t *)0;
   105fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10603:	eb 64                	jmp    10669 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10605:	83 ec 08             	sub    $0x8,%esp
   10608:	6a 01                	push   $0x1
   1060a:	68 00 b0 01 00       	push   $0x1b000
   1060f:	e8 3c fe ff ff       	call   10450 <addr_alloc_page>
   10614:	83 c4 10             	add    $0x10,%esp
   10617:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1061a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1061e:	75 07                	jne    10627 <find_pte+0x6c>
            return (pte_t *)0;
   10620:	b8 00 00 00 00       	mov    $0x0,%eax
   10625:	eb 42                	jmp    10669 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10627:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1062a:	83 c8 07             	or     $0x7,%eax
   1062d:	89 c2                	mov    %eax,%edx
   1062f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10632:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        //kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10637:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1063a:	83 ec 04             	sub    $0x4,%esp
   1063d:	68 00 10 00 00       	push   $0x1000
   10642:	6a 00                	push   $0x0
   10644:	ff 75 f4             	push   -0xc(%ebp)
   10647:	e8 19 7e 00 00       	call   18465 <kernel_memset>
   1064c:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1064f:	83 ec 0c             	sub    $0xc,%esp
   10652:	ff 75 0c             	push   0xc(%ebp)
   10655:	e8 34 fd ff ff       	call   1038e <pte_index>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10667:	01 d0                	add    %edx,%eax
}
   10669:	c9                   	leave  
   1066a:	c3                   	ret    

0001066b <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   1066b:	55                   	push   %ebp
   1066c:	89 e5                	mov    %esp,%ebp
   1066e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10678:	eb 6e                	jmp    106e8 <memory_create_map+0x7d>
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   1067a:	83 ec 04             	sub    $0x4,%esp
   1067d:	6a 01                	push   $0x1
   1067f:	ff 75 0c             	push   0xc(%ebp)
   10682:	ff 75 08             	push   0x8(%ebp)
   10685:	e8 31 ff ff ff       	call   105bb <find_pte>
   1068a:	83 c4 10             	add    $0x10,%esp
   1068d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   10690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10694:	75 07                	jne    1069d <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1069b:	eb 58                	jmp    106f5 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1069d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a0:	0f b6 00             	movzbl (%eax),%eax
   106a3:	83 e0 01             	and    $0x1,%eax
   106a6:	84 c0                	test   %al,%al
   106a8:	74 1c                	je     106c6 <memory_create_map+0x5b>
   106aa:	68 00 8b 01 00       	push   $0x18b00
   106af:	68 44 8c 01 00       	push   $0x18c44
   106b4:	68 8a 00 00 00       	push   $0x8a
   106b9:	68 14 8b 01 00       	push   $0x18b14
   106be:	e8 ef 80 00 00       	call   187b2 <panic>
   106c3:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106c6:	8b 45 10             	mov    0x10(%ebp),%eax
   106c9:	0b 45 18             	or     0x18(%ebp),%eax
   106cc:	83 c8 01             	or     $0x1,%eax
   106cf:	89 c2                	mov    %eax,%edx
   106d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d4:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106d6:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106dd:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106e4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106e8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106eb:	3b 45 14             	cmp    0x14(%ebp),%eax
   106ee:	7c 8a                	jl     1067a <memory_create_map+0xf>
    }

    return 0;
   106f0:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106f5:	c9                   	leave  
   106f6:	c3                   	ret    

000106f7 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table (void) {
   106f7:	55                   	push   %ebp
   106f8:	89 e5                	mov    %esp,%ebp
   106fa:	83 ec 28             	sub    $0x28,%esp
        // 扩展存储空间一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106fd:	83 ec 04             	sub    $0x4,%esp
   10700:	68 00 10 00 00       	push   $0x1000
   10705:	6a 00                	push   $0x0
   10707:	68 00 c0 01 00       	push   $0x1c000
   1070c:	e8 54 7d 00 00       	call   18465 <kernel_memset>
   10711:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10714:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1071b:	e9 83 00 00 00       	jmp    107a3 <create_kernel_table+0xac>
        memory_map_t * map = kernel_map + i;
   10720:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10723:	c1 e0 04             	shl    $0x4,%eax
   10726:	05 00 a0 01 00       	add    $0x1a000,%eax
   1072b:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1072e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10731:	8b 00                	mov    (%eax),%eax
   10733:	83 ec 08             	sub    $0x8,%esp
   10736:	68 00 10 00 00       	push   $0x1000
   1073b:	50                   	push   %eax
   1073c:	e8 f9 fb ff ff       	call   1033a <down2>
   10741:	83 c4 10             	add    $0x10,%esp
   10744:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10747:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1074a:	8b 40 04             	mov    0x4(%eax),%eax
   1074d:	83 ec 08             	sub    $0x8,%esp
   10750:	68 00 10 00 00       	push   $0x1000
   10755:	50                   	push   %eax
   10756:	e8 c8 fb ff ff       	call   10323 <up2>
   1075b:	83 c4 10             	add    $0x10,%esp
   1075e:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   10761:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10764:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10767:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1076d:	85 c0                	test   %eax,%eax
   1076f:	0f 48 c2             	cmovs  %edx,%eax
   10772:	c1 f8 0c             	sar    $0xc,%eax
   10775:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10778:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1077b:	8b 50 0c             	mov    0xc(%eax),%edx
   1077e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10781:	8b 40 08             	mov    0x8(%eax),%eax
   10784:	89 c1                	mov    %eax,%ecx
   10786:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10789:	83 ec 0c             	sub    $0xc,%esp
   1078c:	52                   	push   %edx
   1078d:	ff 75 e4             	push   -0x1c(%ebp)
   10790:	51                   	push   %ecx
   10791:	50                   	push   %eax
   10792:	68 00 c0 01 00       	push   $0x1c000
   10797:	e8 cf fe ff ff       	call   1066b <memory_create_map>
   1079c:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1079f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a6:	83 f8 04             	cmp    $0x4,%eax
   107a9:	0f 86 71 ff ff ff    	jbe    10720 <create_kernel_table+0x29>
    }
}
   107af:	90                   	nop
   107b0:	90                   	nop
   107b1:	c9                   	leave  
   107b2:	c3                   	ret    

000107b3 <memory_create_uvm>:

/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm (void) {
   107b3:	55                   	push   %ebp
   107b4:	89 e5                	mov    %esp,%ebp
   107b6:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107b9:	83 ec 08             	sub    $0x8,%esp
   107bc:	6a 01                	push   $0x1
   107be:	68 00 b0 01 00       	push   $0x1b000
   107c3:	e8 88 fc ff ff       	call   10450 <addr_alloc_page>
   107c8:	83 c4 10             	add    $0x10,%esp
   107cb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107ce:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107d2:	75 07                	jne    107db <memory_create_uvm+0x28>
        return 0;
   107d4:	b8 00 00 00 00       	mov    $0x0,%eax
   107d9:	eb 5b                	jmp    10836 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107db:	83 ec 04             	sub    $0x4,%esp
   107de:	68 00 10 00 00       	push   $0x1000
   107e3:	6a 00                	push   $0x0
   107e5:	ff 75 f0             	push   -0x10(%ebp)
   107e8:	e8 78 7c 00 00       	call   18465 <kernel_memset>
   107ed:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107f0:	83 ec 0c             	sub    $0xc,%esp
   107f3:	68 00 00 00 80       	push   $0x80000000
   107f8:	e8 56 fb ff ff       	call   10353 <pde_index>
   107fd:	83 c4 10             	add    $0x10,%esp
   10800:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   10803:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1080a:	eb 1f                	jmp    1082b <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   1080c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10816:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10819:	01 c2                	add    %eax,%edx
   1081b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081e:	8b 04 85 00 c0 01 00 	mov    0x1c000(,%eax,4),%eax
   10825:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10827:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1082b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   10831:	77 d9                	ja     1080c <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10833:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10836:	c9                   	leave  
   10837:	c3                   	ret    

00010838 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm (uint32_t page_dir) {
   10838:	55                   	push   %ebp
   10839:	89 e5                	mov    %esp,%ebp
   1083b:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083e:	68 00 00 00 80       	push   $0x80000000
   10843:	e8 0b fb ff ff       	call   10353 <pde_index>
   10848:	83 c4 04             	add    $0x4,%esp
   1084b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   1084e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10851:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10858:	8b 45 08             	mov    0x8(%ebp),%eax
   1085b:	01 d0                	add    %edx,%eax
   1085d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   10860:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10864:	75 1c                	jne    10882 <memory_destroy_uvm+0x4a>
   10866:	68 4e 8b 01 00       	push   $0x18b4e
   1086b:	68 58 8c 01 00       	push   $0x18c58
   10870:	68 d5 00 00 00       	push   $0xd5
   10875:	68 14 8b 01 00       	push   $0x18b14
   1087a:	e8 33 7f 00 00       	call   187b2 <panic>
   1087f:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10882:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10885:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10888:	e9 95 00 00 00       	jmp    10922 <memory_destroy_uvm+0xea>
        if (!pde->present) {
   1088d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10890:	0f b6 00             	movzbl (%eax),%eax
   10893:	83 e0 01             	and    $0x1,%eax
   10896:	84 c0                	test   %al,%al
   10898:	74 7f                	je     10919 <memory_destroy_uvm+0xe1>
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   1089a:	83 ec 0c             	sub    $0xc,%esp
   1089d:	ff 75 f4             	push   -0xc(%ebp)
   108a0:	e8 c2 fa ff ff       	call   10367 <pde_paddr>
   108a5:	83 c4 10             	add    $0x10,%esp
   108a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108ab:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   108b2:	eb 39                	jmp    108ed <memory_destroy_uvm+0xb5>
            if (!pte->present) {
   108b4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108b7:	0f b6 00             	movzbl (%eax),%eax
   108ba:	83 e0 01             	and    $0x1,%eax
   108bd:	84 c0                	test   %al,%al
   108bf:	74 23                	je     108e4 <memory_destroy_uvm+0xac>
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108c1:	83 ec 0c             	sub    $0xc,%esp
   108c4:	ff 75 ec             	push   -0x14(%ebp)
   108c7:	e8 d2 fa ff ff       	call   1039e <pte_paddr>
   108cc:	83 c4 10             	add    $0x10,%esp
   108cf:	83 ec 04             	sub    $0x4,%esp
   108d2:	6a 01                	push   $0x1
   108d4:	50                   	push   %eax
   108d5:	68 00 b0 01 00       	push   $0x1b000
   108da:	e8 d8 fb ff ff       	call   104b7 <addr_free_page>
   108df:	83 c4 10             	add    $0x10,%esp
   108e2:	eb 01                	jmp    108e5 <memory_destroy_uvm+0xad>
                continue;
   108e4:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108e5:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108e9:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108ed:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108f4:	7e be                	jle    108b4 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108f6:	83 ec 0c             	sub    $0xc,%esp
   108f9:	ff 75 f4             	push   -0xc(%ebp)
   108fc:	e8 66 fa ff ff       	call   10367 <pde_paddr>
   10901:	83 c4 10             	add    $0x10,%esp
   10904:	83 ec 04             	sub    $0x4,%esp
   10907:	6a 01                	push   $0x1
   10909:	50                   	push   %eax
   1090a:	68 00 b0 01 00       	push   $0x1b000
   1090f:	e8 a3 fb ff ff       	call   104b7 <addr_free_page>
   10914:	83 c4 10             	add    $0x10,%esp
   10917:	eb 01                	jmp    1091a <memory_destroy_uvm+0xe2>
            continue;
   10919:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   1091a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1091e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10922:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10929:	0f 8e 5e ff ff ff    	jle    1088d <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1092f:	83 ec 04             	sub    $0x4,%esp
   10932:	6a 01                	push   $0x1
   10934:	ff 75 08             	push   0x8(%ebp)
   10937:	68 00 b0 01 00       	push   $0x1b000
   1093c:	e8 76 fb ff ff       	call   104b7 <addr_free_page>
   10941:	83 c4 10             	add    $0x10,%esp
}
   10944:	90                   	nop
   10945:	c9                   	leave  
   10946:	c3                   	ret    

00010947 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm (uint32_t page_dir) {
   10947:	55                   	push   %ebp
   10948:	89 e5                	mov    %esp,%ebp
   1094a:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   1094d:	e8 61 fe ff ff       	call   107b3 <memory_create_uvm>
   10952:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10955:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10959:	0f 84 19 01 00 00    	je     10a78 <memory_copy_uvm+0x131>
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1095f:	83 ec 0c             	sub    $0xc,%esp
   10962:	68 00 00 00 80       	push   $0x80000000
   10967:	e8 e7 f9 ff ff       	call   10353 <pde_index>
   1096c:	83 c4 10             	add    $0x10,%esp
   1096f:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   10972:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10975:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1097c:	8b 45 08             	mov    0x8(%ebp),%eax
   1097f:	01 d0                	add    %edx,%eax
   10981:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10984:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10987:	89 45 f0             	mov    %eax,-0x10(%ebp)
   1098a:	e9 d7 00 00 00       	jmp    10a66 <memory_copy_uvm+0x11f>
        if (!pde->present) {
   1098f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10992:	0f b6 00             	movzbl (%eax),%eax
   10995:	83 e0 01             	and    $0x1,%eax
   10998:	84 c0                	test   %al,%al
   1099a:	0f 84 bd 00 00 00    	je     10a5d <memory_copy_uvm+0x116>
            continue;
        }

        // 遍历页表
        pte_t * pte = (pte_t *)pde_paddr(pde);
   109a0:	83 ec 0c             	sub    $0xc,%esp
   109a3:	ff 75 f4             	push   -0xc(%ebp)
   109a6:	e8 bc f9 ff ff       	call   10367 <pde_paddr>
   109ab:	83 c4 10             	add    $0x10,%esp
   109ae:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   109b1:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109b8:	e9 91 00 00 00       	jmp    10a4e <memory_copy_uvm+0x107>
            if (!pte->present) {
   109bd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109c0:	0f b6 00             	movzbl (%eax),%eax
   109c3:	83 e0 01             	and    $0x1,%eax
   109c6:	84 c0                	test   %al,%al
   109c8:	74 7b                	je     10a45 <memory_copy_uvm+0xfe>
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109ca:	83 ec 08             	sub    $0x8,%esp
   109cd:	6a 01                	push   $0x1
   109cf:	68 00 b0 01 00       	push   $0x1b000
   109d4:	e8 77 fa ff ff       	call   10450 <addr_alloc_page>
   109d9:	83 c4 10             	add    $0x10,%esp
   109dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   109df:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109e3:	0f 84 92 00 00 00    	je     10a7b <memory_copy_uvm+0x134>
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109ec:	c1 e0 16             	shl    $0x16,%eax
   109ef:	89 c2                	mov    %eax,%edx
   109f1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109f4:	c1 e0 0c             	shl    $0xc,%eax
   109f7:	09 d0                	or     %edx,%eax
   109f9:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109fc:	83 ec 0c             	sub    $0xc,%esp
   109ff:	ff 75 ec             	push   -0x14(%ebp)
   10a02:	e8 be f9 ff ff       	call   103c5 <get_pte_perm>
   10a07:	83 c4 10             	add    $0x10,%esp
   10a0a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10a0d:	83 ec 0c             	sub    $0xc,%esp
   10a10:	50                   	push   %eax
   10a11:	6a 01                	push   $0x1
   10a13:	ff 75 dc             	push   -0x24(%ebp)
   10a16:	ff 75 d8             	push   -0x28(%ebp)
   10a19:	52                   	push   %edx
   10a1a:	e8 4c fc ff ff       	call   1066b <memory_create_map>
   10a1f:	83 c4 20             	add    $0x20,%esp
   10a22:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10a25:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a29:	78 53                	js     10a7e <memory_copy_uvm+0x137>
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a2b:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a31:	83 ec 04             	sub    $0x4,%esp
   10a34:	68 00 10 00 00       	push   $0x1000
   10a39:	52                   	push   %edx
   10a3a:	50                   	push   %eax
   10a3b:	e8 d6 79 00 00       	call   18416 <kernel_memcpy>
   10a40:	83 c4 10             	add    $0x10,%esp
   10a43:	eb 01                	jmp    10a46 <memory_copy_uvm+0xff>
                continue;
   10a45:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a46:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a4a:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a4e:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a55:	0f 8e 62 ff ff ff    	jle    109bd <memory_copy_uvm+0x76>
   10a5b:	eb 01                	jmp    10a5e <memory_copy_uvm+0x117>
            continue;
   10a5d:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10a5e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a62:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a66:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a6d:	0f 8e 1c ff ff ff    	jle    1098f <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a73:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a76:	eb 20                	jmp    10a98 <memory_copy_uvm+0x151>
        goto copy_uvm_failed;
   10a78:	90                   	nop
   10a79:	eb 04                	jmp    10a7f <memory_copy_uvm+0x138>
                goto copy_uvm_failed;
   10a7b:	90                   	nop
   10a7c:	eb 01                	jmp    10a7f <memory_copy_uvm+0x138>
                goto copy_uvm_failed;
   10a7e:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10a7f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a83:	74 0e                	je     10a93 <memory_copy_uvm+0x14c>
        memory_destroy_uvm(to_page_dir);
   10a85:	83 ec 0c             	sub    $0xc,%esp
   10a88:	ff 75 e4             	push   -0x1c(%ebp)
   10a8b:	e8 a8 fd ff ff       	call   10838 <memory_destroy_uvm>
   10a90:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a93:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a98:	c9                   	leave  
   10a99:	c3                   	ret    

00010a9a <memory_get_paddr>:

/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr (uint32_t page_dir, uint32_t vaddr) {
   10a9a:	55                   	push   %ebp
   10a9b:	89 e5                	mov    %esp,%ebp
   10a9d:	83 ec 18             	sub    $0x18,%esp
    pte_t * pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10aa0:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa3:	83 ec 04             	sub    $0x4,%esp
   10aa6:	6a 00                	push   $0x0
   10aa8:	ff 75 0c             	push   0xc(%ebp)
   10aab:	50                   	push   %eax
   10aac:	e8 0a fb ff ff       	call   105bb <find_pte>
   10ab1:	83 c4 10             	add    $0x10,%esp
   10ab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0) {
   10ab7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10abb:	75 07                	jne    10ac4 <memory_get_paddr+0x2a>
        return 0;
   10abd:	b8 00 00 00 00       	mov    $0x0,%eax
   10ac2:	eb 1a                	jmp    10ade <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ac4:	83 ec 0c             	sub    $0xc,%esp
   10ac7:	ff 75 f4             	push   -0xc(%ebp)
   10aca:	e8 cf f8 ff ff       	call   1039e <pte_paddr>
   10acf:	83 c4 10             	add    $0x10,%esp
   10ad2:	89 c2                	mov    %eax,%edx
   10ad4:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad7:	25 ff 0f 00 00       	and    $0xfff,%eax
   10adc:	01 d0                	add    %edx,%eax
}
   10ade:	c9                   	leave  
   10adf:	c3                   	ret    

00010ae0 <memory_copy_uvm_data>:

/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   10ae0:	55                   	push   %ebp
   10ae1:	89 e5                	mov    %esp,%ebp
   10ae3:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while(size > 0){
   10ae6:	eb 6e                	jmp    10b56 <memory_copy_uvm_data+0x76>
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ae8:	83 ec 08             	sub    $0x8,%esp
   10aeb:	ff 75 08             	push   0x8(%ebp)
   10aee:	ff 75 0c             	push   0xc(%ebp)
   10af1:	e8 a4 ff ff ff       	call   10a9a <memory_get_paddr>
   10af6:	83 c4 10             	add    $0x10,%esp
   10af9:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   10afc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b00:	75 07                	jne    10b09 <memory_copy_uvm_data+0x29>
            return -1;
   10b02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b07:	eb 58                	jmp    10b61 <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10b09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b0c:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b11:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b14:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b19:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b1c:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   10b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b22:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b25:	76 06                	jbe    10b2d <memory_copy_uvm_data+0x4d>
            curr_size = size;       // 如果比较大，超过页边界，则只拷贝此页内的
   10b27:	8b 45 14             	mov    0x14(%ebp),%eax
   10b2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b2d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b30:	8b 55 10             	mov    0x10(%ebp),%edx
   10b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b36:	83 ec 04             	sub    $0x4,%esp
   10b39:	51                   	push   %ecx
   10b3a:	52                   	push   %edx
   10b3b:	50                   	push   %eax
   10b3c:	e8 d5 78 00 00       	call   18416 <kernel_memcpy>
   10b41:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b44:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b47:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b4d:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b50:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b53:	01 45 10             	add    %eax,0x10(%ebp)
    while(size > 0){
   10b56:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b5a:	75 8c                	jne    10ae8 <memory_copy_uvm_data+0x8>
  }

  return 0;
   10b5c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b61:	c9                   	leave  
   10b62:	c3                   	ret    

00010b63 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10b63:	55                   	push   %ebp
   10b64:	89 e5                	mov    %esp,%ebp
   10b66:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b69:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b6f:	68 00 10 00 00       	push   $0x1000
   10b74:	ff 75 10             	push   0x10(%ebp)
   10b77:	e8 a7 f7 ff ff       	call   10323 <up2>
   10b7c:	83 c4 08             	add    $0x8,%esp
   10b7f:	c1 e8 0c             	shr    $0xc,%eax
   10b82:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b85:	68 00 10 00 00       	push   $0x1000
   10b8a:	ff 75 0c             	push   0xc(%ebp)
   10b8d:	e8 a8 f7 ff ff       	call   1033a <down2>
   10b92:	83 c4 08             	add    $0x8,%esp
   10b95:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++) {
   10b98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10b9f:	e9 95 00 00 00       	jmp    10c39 <memory_alloc_for_page_dir+0xd6>
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10ba4:	83 ec 08             	sub    $0x8,%esp
   10ba7:	6a 01                	push   $0x1
   10ba9:	68 00 b0 01 00       	push   $0x1b000
   10bae:	e8 9d f8 ff ff       	call   10450 <addr_alloc_page>
   10bb3:	83 c4 10             	add    $0x10,%esp
   10bb6:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10bb9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bbd:	75 17                	jne    10bd6 <memory_alloc_for_page_dir+0x73>
            log_printf("mem alloc failed. no memory");
   10bbf:	83 ec 0c             	sub    $0xc,%esp
   10bc2:	68 5c 8b 01 00       	push   $0x18b5c
   10bc7:	e8 43 7e 00 00       	call   18a0f <log_printf>
   10bcc:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bcf:	b8 00 00 00 00       	mov    $0x0,%eax
   10bd4:	eb 74                	jmp    10c4a <memory_alloc_for_page_dir+0xe7>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bd6:	8b 55 14             	mov    0x14(%ebp),%edx
   10bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdc:	83 ec 0c             	sub    $0xc,%esp
   10bdf:	52                   	push   %edx
   10be0:	6a 01                	push   $0x1
   10be2:	ff 75 e8             	push   -0x18(%ebp)
   10be5:	ff 75 f4             	push   -0xc(%ebp)
   10be8:	50                   	push   %eax
   10be9:	e8 7d fa ff ff       	call   1066b <memory_create_map>
   10bee:	83 c4 20             	add    $0x20,%esp
   10bf1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10bf4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10bf8:	79 34                	jns    10c2e <memory_alloc_for_page_dir+0xcb>
            log_printf("create memory map failed. err = %d", err);
   10bfa:	83 ec 08             	sub    $0x8,%esp
   10bfd:	ff 75 e4             	push   -0x1c(%ebp)
   10c00:	68 78 8b 01 00       	push   $0x18b78
   10c05:	e8 05 7e 00 00       	call   18a0f <log_printf>
   10c0a:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   10c0d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c10:	83 c0 01             	add    $0x1,%eax
   10c13:	83 ec 04             	sub    $0x4,%esp
   10c16:	50                   	push   %eax
   10c17:	ff 75 0c             	push   0xc(%ebp)
   10c1a:	68 00 b0 01 00       	push   $0x1b000
   10c1f:	e8 93 f8 ff ff       	call   104b7 <addr_free_page>
   10c24:	83 c4 10             	add    $0x10,%esp
            return -1;
   10c27:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2c:	eb 1c                	jmp    10c4a <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c2e:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10c35:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c39:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c3c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c3f:	0f 8c 5f ff ff ff    	jl     10ba4 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   10c45:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c4a:	c9                   	leave  
   10c4b:	c3                   	ret    

00010c4c <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10c4c:	55                   	push   %ebp
   10c4d:	89 e5                	mov    %esp,%ebp
   10c4f:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10c52:	e8 b0 0a 00 00       	call   11707 <task_current>
   10c57:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   10c5d:	ff 75 10             	push   0x10(%ebp)
   10c60:	ff 75 0c             	push   0xc(%ebp)
   10c63:	ff 75 08             	push   0x8(%ebp)
   10c66:	50                   	push   %eax
   10c67:	e8 f7 fe ff ff       	call   10b63 <memory_alloc_for_page_dir>
   10c6c:	83 c4 10             	add    $0x10,%esp
}
   10c6f:	c9                   	leave  
   10c70:	c3                   	ret    

00010c71 <memory_alloc_page>:

/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page (void) {
   10c71:	55                   	push   %ebp
   10c72:	89 e5                	mov    %esp,%ebp
   10c74:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c77:	83 ec 08             	sub    $0x8,%esp
   10c7a:	6a 01                	push   $0x1
   10c7c:	68 00 b0 01 00       	push   $0x1b000
   10c81:	e8 ca f7 ff ff       	call   10450 <addr_alloc_page>
   10c86:	83 c4 10             	add    $0x10,%esp
}
   10c89:	c9                   	leave  
   10c8a:	c3                   	ret    

00010c8b <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page (uint32_t addr) {
   10c8b:	55                   	push   %ebp
   10c8c:	89 e5                	mov    %esp,%ebp
   10c8e:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   10c91:	8b 45 08             	mov    0x8(%ebp),%eax
   10c94:	85 c0                	test   %eax,%eax
   10c96:	78 17                	js     10caf <memory_free_page+0x24>
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c98:	83 ec 04             	sub    $0x4,%esp
   10c9b:	6a 01                	push   $0x1
   10c9d:	ff 75 08             	push   0x8(%ebp)
   10ca0:	68 00 b0 01 00       	push   $0x1b000
   10ca5:	e8 0d f8 ff ff       	call   104b7 <addr_free_page>
   10caa:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10cad:	eb 72                	jmp    10d21 <memory_free_page+0x96>
        pte_t * pte = find_pte(current_page_dir(), addr, 0);
   10caf:	e8 31 f7 ff ff       	call   103e5 <current_page_dir>
   10cb4:	83 ec 04             	sub    $0x4,%esp
   10cb7:	6a 00                	push   $0x0
   10cb9:	ff 75 08             	push   0x8(%ebp)
   10cbc:	50                   	push   %eax
   10cbd:	e8 f9 f8 ff ff       	call   105bb <find_pte>
   10cc2:	83 c4 10             	add    $0x10,%esp
   10cc5:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10cc8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ccc:	75 0d                	jne    10cdb <memory_free_page+0x50>
   10cce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cd1:	0f b6 00             	movzbl (%eax),%eax
   10cd4:	83 e0 01             	and    $0x1,%eax
   10cd7:	84 c0                	test   %al,%al
   10cd9:	75 1c                	jne    10cf7 <memory_free_page+0x6c>
   10cdb:	68 9c 8b 01 00       	push   $0x18b9c
   10ce0:	68 6c 8c 01 00       	push   $0x18c6c
   10ce5:	68 86 01 00 00       	push   $0x186
   10cea:	68 14 8b 01 00       	push   $0x18b14
   10cef:	e8 be 7a 00 00       	call   187b2 <panic>
   10cf4:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10cf7:	83 ec 0c             	sub    $0xc,%esp
   10cfa:	ff 75 f4             	push   -0xc(%ebp)
   10cfd:	e8 9c f6 ff ff       	call   1039e <pte_paddr>
   10d02:	83 c4 10             	add    $0x10,%esp
   10d05:	83 ec 04             	sub    $0x4,%esp
   10d08:	6a 01                	push   $0x1
   10d0a:	50                   	push   %eax
   10d0b:	68 00 b0 01 00       	push   $0x1b000
   10d10:	e8 a2 f7 ff ff       	call   104b7 <addr_free_page>
   10d15:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10d18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d1b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d21:	90                   	nop
   10d22:	c9                   	leave  
   10d23:	c3                   	ret    

00010d24 <memory_init>:
 * @brief 初始化内存管理系统
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init (boot_info_t * boot_info) {
   10d24:	55                   	push   %ebp
   10d25:	89 e5                	mov    %esp,%ebp
   10d27:	83 ec 18             	sub    $0x18,%esp
    // 1MB内存空间起始，在链接脚本中定义
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10d2a:	83 ec 0c             	sub    $0xc,%esp
   10d2d:	68 c0 8b 01 00       	push   $0x18bc0
   10d32:	e8 d8 7c 00 00       	call   18a0f <log_printf>
   10d37:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d3a:	83 ec 0c             	sub    $0xc,%esp
   10d3d:	ff 75 08             	push   0x8(%ebp)
   10d40:	e8 d4 f7 ff ff       	call   10519 <show_mem_info>
   10d45:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t * mem_free = (uint8_t *)&mem_free_start;   // 2022年-10-1 经同学反馈，发现这里有点bug，改了下
   10d48:	c7 45 f4 47 04 06 00 	movl   $0x60447,-0xc(%ebp)

    // 计算1MB以上空间的空闲内存容量，并对齐的页边界
    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d4f:	83 ec 0c             	sub    $0xc,%esp
   10d52:	ff 75 08             	push   0x8(%ebp)
   10d55:	e8 25 f8 ff ff       	call   1057f <total_mem_size>
   10d5a:	83 c4 10             	add    $0x10,%esp
   10d5d:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);   // 对齐到4KB页
   10d65:	83 ec 08             	sub    $0x8,%esp
   10d68:	68 00 10 00 00       	push   $0x1000
   10d6d:	ff 75 f0             	push   -0x10(%ebp)
   10d70:	e8 c5 f5 ff ff       	call   1033a <down2>
   10d75:	83 c4 10             	add    $0x10,%esp
   10d78:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10d7b:	83 ec 04             	sub    $0x4,%esp
   10d7e:	ff 75 f0             	push   -0x10(%ebp)
   10d81:	68 00 00 10 00       	push   $0x100000
   10d86:	68 ca 8b 01 00       	push   $0x18bca
   10d8b:	e8 7f 7c 00 00       	call   18a0f <log_printf>
   10d90:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d93:	83 ec 0c             	sub    $0xc,%esp
   10d96:	68 00 10 00 00       	push   $0x1000
   10d9b:	ff 75 f0             	push   -0x10(%ebp)
   10d9e:	68 00 00 10 00       	push   $0x100000
   10da3:	ff 75 f4             	push   -0xc(%ebp)
   10da6:	68 00 b0 01 00       	push   $0x1b000
   10dab:	e8 48 f6 ff ff       	call   103f8 <addr_alloc_init>
   10db0:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10db3:	a1 24 b0 01 00       	mov    0x1b024,%eax
   10db8:	c1 e8 0c             	shr    $0xc,%eax
   10dbb:	83 ec 0c             	sub    $0xc,%esp
   10dbe:	50                   	push   %eax
   10dbf:	e8 3d 72 00 00       	call   18001 <bitmap_byte_count>
   10dc4:	83 c4 10             	add    $0x10,%esp
   10dc7:	01 45 f4             	add    %eax,-0xc(%ebp)

    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10dca:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10dd1:	76 1c                	jbe    10def <memory_init+0xcb>
   10dd3:	68 e8 8b 01 00       	push   $0x18be8
   10dd8:	68 80 8c 01 00       	push   $0x18c80
   10ddd:	68 ab 01 00 00       	push   $0x1ab
   10de2:	68 14 8b 01 00       	push   $0x18b14
   10de7:	e8 c6 79 00 00       	call   187b2 <panic>
   10dec:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10def:	e8 03 f9 ff ff       	call   106f7 <create_kernel_table>

    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10df4:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   10df9:	83 ec 0c             	sub    $0xc,%esp
   10dfc:	50                   	push   %eax
   10dfd:	e8 d2 f5 ff ff       	call   103d4 <mmu_set_page_dir>
   10e02:	83 c4 10             	add    $0x10,%esp
}
   10e05:	90                   	nop
   10e06:	c9                   	leave  
   10e07:	c3                   	ret    

00010e08 <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char * sys_sbrk(int incr) {
   10e08:	55                   	push   %ebp
   10e09:	89 e5                	mov    %esp,%ebp
   10e0b:	83 ec 38             	sub    $0x38,%esp
    task_t * task = task_current();
   10e0e:	e8 f4 08 00 00       	call   11707 <task_current>
   10e13:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char * pre_heap_end = (char * )task->heap_end;
   10e16:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e19:	8b 40 30             	mov    0x30(%eax),%eax
   10e1c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10e1f:	8b 45 08             	mov    0x8(%ebp),%eax
   10e22:	89 45 e8             	mov    %eax,-0x18(%ebp)

    ASSERT(incr >= 0);
   10e25:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e29:	79 1c                	jns    10e47 <sys_sbrk+0x3f>
   10e2b:	68 0d 8c 01 00       	push   $0x18c0d
   10e30:	68 8c 8c 01 00       	push   $0x18c8c
   10e35:	68 bc 01 00 00       	push   $0x1bc
   10e3a:	68 14 8b 01 00       	push   $0x18b14
   10e3f:	e8 6e 79 00 00       	call   187b2 <panic>
   10e44:	83 c4 10             	add    $0x10,%esp

    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0) {
   10e47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e4b:	75 1b                	jne    10e68 <sys_sbrk+0x60>
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e4d:	83 ec 08             	sub    $0x8,%esp
   10e50:	ff 75 ec             	push   -0x14(%ebp)
   10e53:	68 17 8c 01 00       	push   $0x18c17
   10e58:	e8 b2 7b 00 00       	call   18a0f <log_printf>
   10e5d:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e63:	e9 aa 00 00 00       	jmp    10f12 <sys_sbrk+0x10a>
    } 
    
    uint32_t start = task->heap_end;
   10e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e6b:	8b 40 30             	mov    0x30(%eax),%eax
   10e6e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e71:	8b 55 08             	mov    0x8(%ebp),%edx
   10e74:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e77:	01 d0                	add    %edx,%eax
   10e79:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e7f:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e84:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset) {
   10e87:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e8b:	74 37                	je     10ec4 <sys_sbrk+0xbc>
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE) {
   10e8d:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e90:	8b 45 08             	mov    0x8(%ebp),%eax
   10e93:	01 d0                	add    %edx,%eax
   10e95:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e9a:	7f 0e                	jg     10eaa <sys_sbrk+0xa2>
            task->heap_end = end;
   10e9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e9f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ea2:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10ea5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ea8:	eb 68                	jmp    10f12 <sys_sbrk+0x10a>
        } else {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10eaa:	b8 00 10 00 00       	mov    $0x1000,%eax
   10eaf:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10eb2:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10eb5:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10eb8:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebe:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10ec1:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }

    // 处理其余的，起始对齐的页边界的
    if (incr) {
   10ec4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ec8:	74 3c                	je     10f06 <sys_sbrk+0xfe>
        uint32_t curr_size = end - start;
   10eca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ecd:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ed0:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ed3:	83 ec 04             	sub    $0x4,%esp
   10ed6:	6a 07                	push   $0x7
   10ed8:	ff 75 d8             	push   -0x28(%ebp)
   10edb:	ff 75 f4             	push   -0xc(%ebp)
   10ede:	e8 69 fd ff ff       	call   10c4c <memory_alloc_page_for>
   10ee3:	83 c4 10             	add    $0x10,%esp
   10ee6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   10ee9:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10eed:	79 17                	jns    10f06 <sys_sbrk+0xfe>
            log_printf("sbrk: alloc mem failed.");
   10eef:	83 ec 0c             	sub    $0xc,%esp
   10ef2:	68 2b 8c 01 00       	push   $0x18c2b
   10ef7:	e8 13 7b 00 00       	call   18a0f <log_printf>
   10efc:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10eff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f04:	eb 0c                	jmp    10f12 <sys_sbrk+0x10a>
        }
    }

    //log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10f06:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f09:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10f0c:	89 50 30             	mov    %edx,0x30(%eax)
    return (char * )pre_heap_end;        
   10f0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   10f12:	c9                   	leave  
   10f13:	c3                   	ret    

00010f14 <sys_print_msg>:
#include "fs/fs.h"

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

int sys_print_msg (char * fmt, int arg) {
   10f14:	55                   	push   %ebp
   10f15:	89 e5                	mov    %esp,%ebp
   10f17:	83 ec 08             	sub    $0x8,%esp
	log_printf(fmt, arg);
   10f1a:	83 ec 08             	sub    $0x8,%esp
   10f1d:	ff 75 0c             	push   0xc(%ebp)
   10f20:	ff 75 08             	push   0x8(%ebp)
   10f23:	e8 e7 7a 00 00       	call   18a0f <log_printf>
   10f28:	83 c4 10             	add    $0x10,%esp
}
   10f2b:	90                   	nop
   10f2c:	c9                   	leave  
   10f2d:	c3                   	ret    

00010f2e <do_handler_syscall>:
};

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall (syscall_frame_t * frame) {
   10f2e:	55                   	push   %ebp
   10f2f:	89 e5                	mov    %esp,%ebp
   10f31:	53                   	push   %ebx
   10f32:	83 ec 14             	sub    $0x14,%esp
	// 超出边界，返回错误
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10f35:	8b 45 08             	mov    0x8(%ebp),%eax
   10f38:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f3b:	83 f8 64             	cmp    $0x64,%eax
   10f3e:	77 4e                	ja     10f8e <do_handler_syscall+0x60>
		// 查表取得处理函数，然后调用处理
		syscall_handler_t handler = sys_table[frame->func_id];
   10f40:	8b 45 08             	mov    0x8(%ebp),%eax
   10f43:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f46:	8b 04 85 a0 8c 01 00 	mov    0x18ca0(,%eax,4),%eax
   10f4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (handler) {
   10f50:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f54:	74 38                	je     10f8e <do_handler_syscall+0x60>
			int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f56:	8b 45 08             	mov    0x8(%ebp),%eax
   10f59:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f5c:	89 c3                	mov    %eax,%ebx
   10f5e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f61:	8b 40 48             	mov    0x48(%eax),%eax
   10f64:	89 c1                	mov    %eax,%ecx
   10f66:	8b 45 08             	mov    0x8(%ebp),%eax
   10f69:	8b 40 44             	mov    0x44(%eax),%eax
   10f6c:	89 c2                	mov    %eax,%edx
   10f6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f71:	8b 40 40             	mov    0x40(%eax),%eax
   10f74:	53                   	push   %ebx
   10f75:	51                   	push   %ecx
   10f76:	52                   	push   %edx
   10f77:	50                   	push   %eax
   10f78:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f7b:	ff d0                	call   *%eax
   10f7d:	83 c4 10             	add    $0x10,%esp
   10f80:	89 45 f0             	mov    %eax,-0x10(%ebp)
			frame->eax = ret;  // 设置系统调用的返回值，由eax传递
   10f83:	8b 45 08             	mov    0x8(%ebp),%eax
   10f86:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f89:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f8c:	eb 30                	jmp    10fbe <do_handler_syscall+0x90>
		}
	}

	// 不支持的系统调用，打印出错信息
	task_t * task = task_current();
   10f8e:	e8 74 07 00 00       	call   11707 <task_current>
   10f93:	89 45 ec             	mov    %eax,-0x14(%ebp)
	log_printf("task: %s, Unknown syscall: %d", task->name,  frame->func_id);
   10f96:	8b 45 08             	mov    0x8(%ebp),%eax
   10f99:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f9c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f9f:	83 c2 04             	add    $0x4,%edx
   10fa2:	83 ec 04             	sub    $0x4,%esp
   10fa5:	50                   	push   %eax
   10fa6:	52                   	push   %edx
   10fa7:	68 34 8e 01 00       	push   $0x18e34
   10fac:	e8 5e 7a 00 00       	call   18a0f <log_printf>
   10fb1:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;  // 设置系统调用的返回值，由eax传递
   10fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb7:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10fbe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fc1:	c9                   	leave  
   10fc2:	c3                   	ret    

00010fc3 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10fc3:	55                   	push   %ebp
   10fc4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10fc6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc9:	0f 22 d8             	mov    %eax,%cr3
}
   10fcc:	90                   	nop
   10fcd:	5d                   	pop    %ebp
   10fce:	c3                   	ret    

00010fcf <hlt>:
	idt.limit = size - 1;

	__asm__ __volatile__("lidt %0"::"m"(idt));
}

static inline void hlt(void) {
   10fcf:	55                   	push   %ebp
   10fd0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fd2:	f4                   	hlt    
}
   10fd3:	90                   	nop
   10fd4:	5d                   	pop    %ebp
   10fd5:	c3                   	ret    

00010fd6 <write_tr>:

static inline void write_tr (uint32_t tss_selector) {
   10fd6:	55                   	push   %ebp
   10fd7:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   10fd9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fdc:	0f 00 d8             	ltr    %ax
}
   10fdf:	90                   	nop
   10fe0:	5d                   	pop    %ebp
   10fe1:	c3                   	ret    

00010fe2 <list_node_init>:

/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node) {
   10fe2:	55                   	push   %ebp
   10fe3:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10fe5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fef:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff2:	8b 50 04             	mov    0x4(%eax),%edx
   10ff5:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff8:	89 10                	mov    %edx,(%eax)
}
   10ffa:	90                   	nop
   10ffb:	5d                   	pop    %ebp
   10ffc:	c3                   	ret    

00010ffd <list_node_next>:
/**
 * 获取结点的前一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t * list_node_next(list_node_t *node) {
   10ffd:	55                   	push   %ebp
   10ffe:	89 e5                	mov    %esp,%ebp
    return node->next;
   11000:	8b 45 08             	mov    0x8(%ebp),%eax
   11003:	8b 40 04             	mov    0x4(%eax),%eax
}
   11006:	5d                   	pop    %ebp
   11007:	c3                   	ret    

00011008 <list_count>:
/**
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list) {
   11008:	55                   	push   %ebp
   11009:	89 e5                	mov    %esp,%ebp
    return list->count;
   1100b:	8b 45 08             	mov    0x8(%ebp),%eax
   1100e:	8b 40 08             	mov    0x8(%eax),%eax
}
   11011:	5d                   	pop    %ebp
   11012:	c3                   	ret    

00011013 <list_first>:
/**
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t* list_first(list_t *list) {
   11013:	55                   	push   %ebp
   11014:	89 e5                	mov    %esp,%ebp
    return list->first;
   11016:	8b 45 08             	mov    0x8(%ebp),%eax
   11019:	8b 00                	mov    (%eax),%eax
}
   1101b:	5d                   	pop    %ebp
   1101c:	c3                   	ret    

0001101d <mmu_set_page_dir>:
static inline void mmu_set_page_dir (uint32_t paddr) {
   1101d:	55                   	push   %ebp
   1101e:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11020:	ff 75 08             	push   0x8(%ebp)
   11023:	e8 9b ff ff ff       	call   10fc3 <write_cr3>
   11028:	83 c4 04             	add    $0x4,%esp
}
   1102b:	90                   	nop
   1102c:	c9                   	leave  
   1102d:	c3                   	ret    

0001102e <tss_init>:
static task_manager_t task_manager;     // 任务管理器
static uint32_t idle_task_stack[IDLE_STACK_SIZE];	// 空闲任务堆栈
static task_t task_table[TASK_NR];      // 用户进程表
static mutex_t task_table_mutex;        // 进程表互斥访问锁

static int tss_init (task_t * task, int flag, uint32_t entry, uint32_t esp) {
   1102e:	55                   	push   %ebp
   1102f:	89 e5                	mov    %esp,%ebp
   11031:	83 ec 28             	sub    $0x28,%esp
    // 为TSS分配GDT
    int tss_sel = gdt_alloc_desc();
   11034:	e8 ed 15 00 00       	call   12626 <gdt_alloc_desc>
   11039:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   1103c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11040:	79 1a                	jns    1105c <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   11042:	83 ec 0c             	sub    $0xc,%esp
   11045:	68 54 8e 01 00       	push   $0x18e54
   1104a:	e8 c0 79 00 00       	call   18a0f <log_printf>
   1104f:	83 c4 10             	add    $0x10,%esp
        return -1;
   11052:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11057:	e9 9d 01 00 00       	jmp    111f9 <tss_init+0x1cb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   1105c:	8b 45 08             	mov    0x8(%ebp),%eax
   1105f:	05 44 02 00 00       	add    $0x244,%eax
   11064:	68 89 00 00 00       	push   $0x89
   11069:	6a 68                	push   $0x68
   1106b:	50                   	push   %eax
   1106c:	ff 75 ec             	push   -0x14(%ebp)
   1106f:	e8 ac 14 00 00       	call   12520 <segment_desc_set>
   11074:	83 c4 10             	add    $0x10,%esp
            SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11077:	8b 45 08             	mov    0x8(%ebp),%eax
   1107a:	05 44 02 00 00       	add    $0x244,%eax
   1107f:	83 ec 04             	sub    $0x4,%esp
   11082:	6a 68                	push   $0x68
   11084:	6a 00                	push   $0x0
   11086:	50                   	push   %eax
   11087:	e8 d9 73 00 00       	call   18465 <kernel_memset>
   1108c:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   1108f:	e8 dd fb ff ff       	call   10c71 <memory_alloc_page>
   11094:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   11097:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1109b:	0f 84 2d 01 00 00    	je     111ce <tss_init+0x1a0>
        goto tss_init_failed;
    }
    
    // 根据不同的权限选择不同的访问选择子
    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM) {
   110a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a4:	83 e0 01             	and    $0x1,%eax
   110a7:	85 c0                	test   %eax,%eax
   110a9:	74 10                	je     110bb <tss_init+0x8d>
        code_sel = KERNEL_SELECTOR_CS;
   110ab:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110b2:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110b9:	eb 16                	jmp    110d1 <tss_init+0xa3>
    } else {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   110bb:	a1 b8 d5 01 00       	mov    0x1d5b8,%eax
   110c0:	83 c8 03             	or     $0x3,%eax
   110c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   110c6:	a1 bc d5 01 00       	mov    0x1d5bc,%eax
   110cb:	83 c8 03             	or     $0x3,%eax
   110ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110d1:	8b 45 08             	mov    0x8(%ebp),%eax
   110d4:	8b 55 10             	mov    0x10(%ebp),%edx
   110d7:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE;  // 未指定栈则用内核栈，即运行在特权级0的进程
   110dd:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110e1:	75 0a                	jne    110ed <tss_init+0xbf>
   110e3:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110e6:	05 00 10 00 00       	add    $0x1000,%eax
   110eb:	eb 03                	jmp    110f0 <tss_init+0xc2>
   110ed:	8b 45 14             	mov    0x14(%ebp),%eax
   110f0:	8b 55 08             	mov    0x8(%ebp),%edx
   110f3:	89 82 7c 02 00 00    	mov    %eax,0x27c(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110f9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110fc:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	89 90 48 02 00 00    	mov    %edx,0x248(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	c7 80 4c 02 00 00 10 	movl   $0x10,0x24c(%eax)
   11115:	00 00 00 
    task->tss.eip = entry;
   11118:	8b 45 08             	mov    0x8(%ebp),%eax
   1111b:	8b 55 10             	mov    0x10(%ebp),%edx
   1111e:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.eflags = EFLAGS_DEFAULT| EFLAGS_IF;
   11124:	8b 45 08             	mov    0x8(%ebp),%eax
   11127:	c7 80 68 02 00 00 02 	movl   $0x202,0x268(%eax)
   1112e:	02 00 00 
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
            = task->tss.gs = data_sel;   // 全部采用同一数据段
   11131:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11134:	8b 45 08             	mov    0x8(%ebp),%eax
   11137:	89 90 a0 02 00 00    	mov    %edx,0x2a0(%eax)
   1113d:	8b 45 08             	mov    0x8(%ebp),%eax
   11140:	8b 90 a0 02 00 00    	mov    0x2a0(%eax),%edx
   11146:	8b 45 08             	mov    0x8(%ebp),%eax
   11149:	89 90 9c 02 00 00    	mov    %edx,0x29c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
   1114f:	8b 45 08             	mov    0x8(%ebp),%eax
   11152:	8b 90 9c 02 00 00    	mov    0x29c(%eax),%edx
   11158:	8b 45 08             	mov    0x8(%ebp),%eax
   1115b:	89 90 98 02 00 00    	mov    %edx,0x298(%eax)
   11161:	8b 45 08             	mov    0x8(%ebp),%eax
   11164:	8b 90 98 02 00 00    	mov    0x298(%eax),%edx
   1116a:	8b 45 08             	mov    0x8(%ebp),%eax
   1116d:	89 90 94 02 00 00    	mov    %edx,0x294(%eax)
   11173:	8b 45 08             	mov    0x8(%ebp),%eax
   11176:	8b 90 94 02 00 00    	mov    0x294(%eax),%edx
   1117c:	8b 45 08             	mov    0x8(%ebp),%eax
   1117f:	89 90 8c 02 00 00    	mov    %edx,0x28c(%eax)
    task->tss.cs = code_sel; 
   11185:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11188:	8b 45 08             	mov    0x8(%ebp),%eax
   1118b:	89 90 90 02 00 00    	mov    %edx,0x290(%eax)
    task->tss.iomap = 0;
   11191:	8b 45 08             	mov    0x8(%ebp),%eax
   11194:	c7 80 a8 02 00 00 00 	movl   $0x0,0x2a8(%eax)
   1119b:	00 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   1119e:	e8 10 f6 ff ff       	call   107b3 <memory_create_uvm>
   111a3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) {
   111a6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   111aa:	74 25                	je     111d1 <tss_init+0x1a3>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   111ac:	8b 45 08             	mov    0x8(%ebp),%eax
   111af:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   111b2:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)

    task->tss_sel = tss_sel;
   111b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111bb:	89 c2                	mov    %eax,%edx
   111bd:	8b 45 08             	mov    0x8(%ebp),%eax
   111c0:	66 89 90 ac 02 00 00 	mov    %dx,0x2ac(%eax)
    return 0;
   111c7:	b8 00 00 00 00       	mov    $0x0,%eax
   111cc:	eb 2b                	jmp    111f9 <tss_init+0x1cb>
        goto tss_init_failed;
   111ce:	90                   	nop
   111cf:	eb 01                	jmp    111d2 <tss_init+0x1a4>
        goto tss_init_failed;
   111d1:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   111d2:	83 ec 0c             	sub    $0xc,%esp
   111d5:	ff 75 ec             	push   -0x14(%ebp)
   111d8:	e8 10 14 00 00       	call   125ed <gdt_free_sel>
   111dd:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) {
   111e0:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111e4:	74 0e                	je     111f4 <tss_init+0x1c6>
        memory_free_page(kernel_stack);
   111e6:	83 ec 0c             	sub    $0xc,%esp
   111e9:	ff 75 e8             	push   -0x18(%ebp)
   111ec:	e8 9a fa ff ff       	call   10c8b <memory_free_page>
   111f1:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111f4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111f9:	c9                   	leave  
   111fa:	c3                   	ret    

000111fb <task_init>:

/**
 * @brief 初始化任务
 */
int task_init (task_t *task, const char * name, int flag, uint32_t entry, uint32_t esp) {
   111fb:	55                   	push   %ebp
   111fc:	89 e5                	mov    %esp,%ebp
   111fe:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   11201:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11205:	75 19                	jne    11220 <task_init+0x25>
   11207:	68 67 8e 01 00       	push   $0x18e67
   1120c:	68 ec 8f 01 00       	push   $0x18fec
   11211:	6a 59                	push   $0x59
   11213:	68 7c 8e 01 00       	push   $0x18e7c
   11218:	e8 95 75 00 00       	call   187b2 <panic>
   1121d:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   11220:	ff 75 18             	push   0x18(%ebp)
   11223:	ff 75 14             	push   0x14(%ebp)
   11226:	ff 75 10             	push   0x10(%ebp)
   11229:	ff 75 08             	push   0x8(%ebp)
   1122c:	e8 fd fd ff ff       	call   1102e <tss_init>
   11231:	83 c4 10             	add    $0x10,%esp
   11234:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   11237:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1123b:	79 18                	jns    11255 <task_init+0x5a>
        log_printf("init task failed.\n");
   1123d:	83 ec 0c             	sub    $0xc,%esp
   11240:	68 b4 8e 01 00       	push   $0x18eb4
   11245:	e8 c5 77 00 00       	call   18a0f <log_printf>
   1124a:	83 c4 10             	add    $0x10,%esp
        return err;
   1124d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11250:	e9 f0 00 00 00       	jmp    11345 <task_init+0x14a>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11255:	8b 45 08             	mov    0x8(%ebp),%eax
   11258:	83 c0 04             	add    $0x4,%eax
   1125b:	83 ec 04             	sub    $0x4,%esp
   1125e:	6a 20                	push   $0x20
   11260:	ff 75 0c             	push   0xc(%ebp)
   11263:	50                   	push   %eax
   11264:	e8 84 70 00 00       	call   182ed <kernel_strncpy>
   11269:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1126c:	8b 45 08             	mov    0x8(%ebp),%eax
   1126f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11275:	8b 45 08             	mov    0x8(%ebp),%eax
   11278:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    task->time_slice = TASK_TIME_SLICE_DEFAULT;
   1127f:	8b 45 08             	mov    0x8(%ebp),%eax
   11282:	c7 40 3c 0a 00 00 00 	movl   $0xa,0x3c(%eax)
    task->slice_ticks = task->time_slice;
   11289:	8b 45 08             	mov    0x8(%ebp),%eax
   1128c:	8b 50 3c             	mov    0x3c(%eax),%edx
   1128f:	8b 45 08             	mov    0x8(%ebp),%eax
   11292:	89 50 40             	mov    %edx,0x40(%eax)
    task->parent = (task_t *)0;
   11295:	8b 45 08             	mov    0x8(%ebp),%eax
   11298:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   1129f:	8b 45 08             	mov    0x8(%ebp),%eax
   112a2:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   112a9:	8b 45 08             	mov    0x8(%ebp),%eax
   112ac:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node);
   112b3:	8b 45 08             	mov    0x8(%ebp),%eax
   112b6:	05 c0 02 00 00       	add    $0x2c0,%eax
   112bb:	83 ec 0c             	sub    $0xc,%esp
   112be:	50                   	push   %eax
   112bf:	e8 1e fd ff ff       	call   10fe2 <list_node_init>
   112c4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   112c7:	8b 45 08             	mov    0x8(%ebp),%eax
   112ca:	05 b0 02 00 00       	add    $0x2b0,%eax
   112cf:	83 ec 0c             	sub    $0xc,%esp
   112d2:	50                   	push   %eax
   112d3:	e8 0a fd ff ff       	call   10fe2 <list_node_init>
   112d8:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112db:	8b 45 08             	mov    0x8(%ebp),%eax
   112de:	05 b8 02 00 00       	add    $0x2b8,%eax
   112e3:	83 ec 0c             	sub    $0xc,%esp
   112e6:	50                   	push   %eax
   112e7:	e8 f6 fc ff ff       	call   10fe2 <list_node_init>
   112ec:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   112ef:	8b 45 08             	mov    0x8(%ebp),%eax
   112f2:	83 c0 44             	add    $0x44,%eax
   112f5:	83 ec 04             	sub    $0x4,%esp
   112f8:	68 00 02 00 00       	push   $0x200
   112fd:	6a 00                	push   $0x0
   112ff:	50                   	push   %eax
   11300:	e8 60 71 00 00       	call   18465 <kernel_memset>
   11305:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   11308:	e8 f7 1d 00 00       	call   13104 <irq_enter_protection>
   1130d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task;   // 使用地址，能唯一
   11310:	8b 55 08             	mov    0x8(%ebp),%edx
   11313:	8b 45 08             	mov    0x8(%ebp),%eax
   11316:	89 50 24             	mov    %edx,0x24(%eax)
    list_insert_last(&task_manager.task_list, &task->all_node);
   11319:	8b 45 08             	mov    0x8(%ebp),%eax
   1131c:	05 c0 02 00 00       	add    $0x2c0,%eax
   11321:	83 ec 08             	sub    $0x8,%esp
   11324:	50                   	push   %eax
   11325:	68 10 d0 01 00       	push   $0x1d010
   1132a:	e8 50 75 00 00       	call   1887f <list_insert_last>
   1132f:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11332:	83 ec 0c             	sub    $0xc,%esp
   11335:	ff 75 f0             	push   -0x10(%ebp)
   11338:	e8 df 1d 00 00       	call   1311c <irq_leave_protection>
   1133d:	83 c4 10             	add    $0x10,%esp
    return 0;
   11340:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11345:	c9                   	leave  
   11346:	c3                   	ret    

00011347 <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t * task) {
   11347:	55                   	push   %ebp
   11348:	89 e5                	mov    %esp,%ebp
   1134a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1134d:	e8 b2 1d 00 00       	call   13104 <irq_enter_protection>
   11352:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   11355:	83 ec 0c             	sub    $0xc,%esp
   11358:	ff 75 08             	push   0x8(%ebp)
   1135b:	e8 a5 02 00 00       	call   11605 <task_set_ready>
   11360:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11363:	83 ec 0c             	sub    $0xc,%esp
   11366:	ff 75 f4             	push   -0xc(%ebp)
   11369:	e8 ae 1d 00 00       	call   1311c <irq_leave_protection>
   1136e:	83 c4 10             	add    $0x10,%esp
}
   11371:	90                   	nop
   11372:	c9                   	leave  
   11373:	c3                   	ret    

00011374 <task_uninit>:

/**
 * @brief 任务任务初始时分配的各项资源
 */
void task_uninit (task_t * task) {
   11374:	55                   	push   %ebp
   11375:	89 e5                	mov    %esp,%ebp
   11377:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel) {
   1137a:	8b 45 08             	mov    0x8(%ebp),%eax
   1137d:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11384:	66 85 c0             	test   %ax,%ax
   11387:	74 19                	je     113a2 <task_uninit+0x2e>
        gdt_free_sel(task->tss_sel);
   11389:	8b 45 08             	mov    0x8(%ebp),%eax
   1138c:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11393:	0f b7 c0             	movzwl %ax,%eax
   11396:	83 ec 0c             	sub    $0xc,%esp
   11399:	50                   	push   %eax
   1139a:	e8 4e 12 00 00       	call   125ed <gdt_free_sel>
   1139f:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {
   113a2:	8b 45 08             	mov    0x8(%ebp),%eax
   113a5:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113ab:	85 c0                	test   %eax,%eax
   113ad:	74 1a                	je     113c9 <task_uninit+0x55>
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   113af:	8b 45 08             	mov    0x8(%ebp),%eax
   113b2:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113b8:	2d 00 10 00 00       	sub    $0x1000,%eax
   113bd:	83 ec 0c             	sub    $0xc,%esp
   113c0:	50                   	push   %eax
   113c1:	e8 c5 f8 ff ff       	call   10c8b <memory_free_page>
   113c6:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {
   113c9:	8b 45 08             	mov    0x8(%ebp),%eax
   113cc:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113d2:	85 c0                	test   %eax,%eax
   113d4:	74 15                	je     113eb <task_uninit+0x77>
        memory_destroy_uvm(task->tss.cr3);
   113d6:	8b 45 08             	mov    0x8(%ebp),%eax
   113d9:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113df:	83 ec 0c             	sub    $0xc,%esp
   113e2:	50                   	push   %eax
   113e3:	e8 50 f4 ff ff       	call   10838 <memory_destroy_uvm>
   113e8:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   113eb:	83 ec 04             	sub    $0x4,%esp
   113ee:	68 c8 02 00 00       	push   $0x2c8
   113f3:	6a 00                	push   $0x0
   113f5:	ff 75 08             	push   0x8(%ebp)
   113f8:	e8 68 70 00 00       	call   18465 <kernel_memset>
   113fd:	83 c4 10             	add    $0x10,%esp
}
   11400:	90                   	nop
   11401:	c9                   	leave  
   11402:	c3                   	ret    

00011403 <task_switch_from_to>:
void simple_switch (uint32_t ** from, uint32_t * to);

/**
 * @brief 切换至指定任务
 */
void task_switch_from_to (task_t * from, task_t * to) {
   11403:	55                   	push   %ebp
   11404:	89 e5                	mov    %esp,%ebp
   11406:	83 ec 08             	sub    $0x8,%esp
     switch_to_tss(to->tss_sel);
   11409:	8b 45 0c             	mov    0xc(%ebp),%eax
   1140c:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11413:	0f b7 c0             	movzwl %ax,%eax
   11416:	83 ec 0c             	sub    $0xc,%esp
   11419:	50                   	push   %eax
   1141a:	e8 08 13 00 00       	call   12727 <switch_to_tss>
   1141f:	83 c4 10             	add    $0x10,%esp
    //simple_switch(&from->stack, to->stack);
}
   11422:	90                   	nop
   11423:	c9                   	leave  
   11424:	c3                   	ret    

00011425 <task_first_init>:
 * 将init加载地址设置成和内核一起的，运行地址设置成用户进程运行的高处。
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init (void) {
   11425:	55                   	push   %ebp
   11426:	89 e5                	mov    %esp,%ebp
   11428:	83 ec 18             	sub    $0x18,%esp

    // 以下获得的是bin文件在内存中的物理地址
    extern uint8_t s_first_task[], e_first_task[];

    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1142b:	b8 47 04 06 00       	mov    $0x60447,%eax
   11430:	2d c0 00 06 00       	sub    $0x600c0,%eax
   11435:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11438:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   1143f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11442:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11445:	72 1c                	jb     11463 <task_first_init+0x3e>
   11447:	68 c7 8e 01 00       	push   $0x18ec7
   1144c:	68 f8 8f 01 00       	push   $0x18ff8
   11451:	68 b1 00 00 00       	push   $0xb1
   11456:	68 7c 8e 01 00       	push   $0x18e7c
   1145b:	e8 52 73 00 00       	call   187b2 <panic>
   11460:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   11463:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)

    // 第一个任务代码量小一些，好和栈放在1个页面呢
    // 这样就不要立即考虑还要给栈分配空间的问题
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   1146a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1146d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11470:	01 d0                	add    %edx,%eax
   11472:	83 ec 0c             	sub    $0xc,%esp
   11475:	50                   	push   %eax
   11476:	ff 75 ec             	push   -0x14(%ebp)
   11479:	6a 00                	push   $0x0
   1147b:	68 de 8e 01 00       	push   $0x18ede
   11480:	68 28 d0 01 00       	push   $0x1d028
   11485:	e8 71 fd ff ff       	call   111fb <task_init>
   1148a:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task;  // 这里不对
   1148d:	b8 47 04 06 00       	mov    $0x60447,%eax
   11492:	a3 54 d0 01 00       	mov    %eax,0x1d054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   11497:	a1 54 d0 01 00       	mov    0x1d054,%eax
   1149c:	a3 58 d0 01 00       	mov    %eax,0x1d058
    task_manager.curr_task = &task_manager.first_task;
   114a1:	c7 05 00 d0 01 00 28 	movl   $0x1d028,0x1d000
   114a8:	d0 01 00 

    // 更新页表地址为自己的
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   114ab:	a1 88 d2 01 00       	mov    0x1d288,%eax
   114b0:	83 ec 0c             	sub    $0xc,%esp
   114b3:	50                   	push   %eax
   114b4:	e8 64 fb ff ff       	call   1101d <mmu_set_page_dir>
   114b9:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start,  alloc_size, PTE_P | PTE_W | PTE_U);
   114bc:	83 ec 04             	sub    $0x4,%esp
   114bf:	6a 07                	push   $0x7
   114c1:	ff 75 f0             	push   -0x10(%ebp)
   114c4:	ff 75 ec             	push   -0x14(%ebp)
   114c7:	e8 80 f7 ff ff       	call   10c4c <memory_alloc_page_for>
   114cc:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   114cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114d5:	83 ec 04             	sub    $0x4,%esp
   114d8:	52                   	push   %edx
   114d9:	68 c0 00 06 00       	push   $0x600c0
   114de:	50                   	push   %eax
   114df:	e8 32 6f 00 00       	call   18416 <kernel_memcpy>
   114e4:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   114e7:	83 ec 0c             	sub    $0xc,%esp
   114ea:	68 28 d0 01 00       	push   $0x1d028
   114ef:	e8 53 fe ff ff       	call   11347 <task_start>
   114f4:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   114f7:	0f b7 05 d4 d2 01 00 	movzwl 0x1d2d4,%eax
   114fe:	0f b7 c0             	movzwl %ax,%eax
   11501:	83 ec 0c             	sub    $0xc,%esp
   11504:	50                   	push   %eax
   11505:	e8 cc fa ff ff       	call   10fd6 <write_tr>
   1150a:	83 c4 10             	add    $0x10,%esp
}
   1150d:	90                   	nop
   1150e:	c9                   	leave  
   1150f:	c3                   	ret    

00011510 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t * task_first_task (void) {
   11510:	55                   	push   %ebp
   11511:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11513:	b8 28 d0 01 00       	mov    $0x1d028,%eax
}
   11518:	5d                   	pop    %ebp
   11519:	c3                   	ret    

0001151a <idle_task_entry>:

/**
 * @brief 空闲任务
 */
static void idle_task_entry (void) {
   1151a:	55                   	push   %ebp
   1151b:	89 e5                	mov    %esp,%ebp
    for (;;) {
        hlt();
   1151d:	e8 ad fa ff ff       	call   10fcf <hlt>
   11522:	eb f9                	jmp    1151d <idle_task_entry+0x3>

00011524 <task_manager_init>:
}

/**
 * @brief 任务管理器初始化
 */
void task_manager_init (void) {
   11524:	55                   	push   %ebp
   11525:	89 e5                	mov    %esp,%ebp
   11527:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1152a:	83 ec 04             	sub    $0x4,%esp
   1152d:	68 00 64 01 00       	push   $0x16400
   11532:	6a 00                	push   $0x0
   11534:	68 c0 e5 01 00       	push   $0x1e5c0
   11539:	e8 27 6f 00 00       	call   18465 <kernel_memset>
   1153e:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11541:	83 ec 0c             	sub    $0xc,%esp
   11544:	68 c0 49 03 00       	push   $0x349c0
   11549:	e8 e6 67 00 00       	call   17d34 <mutex_init>
   1154e:	83 c4 10             	add    $0x10,%esp

    //数据段和代码段，使用DPL3，所有应用共用同一个
    //为调试方便，暂时使用DPL0
    int sel = gdt_alloc_desc();
   11551:	e8 d0 10 00 00       	call   12626 <gdt_alloc_desc>
   11556:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11559:	68 f2 40 00 00       	push   $0x40f2
   1155e:	6a ff                	push   $0xffffffff
   11560:	6a 00                	push   $0x0
   11562:	ff 75 f4             	push   -0xc(%ebp)
   11565:	e8 b6 0f 00 00       	call   12520 <segment_desc_set>
   1156a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   1156d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11570:	a3 bc d5 01 00       	mov    %eax,0x1d5bc

    sel = gdt_alloc_desc();
   11575:	e8 ac 10 00 00       	call   12626 <gdt_alloc_desc>
   1157a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1157d:	68 fa 40 00 00       	push   $0x40fa
   11582:	6a ff                	push   $0xffffffff
   11584:	6a 00                	push   $0x0
   11586:	ff 75 f4             	push   -0xc(%ebp)
   11589:	e8 92 0f 00 00       	call   12520 <segment_desc_set>
   1158e:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   11591:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11594:	a3 b8 d5 01 00       	mov    %eax,0x1d5b8

    // 各队列初始化
    list_init(&task_manager.ready_list);
   11599:	83 ec 0c             	sub    $0xc,%esp
   1159c:	68 04 d0 01 00       	push   $0x1d004
   115a1:	e8 55 72 00 00       	call   187fb <list_init>
   115a6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   115a9:	83 ec 0c             	sub    $0xc,%esp
   115ac:	68 10 d0 01 00       	push   $0x1d010
   115b1:	e8 45 72 00 00       	call   187fb <list_init>
   115b6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   115b9:	83 ec 0c             	sub    $0xc,%esp
   115bc:	68 1c d0 01 00       	push   $0x1d01c
   115c1:	e8 35 72 00 00       	call   187fb <list_init>
   115c6:	83 c4 10             	add    $0x10,%esp

    // 空闲任务初始化
    task_init(&task_manager.idle_task,
   115c9:	b8 1a 15 01 00       	mov    $0x1151a,%eax
   115ce:	83 ec 0c             	sub    $0xc,%esp
   115d1:	6a 00                	push   $0x0
   115d3:	50                   	push   %eax
   115d4:	6a 01                	push   $0x1
   115d6:	68 e9 8e 01 00       	push   $0x18ee9
   115db:	68 f0 d2 01 00       	push   $0x1d2f0
   115e0:	e8 16 fc ff ff       	call   111fb <task_init>
   115e5:	83 c4 20             	add    $0x20,%esp
                "idle task",
                TASK_FLAG_SYSTEM,
                (uint32_t)idle_task_entry,
                0);     // 运行于内核模式，无需指定特权级3的栈
    task_manager.curr_task = (task_t *)0;
   115e8:	c7 05 00 d0 01 00 00 	movl   $0x0,0x1d000
   115ef:	00 00 00 
    task_start(&task_manager.idle_task);
   115f2:	83 ec 0c             	sub    $0xc,%esp
   115f5:	68 f0 d2 01 00       	push   $0x1d2f0
   115fa:	e8 48 fd ff ff       	call   11347 <task_start>
   115ff:	83 c4 10             	add    $0x10,%esp
}
   11602:	90                   	nop
   11603:	c9                   	leave  
   11604:	c3                   	ret    

00011605 <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task) {
   11605:	55                   	push   %ebp
   11606:	89 e5                	mov    %esp,%ebp
   11608:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   1160b:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   11612:	74 22                	je     11636 <task_set_ready+0x31>
        list_insert_last(&task_manager.ready_list, &task->run_node);
   11614:	8b 45 08             	mov    0x8(%ebp),%eax
   11617:	05 b0 02 00 00       	add    $0x2b0,%eax
   1161c:	83 ec 08             	sub    $0x8,%esp
   1161f:	50                   	push   %eax
   11620:	68 04 d0 01 00       	push   $0x1d004
   11625:	e8 55 72 00 00       	call   1887f <list_insert_last>
   1162a:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   1162d:	8b 45 08             	mov    0x8(%ebp),%eax
   11630:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    }
}
   11636:	90                   	nop
   11637:	c9                   	leave  
   11638:	c3                   	ret    

00011639 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block (task_t *task) {
   11639:	55                   	push   %ebp
   1163a:	89 e5                	mov    %esp,%ebp
   1163c:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   1163f:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   11646:	74 19                	je     11661 <task_set_block+0x28>
        list_remove(&task_manager.ready_list, &task->run_node);
   11648:	8b 45 08             	mov    0x8(%ebp),%eax
   1164b:	05 b0 02 00 00       	add    $0x2b0,%eax
   11650:	83 ec 08             	sub    $0x8,%esp
   11653:	50                   	push   %eax
   11654:	68 04 d0 01 00       	push   $0x1d004
   11659:	e8 fd 72 00 00       	call   1895b <list_remove>
   1165e:	83 c4 10             	add    $0x10,%esp
    }
}
   11661:	90                   	nop
   11662:	c9                   	leave  
   11663:	c3                   	ret    

00011664 <task_next_run>:
/**
 * @brief 获取下一将要运行的任务
 */
static task_t * task_next_run (void) {
   11664:	55                   	push   %ebp
   11665:	89 e5                	mov    %esp,%ebp
   11667:	83 ec 10             	sub    $0x10,%esp
    // 如果没有任务，则运行空闲任务
    if (list_count(&task_manager.ready_list) == 0) {
   1166a:	68 04 d0 01 00       	push   $0x1d004
   1166f:	e8 94 f9 ff ff       	call   11008 <list_count>
   11674:	83 c4 04             	add    $0x4,%esp
   11677:	85 c0                	test   %eax,%eax
   11679:	75 07                	jne    11682 <task_next_run+0x1e>
        return &task_manager.idle_task;
   1167b:	b8 f0 d2 01 00       	mov    $0x1d2f0,%eax
   11680:	eb 25                	jmp    116a7 <task_next_run+0x43>
    }
    
    // 普通任务
    list_node_t * task_node = list_first(&task_manager.ready_list);
   11682:	68 04 d0 01 00       	push   $0x1d004
   11687:	e8 87 f9 ff ff       	call   11013 <list_first>
   1168c:	83 c4 04             	add    $0x4,%esp
   1168f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11692:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11696:	74 0a                	je     116a2 <task_next_run+0x3e>
   11698:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1169b:	2d b0 02 00 00       	sub    $0x2b0,%eax
   116a0:	eb 05                	jmp    116a7 <task_next_run+0x43>
   116a2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116a7:	c9                   	leave  
   116a8:	c3                   	ret    

000116a9 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks) {
   116a9:	55                   	push   %ebp
   116aa:	89 e5                	mov    %esp,%ebp
   116ac:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0) {
   116af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116b3:	74 2d                	je     116e2 <task_set_sleep+0x39>
        return;
    }

    task->sleep_ticks = ticks;
   116b5:	8b 55 0c             	mov    0xc(%ebp),%edx
   116b8:	8b 45 08             	mov    0x8(%ebp),%eax
   116bb:	89 50 38             	mov    %edx,0x38(%eax)
    task->state = TASK_SLEEP;
   116be:	8b 45 08             	mov    0x8(%ebp),%eax
   116c1:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   116c7:	8b 45 08             	mov    0x8(%ebp),%eax
   116ca:	05 b0 02 00 00       	add    $0x2b0,%eax
   116cf:	83 ec 08             	sub    $0x8,%esp
   116d2:	50                   	push   %eax
   116d3:	68 1c d0 01 00       	push   $0x1d01c
   116d8:	e8 a2 71 00 00       	call   1887f <list_insert_last>
   116dd:	83 c4 10             	add    $0x10,%esp
   116e0:	eb 01                	jmp    116e3 <task_set_sleep+0x3a>
        return;
   116e2:	90                   	nop
}
   116e3:	c9                   	leave  
   116e4:	c3                   	ret    

000116e5 <task_set_wakeup>:
/**
 * @brief 将任务从延时队列移除
 * 
 * @param task 
 */
void task_set_wakeup (task_t *task) {
   116e5:	55                   	push   %ebp
   116e6:	89 e5                	mov    %esp,%ebp
   116e8:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   116eb:	8b 45 08             	mov    0x8(%ebp),%eax
   116ee:	05 b0 02 00 00       	add    $0x2b0,%eax
   116f3:	83 ec 08             	sub    $0x8,%esp
   116f6:	50                   	push   %eax
   116f7:	68 1c d0 01 00       	push   $0x1d01c
   116fc:	e8 5a 72 00 00       	call   1895b <list_remove>
   11701:	83 c4 10             	add    $0x10,%esp
}
   11704:	90                   	nop
   11705:	c9                   	leave  
   11706:	c3                   	ret    

00011707 <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t * task_current (void) {
   11707:	55                   	push   %ebp
   11708:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1170a:	a1 00 d0 01 00       	mov    0x1d000,%eax
}
   1170f:	5d                   	pop    %ebp
   11710:	c3                   	ret    

00011711 <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t * task_file (int fd) {
   11711:	55                   	push   %ebp
   11712:	89 e5                	mov    %esp,%ebp
   11714:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   11717:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1171b:	78 1d                	js     1173a <task_file+0x29>
   1171d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11721:	7f 17                	jg     1173a <task_file+0x29>
        file_t * file = task_current()->file_table[fd];
   11723:	e8 df ff ff ff       	call   11707 <task_current>
   11728:	8b 55 08             	mov    0x8(%ebp),%edx
   1172b:	83 c2 10             	add    $0x10,%edx
   1172e:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11732:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   11735:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11738:	eb 05                	jmp    1173f <task_file+0x2e>
    }

    return (file_t *)0;
   1173a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1173f:	c9                   	leave  
   11740:	c3                   	ret    

00011741 <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd (file_t * file) {
   11741:	55                   	push   %ebp
   11742:	89 e5                	mov    %esp,%ebp
   11744:	83 ec 10             	sub    $0x10,%esp
    task_t * task = task_current();
   11747:	e8 bb ff ff ff       	call   11707 <task_current>
   1174c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   1174f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   11756:	eb 2f                	jmp    11787 <task_alloc_fd+0x46>
        file_t * p = task->file_table[i];
   11758:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1175b:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1175e:	83 c2 10             	add    $0x10,%edx
   11761:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11765:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0) {
   11768:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1176c:	75 15                	jne    11783 <task_alloc_fd+0x42>
            task->file_table[i] = file;
   1176e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11771:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11774:	8d 4a 10             	lea    0x10(%edx),%ecx
   11777:	8b 55 08             	mov    0x8(%ebp),%edx
   1177a:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
            return i;
   1177e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11781:	eb 0f                	jmp    11792 <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11783:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   11787:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   1178b:	7e cb                	jle    11758 <task_alloc_fd+0x17>
        }
    }

    return -1;
   1178d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11792:	c9                   	leave  
   11793:	c3                   	ret    

00011794 <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd (int fd) {
   11794:	55                   	push   %ebp
   11795:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   11797:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1179b:	78 19                	js     117b6 <task_remove_fd+0x22>
   1179d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   117a1:	7f 13                	jg     117b6 <task_remove_fd+0x22>
        task_current()->file_table[fd] = (file_t *)0;
   117a3:	e8 5f ff ff ff       	call   11707 <task_current>
   117a8:	8b 55 08             	mov    0x8(%ebp),%edx
   117ab:	83 c2 10             	add    $0x10,%edx
   117ae:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   117b5:	00 
    }
}
   117b6:	90                   	nop
   117b7:	5d                   	pop    %ebp
   117b8:	c3                   	ret    

000117b9 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield (void) {
   117b9:	55                   	push   %ebp
   117ba:	89 e5                	mov    %esp,%ebp
   117bc:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117bf:	e8 40 19 00 00       	call   13104 <irq_enter_protection>
   117c4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1) {
   117c7:	83 ec 0c             	sub    $0xc,%esp
   117ca:	68 04 d0 01 00       	push   $0x1d004
   117cf:	e8 34 f8 ff ff       	call   11008 <list_count>
   117d4:	83 c4 10             	add    $0x10,%esp
   117d7:	83 f8 01             	cmp    $0x1,%eax
   117da:	7e 29                	jle    11805 <sys_yield+0x4c>
        task_t * curr_task = task_current();
   117dc:	e8 26 ff ff ff       	call   11707 <task_current>
   117e1:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   117e4:	83 ec 0c             	sub    $0xc,%esp
   117e7:	ff 75 f0             	push   -0x10(%ebp)
   117ea:	e8 4a fe ff ff       	call   11639 <task_set_block>
   117ef:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117f2:	83 ec 0c             	sub    $0xc,%esp
   117f5:	ff 75 f0             	push   -0x10(%ebp)
   117f8:	e8 08 fe ff ff       	call   11605 <task_set_ready>
   117fd:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   11800:	e8 15 00 00 00       	call   1181a <task_dispatch>
    }
    irq_leave_protection(state);
   11805:	83 ec 0c             	sub    $0xc,%esp
   11808:	ff 75 f4             	push   -0xc(%ebp)
   1180b:	e8 0c 19 00 00       	call   1311c <irq_leave_protection>
   11810:	83 c4 10             	add    $0x10,%esp

    return 0;
   11813:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11818:	c9                   	leave  
   11819:	c3                   	ret    

0001181a <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch (void) {
   1181a:	55                   	push   %ebp
   1181b:	89 e5                	mov    %esp,%ebp
   1181d:	83 ec 18             	sub    $0x18,%esp
    task_t * to = task_next_run();
   11820:	e8 3f fe ff ff       	call   11664 <task_next_run>
   11825:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.curr_task) {
   11828:	a1 00 d0 01 00       	mov    0x1d000,%eax
   1182d:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11830:	74 21                	je     11853 <task_dispatch+0x39>
        task_t * from = task_manager.curr_task;
   11832:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11837:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_manager.curr_task = to;
   1183a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1183d:	a3 00 d0 01 00       	mov    %eax,0x1d000
        task_switch_from_to(from, to);
   11842:	83 ec 08             	sub    $0x8,%esp
   11845:	ff 75 f4             	push   -0xc(%ebp)
   11848:	ff 75 f0             	push   -0x10(%ebp)
   1184b:	e8 b3 fb ff ff       	call   11403 <task_switch_from_to>
   11850:	83 c4 10             	add    $0x10,%esp
    }
}
   11853:	90                   	nop
   11854:	c9                   	leave  
   11855:	c3                   	ret    

00011856 <task_time_tick>:

/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick (void) {
   11856:	55                   	push   %ebp
   11857:	89 e5                	mov    %esp,%ebp
   11859:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   1185c:	e8 a6 fe ff ff       	call   11707 <task_current>
   11861:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 时间片的处理
    irq_state_t state = irq_enter_protection();
   11864:	e8 9b 18 00 00       	call   13104 <irq_enter_protection>
   11869:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0) {
   1186c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1186f:	8b 40 40             	mov    0x40(%eax),%eax
   11872:	8d 50 ff             	lea    -0x1(%eax),%edx
   11875:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11878:	89 50 40             	mov    %edx,0x40(%eax)
   1187b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1187e:	8b 40 40             	mov    0x40(%eax),%eax
   11881:	85 c0                	test   %eax,%eax
   11883:	75 28                	jne    118ad <task_time_tick+0x57>
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_slice;
   11885:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11888:	8b 50 3c             	mov    0x3c(%eax),%edx
   1188b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1188e:	89 50 40             	mov    %edx,0x40(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   11891:	83 ec 0c             	sub    $0xc,%esp
   11894:	ff 75 f0             	push   -0x10(%ebp)
   11897:	e8 9d fd ff ff       	call   11639 <task_set_block>
   1189c:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1189f:	83 ec 0c             	sub    $0xc,%esp
   118a2:	ff 75 f0             	push   -0x10(%ebp)
   118a5:	e8 5b fd ff ff       	call   11605 <task_set_ready>
   118aa:	83 c4 10             	add    $0x10,%esp
    }
    
    // 睡眠处理
    list_node_t * curr = list_first(&task_manager.sleep_list);
   118ad:	83 ec 0c             	sub    $0xc,%esp
   118b0:	68 1c d0 01 00       	push   $0x1d01c
   118b5:	e8 59 f7 ff ff       	call   11013 <list_first>
   118ba:	83 c4 10             	add    $0x10,%esp
   118bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   118c0:	eb 64                	jmp    11926 <task_time_tick+0xd0>
        list_node_t * next = list_node_next(curr);
   118c2:	83 ec 0c             	sub    $0xc,%esp
   118c5:	ff 75 f4             	push   -0xc(%ebp)
   118c8:	e8 30 f7 ff ff       	call   10ffd <list_node_next>
   118cd:	83 c4 10             	add    $0x10,%esp
   118d0:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t * task = list_node_parent(curr, task_t, run_node);
   118d3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118d7:	74 0a                	je     118e3 <task_time_tick+0x8d>
   118d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118dc:	2d b0 02 00 00       	sub    $0x2b0,%eax
   118e1:	eb 05                	jmp    118e8 <task_time_tick+0x92>
   118e3:	b8 00 00 00 00       	mov    $0x0,%eax
   118e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0) {
   118eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118ee:	8b 40 38             	mov    0x38(%eax),%eax
   118f1:	8d 50 ff             	lea    -0x1(%eax),%edx
   118f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118f7:	89 50 38             	mov    %edx,0x38(%eax)
   118fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118fd:	8b 40 38             	mov    0x38(%eax),%eax
   11900:	85 c0                	test   %eax,%eax
   11902:	75 1c                	jne    11920 <task_time_tick+0xca>
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   11904:	83 ec 0c             	sub    $0xc,%esp
   11907:	ff 75 e4             	push   -0x1c(%ebp)
   1190a:	e8 d6 fd ff ff       	call   116e5 <task_set_wakeup>
   1190f:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11912:	83 ec 0c             	sub    $0xc,%esp
   11915:	ff 75 e4             	push   -0x1c(%ebp)
   11918:	e8 e8 fc ff ff       	call   11605 <task_set_ready>
   1191d:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11920:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11923:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   11926:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1192a:	75 96                	jne    118c2 <task_time_tick+0x6c>
    }

    task_dispatch();
   1192c:	e8 e9 fe ff ff       	call   1181a <task_dispatch>
    irq_leave_protection(state);
   11931:	83 ec 0c             	sub    $0xc,%esp
   11934:	ff 75 ec             	push   -0x14(%ebp)
   11937:	e8 e0 17 00 00       	call   1311c <irq_leave_protection>
   1193c:	83 c4 10             	add    $0x10,%esp
}
   1193f:	90                   	nop
   11940:	c9                   	leave  
   11941:	c3                   	ret    

00011942 <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t * alloc_task (void) {
   11942:	55                   	push   %ebp
   11943:	89 e5                	mov    %esp,%ebp
   11945:	83 ec 18             	sub    $0x18,%esp
    task_t * task = (task_t *)0;
   11948:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   1194f:	83 ec 0c             	sub    $0xc,%esp
   11952:	68 c0 49 03 00       	push   $0x349c0
   11957:	e8 06 64 00 00       	call   17d62 <mutex_lock>
   1195c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++) {
   1195f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11966:	eb 28                	jmp    11990 <alloc_task+0x4e>
        task_t * curr = task_table + i;
   11968:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1196b:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11971:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   11976:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == 0) {
   11979:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1197c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   11980:	84 c0                	test   %al,%al
   11982:	75 08                	jne    1198c <alloc_task+0x4a>
            task = curr;
   11984:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11987:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1198a:	eb 0a                	jmp    11996 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++) {
   1198c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11990:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11994:	7e d2                	jle    11968 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   11996:	83 ec 0c             	sub    $0xc,%esp
   11999:	68 c0 49 03 00       	push   $0x349c0
   1199e:	e8 56 64 00 00       	call   17df9 <mutex_unlock>
   119a3:	83 c4 10             	add    $0x10,%esp

    return task;
   119a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   119a9:	c9                   	leave  
   119aa:	c3                   	ret    

000119ab <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task (task_t * task) {
   119ab:	55                   	push   %ebp
   119ac:	89 e5                	mov    %esp,%ebp
   119ae:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   119b1:	83 ec 0c             	sub    $0xc,%esp
   119b4:	68 c0 49 03 00       	push   $0x349c0
   119b9:	e8 a4 63 00 00       	call   17d62 <mutex_lock>
   119be:	83 c4 10             	add    $0x10,%esp
    task->name[0] = 0;
   119c1:	8b 45 08             	mov    0x8(%ebp),%eax
   119c4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   119c8:	83 ec 0c             	sub    $0xc,%esp
   119cb:	68 c0 49 03 00       	push   $0x349c0
   119d0:	e8 24 64 00 00       	call   17df9 <mutex_unlock>
   119d5:	83 c4 10             	add    $0x10,%esp
}
   119d8:	90                   	nop
   119d9:	c9                   	leave  
   119da:	c3                   	ret    

000119db <sys_msleep>:
/**
 * @brief 任务进入睡眠状态
 * 
 * @param ms 
 */
void sys_msleep (uint32_t ms) {
   119db:	55                   	push   %ebp
   119dc:	89 e5                	mov    %esp,%ebp
   119de:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS) {
   119e1:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   119e5:	77 07                	ja     119ee <sys_msleep+0x13>
        ms = OS_TICK_MS;
   119e7:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   119ee:	e8 11 17 00 00       	call   13104 <irq_enter_protection>
   119f3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   119f6:	a1 00 d0 01 00       	mov    0x1d000,%eax
   119fb:	83 ec 0c             	sub    $0xc,%esp
   119fe:	50                   	push   %eax
   119ff:	e8 35 fc ff ff       	call   11639 <task_set_block>
   11a04:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1))/ OS_TICK_MS);
   11a07:	8b 45 08             	mov    0x8(%ebp),%eax
   11a0a:	83 c0 09             	add    $0x9,%eax
   11a0d:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11a12:	f7 e2                	mul    %edx
   11a14:	c1 ea 03             	shr    $0x3,%edx
   11a17:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a1c:	83 ec 08             	sub    $0x8,%esp
   11a1f:	52                   	push   %edx
   11a20:	50                   	push   %eax
   11a21:	e8 83 fc ff ff       	call   116a9 <task_set_sleep>
   11a26:	83 c4 10             	add    $0x10,%esp
    
    // 进行一次调度
    task_dispatch();
   11a29:	e8 ec fd ff ff       	call   1181a <task_dispatch>

    irq_leave_protection(state);
   11a2e:	83 ec 0c             	sub    $0xc,%esp
   11a31:	ff 75 f4             	push   -0xc(%ebp)
   11a34:	e8 e3 16 00 00       	call   1311c <irq_leave_protection>
   11a39:	83 c4 10             	add    $0x10,%esp
}
   11a3c:	90                   	nop
   11a3d:	c9                   	leave  
   11a3e:	c3                   	ret    

00011a3f <copy_opened_files>:


/**
 * @brief 从当前进程中拷贝已经打开的文件列表
 */
static void copy_opened_files(task_t * child_task) {
   11a3f:	55                   	push   %ebp
   11a40:	89 e5                	mov    %esp,%ebp
   11a42:	83 ec 18             	sub    $0x18,%esp
    task_t * parent = task_current();
   11a45:	e8 bd fc ff ff       	call   11707 <task_current>
   11a4a:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a4d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a54:	eb 42                	jmp    11a98 <copy_opened_files+0x59>
        file_t * file = parent->file_table[i];
   11a56:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a59:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a5c:	83 c2 10             	add    $0x10,%edx
   11a5f:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11a63:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file) {
   11a66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11a6a:	74 28                	je     11a94 <copy_opened_files+0x55>
            file_inc_ref(file);
   11a6c:	83 ec 0c             	sub    $0xc,%esp
   11a6f:	ff 75 ec             	push   -0x14(%ebp)
   11a72:	e8 00 55 00 00       	call   16f77 <file_inc_ref>
   11a77:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   11a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a7d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a80:	83 c2 10             	add    $0x10,%edx
   11a83:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
   11a87:	8b 45 08             	mov    0x8(%ebp),%eax
   11a8a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11a8d:	83 c1 10             	add    $0x10,%ecx
   11a90:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a94:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a98:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11a9c:	7e b8                	jle    11a56 <copy_opened_files+0x17>
        }
    }
}
   11a9e:	90                   	nop
   11a9f:	90                   	nop
   11aa0:	c9                   	leave  
   11aa1:	c3                   	ret    

00011aa2 <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork (void) {
   11aa2:	55                   	push   %ebp
   11aa3:	89 e5                	mov    %esp,%ebp
   11aa5:	83 ec 28             	sub    $0x28,%esp
    task_t * parent_task = task_current();
   11aa8:	e8 5a fc ff ff       	call   11707 <task_current>
   11aad:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 分配任务结构
    task_t * child_task = alloc_task();
   11ab0:	e8 8d fe ff ff       	call   11942 <alloc_task>
   11ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0) {
   11ab8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11abc:	0f 84 4d 01 00 00    	je     11c0f <sys_fork+0x16d>
        goto fork_failed;
    }

    syscall_frame_t * frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11ac2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ac5:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   11acb:	83 e8 58             	sub    $0x58,%eax
   11ace:	89 45 ec             	mov    %eax,-0x14(%ebp)

    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT);
   11ad1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ad4:	8b 40 50             	mov    0x50(%eax),%eax
   11ad7:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
   11ada:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11add:	8b 40 34             	mov    0x34(%eax),%eax
   11ae0:	89 c1                	mov    %eax,%ecx
   11ae2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ae5:	83 c0 04             	add    $0x4,%eax
   11ae8:	83 ec 0c             	sub    $0xc,%esp
   11aeb:	52                   	push   %edx
   11aec:	51                   	push   %ecx
   11aed:	6a 00                	push   $0x0
   11aef:	50                   	push   %eax
   11af0:	ff 75 f0             	push   -0x10(%ebp)
   11af3:	e8 03 f7 ff ff       	call   111fb <task_init>
   11af8:	83 c4 20             	add    $0x20,%esp
   11afb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11afe:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11b02:	0f 88 0a 01 00 00    	js     11c12 <sys_fork+0x170>
        goto fork_failed;
    }

    // 拷贝打开的文件
    copy_opened_files(child_task);
   11b08:	83 ec 0c             	sub    $0xc,%esp
   11b0b:	ff 75 f0             	push   -0x10(%ebp)
   11b0e:	e8 2c ff ff ff       	call   11a3f <copy_opened_files>
   11b13:	83 c4 10             	add    $0x10,%esp

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t * tss = &child_task->tss;
   11b16:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b19:	05 44 02 00 00       	add    $0x244,%eax
   11b1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       // 子进程返回0
   11b21:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b24:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11b2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b2e:	8b 40 24             	mov    0x24(%eax),%eax
   11b31:	89 c2                	mov    %eax,%edx
   11b33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b36:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11b39:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b3c:	8b 40 2c             	mov    0x2c(%eax),%eax
   11b3f:	89 c2                	mov    %eax,%edx
   11b41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b44:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b4a:	8b 40 28             	mov    0x28(%eax),%eax
   11b4d:	89 c2                	mov    %eax,%edx
   11b4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b52:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11b55:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b58:	8b 40 18             	mov    0x18(%eax),%eax
   11b5b:	89 c2                	mov    %eax,%edx
   11b5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b60:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11b63:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b66:	8b 40 14             	mov    0x14(%eax),%eax
   11b69:	89 c2                	mov    %eax,%edx
   11b6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b6e:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11b71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b74:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b77:	89 c2                	mov    %eax,%edx
   11b79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b7c:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11b7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b82:	8b 40 38             	mov    0x38(%eax),%eax
   11b85:	89 c2                	mov    %eax,%edx
   11b87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b8a:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b90:	8b 40 10             	mov    0x10(%eax),%eax
   11b93:	89 c2                	mov    %eax,%edx
   11b95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b98:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11b9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b9e:	8b 40 0c             	mov    0xc(%eax),%eax
   11ba1:	89 c2                	mov    %eax,%edx
   11ba3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ba6:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11ba9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bac:	8b 40 08             	mov    0x8(%eax),%eax
   11baf:	89 c2                	mov    %eax,%edx
   11bb1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bb4:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11bb7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bba:	8b 40 04             	mov    0x4(%eax),%eax
   11bbd:	89 c2                	mov    %eax,%edx
   11bbf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bc2:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11bc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bc8:	8b 00                	mov    (%eax),%eax
   11bca:	89 c2                	mov    %eax,%edx
   11bcc:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bcf:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11bd8:	89 50 28             	mov    %edx,0x28(%eax)

    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0) {
   11bdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bde:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11be4:	83 ec 0c             	sub    $0xc,%esp
   11be7:	50                   	push   %eax
   11be8:	e8 5a ed ff ff       	call   10947 <memory_copy_uvm>
   11bed:	83 c4 10             	add    $0x10,%esp
   11bf0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11bf3:	89 82 60 02 00 00    	mov    %eax,0x260(%edx)
        goto fork_failed;
    }

    // 创建成功，返回子进程的pid
    task_start(child_task);
   11bf9:	83 ec 0c             	sub    $0xc,%esp
   11bfc:	ff 75 f0             	push   -0x10(%ebp)
   11bff:	e8 43 f7 ff ff       	call   11347 <task_start>
   11c04:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11c07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c0a:	8b 40 24             	mov    0x24(%eax),%eax
   11c0d:	eb 2b                	jmp    11c3a <sys_fork+0x198>
        goto fork_failed;
   11c0f:	90                   	nop
   11c10:	eb 01                	jmp    11c13 <sys_fork+0x171>
        goto fork_failed;
   11c12:	90                   	nop
fork_failed:
    if (child_task) {
   11c13:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c17:	74 1c                	je     11c35 <sys_fork+0x193>
        task_uninit (child_task);
   11c19:	83 ec 0c             	sub    $0xc,%esp
   11c1c:	ff 75 f0             	push   -0x10(%ebp)
   11c1f:	e8 50 f7 ff ff       	call   11374 <task_uninit>
   11c24:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11c27:	83 ec 0c             	sub    $0xc,%esp
   11c2a:	ff 75 f0             	push   -0x10(%ebp)
   11c2d:	e8 79 fd ff ff       	call   119ab <free_task>
   11c32:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11c35:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c3a:	c9                   	leave  
   11c3b:	c3                   	ret    

00011c3c <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr * phdr, uint32_t page_dir) {
   11c3c:	55                   	push   %ebp
   11c3d:	89 e5                	mov    %esp,%ebp
   11c3f:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11c42:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c45:	8b 40 08             	mov    0x8(%eax),%eax
   11c48:	25 ff 0f 00 00       	and    $0xfff,%eax
   11c4d:	85 c0                	test   %eax,%eax
   11c4f:	74 1c                	je     11c6d <load_phdr+0x31>
   11c51:	68 f4 8e 01 00       	push   $0x18ef4
   11c56:	68 08 90 01 00       	push   $0x19008
   11c5b:	68 2e 02 00 00       	push   $0x22e
   11c60:	68 7c 8e 01 00       	push   $0x18e7c
   11c65:	e8 48 6b 00 00       	call   187b2 <panic>
   11c6a:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11c6d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c70:	8b 50 14             	mov    0x14(%eax),%edx
   11c73:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c76:	8b 40 08             	mov    0x8(%eax),%eax
   11c79:	6a 07                	push   $0x7
   11c7b:	52                   	push   %edx
   11c7c:	50                   	push   %eax
   11c7d:	ff 75 10             	push   0x10(%ebp)
   11c80:	e8 de ee ff ff       	call   10b63 <memory_alloc_for_page_dir>
   11c85:	83 c4 10             	add    $0x10,%esp
   11c88:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   11c8b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c8f:	79 1a                	jns    11cab <load_phdr+0x6f>
        log_printf("no memory");
   11c91:	83 ec 0c             	sub    $0xc,%esp
   11c94:	68 1f 8f 01 00       	push   $0x18f1f
   11c99:	e8 71 6d 00 00       	call   18a0f <log_printf>
   11c9e:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ca1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ca6:	e9 b5 00 00 00       	jmp    11d60 <load_phdr+0x124>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0) {
   11cab:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cae:	8b 40 04             	mov    0x4(%eax),%eax
   11cb1:	83 ec 04             	sub    $0x4,%esp
   11cb4:	6a 00                	push   $0x0
   11cb6:	50                   	push   %eax
   11cb7:	ff 75 08             	push   0x8(%ebp)
   11cba:	e8 b5 5b 00 00       	call   17874 <sys_lseek>
   11cbf:	83 c4 10             	add    $0x10,%esp
   11cc2:	85 c0                	test   %eax,%eax
   11cc4:	79 1a                	jns    11ce0 <load_phdr+0xa4>
        log_printf("read file failed");
   11cc6:	83 ec 0c             	sub    $0xc,%esp
   11cc9:	68 29 8f 01 00       	push   $0x18f29
   11cce:	e8 3c 6d 00 00       	call   18a0f <log_printf>
   11cd3:	83 c4 10             	add    $0x10,%esp
        return -1;
   11cd6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cdb:	e9 80 00 00 00       	jmp    11d60 <load_phdr+0x124>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr;
   11ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ce3:	8b 40 08             	mov    0x8(%eax),%eax
   11ce6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11ce9:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cec:	8b 40 10             	mov    0x10(%eax),%eax
   11cef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0) {
   11cf2:	eb 61                	jmp    11d55 <load_phdr+0x119>
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11cf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11cf7:	ba 00 10 00 00       	mov    $0x1000,%edx
   11cfc:	39 d0                	cmp    %edx,%eax
   11cfe:	0f 47 c2             	cmova  %edx,%eax
   11d01:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11d04:	83 ec 08             	sub    $0x8,%esp
   11d07:	ff 75 f4             	push   -0xc(%ebp)
   11d0a:	ff 75 10             	push   0x10(%ebp)
   11d0d:	e8 88 ed ff ff       	call   10a9a <memory_get_paddr>
   11d12:	83 c4 10             	add    $0x10,%esp
   11d15:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) <  curr_size) {
   11d18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d1b:	83 ec 04             	sub    $0x4,%esp
   11d1e:	ff 75 e8             	push   -0x18(%ebp)
   11d21:	50                   	push   %eax
   11d22:	ff 75 08             	push   0x8(%ebp)
   11d25:	e8 c1 59 00 00       	call   176eb <sys_read>
   11d2a:	83 c4 10             	add    $0x10,%esp
   11d2d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11d30:	7e 17                	jle    11d49 <load_phdr+0x10d>
            log_printf("read file failed");
   11d32:	83 ec 0c             	sub    $0xc,%esp
   11d35:	68 29 8f 01 00       	push   $0x18f29
   11d3a:	e8 d0 6c 00 00       	call   18a0f <log_printf>
   11d3f:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d42:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d47:	eb 17                	jmp    11d60 <load_phdr+0x124>
        }

        size -= curr_size;
   11d49:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d4c:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11d4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d52:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0) {
   11d55:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d59:	75 99                	jne    11cf4 <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11d5b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d60:	c9                   	leave  
   11d61:	c3                   	ret    

00011d62 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file (task_t * task, const char * name, uint32_t page_dir) {
   11d62:	55                   	push   %ebp
   11d63:	89 e5                	mov    %esp,%ebp
   11d65:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    // 以只读方式打开
    int file = sys_open(name, 0);   // todo: flags暂时用0替代
   11d68:	83 ec 08             	sub    $0x8,%esp
   11d6b:	6a 00                	push   $0x0
   11d6d:	ff 75 0c             	push   0xc(%ebp)
   11d70:	e8 d2 56 00 00       	call   17447 <sys_open>
   11d75:	83 c4 10             	add    $0x10,%esp
   11d78:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11d7b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d7f:	79 18                	jns    11d99 <load_elf_file+0x37>
        log_printf("open file failed.%s", name);
   11d81:	83 ec 08             	sub    $0x8,%esp
   11d84:	ff 75 0c             	push   0xc(%ebp)
   11d87:	68 3a 8f 01 00       	push   $0x18f3a
   11d8c:	e8 7e 6c 00 00       	call   18a0f <log_printf>
   11d91:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d94:	e9 c1 01 00 00       	jmp    11f5a <load_elf_file+0x1f8>
    }

    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11d99:	83 ec 04             	sub    $0x4,%esp
   11d9c:	6a 34                	push   $0x34
   11d9e:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11da1:	50                   	push   %eax
   11da2:	ff 75 ec             	push   -0x14(%ebp)
   11da5:	e8 41 59 00 00       	call   176eb <sys_read>
   11daa:	83 c4 10             	add    $0x10,%esp
   11dad:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11db0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11db3:	83 f8 33             	cmp    $0x33,%eax
   11db6:	77 18                	ja     11dd0 <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11db8:	83 ec 08             	sub    $0x8,%esp
   11dbb:	ff 75 e8             	push   -0x18(%ebp)
   11dbe:	68 4e 8f 01 00       	push   $0x18f4e
   11dc3:	e8 47 6c 00 00       	call   18a0f <log_printf>
   11dc8:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dcb:	e9 8a 01 00 00       	jmp    11f5a <load_elf_file+0x1f8>
    }

    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E')
   11dd0:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11dd4:	3c 7f                	cmp    $0x7f,%al
   11dd6:	75 18                	jne    11df0 <load_elf_file+0x8e>
   11dd8:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11ddc:	3c 45                	cmp    $0x45,%al
   11dde:	75 10                	jne    11df0 <load_elf_file+0x8e>
        || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F')) {
   11de0:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11de4:	3c 4c                	cmp    $0x4c,%al
   11de6:	75 08                	jne    11df0 <load_elf_file+0x8e>
   11de8:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11dec:	3c 46                	cmp    $0x46,%al
   11dee:	74 15                	je     11e05 <load_elf_file+0xa3>
        log_printf("check elf indent failed.");
   11df0:	83 ec 0c             	sub    $0xc,%esp
   11df3:	68 69 8f 01 00       	push   $0x18f69
   11df8:	e8 12 6c 00 00       	call   18a0f <log_printf>
   11dfd:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e00:	e9 55 01 00 00       	jmp    11f5a <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0)) {
   11e05:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11e09:	66 83 f8 02          	cmp    $0x2,%ax
   11e0d:	75 11                	jne    11e20 <load_elf_file+0xbe>
   11e0f:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11e13:	66 83 f8 03          	cmp    $0x3,%ax
   11e17:	75 07                	jne    11e20 <load_elf_file+0xbe>
   11e19:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e1c:	85 c0                	test   %eax,%eax
   11e1e:	75 15                	jne    11e35 <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11e20:	83 ec 0c             	sub    $0xc,%esp
   11e23:	68 84 8f 01 00       	push   $0x18f84
   11e28:	e8 e2 6b 00 00       	call   18a0f <log_printf>
   11e2d:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e30:	e9 25 01 00 00       	jmp    11f5a <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11e35:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e39:	66 85 c0             	test   %ax,%ax
   11e3c:	74 07                	je     11e45 <load_elf_file+0xe3>
   11e3e:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e41:	85 c0                	test   %eax,%eax
   11e43:	75 15                	jne    11e5a <load_elf_file+0xf8>
        log_printf("none programe header");
   11e45:	83 ec 0c             	sub    $0xc,%esp
   11e48:	68 a4 8f 01 00       	push   $0x18fa4
   11e4d:	e8 bd 6b 00 00       	call   18a0f <log_printf>
   11e52:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e55:	e9 00 01 00 00       	jmp    11f5a <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11e5a:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e5d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11e60:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e67:	e9 cb 00 00 00       	jmp    11f37 <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11e6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e6f:	83 ec 04             	sub    $0x4,%esp
   11e72:	6a 00                	push   $0x0
   11e74:	50                   	push   %eax
   11e75:	ff 75 ec             	push   -0x14(%ebp)
   11e78:	e8 f7 59 00 00       	call   17874 <sys_lseek>
   11e7d:	83 c4 10             	add    $0x10,%esp
   11e80:	85 c0                	test   %eax,%eax
   11e82:	79 15                	jns    11e99 <load_elf_file+0x137>
            log_printf("read file failed");
   11e84:	83 ec 0c             	sub    $0xc,%esp
   11e87:	68 29 8f 01 00       	push   $0x18f29
   11e8c:	e8 7e 6b 00 00       	call   18a0f <log_printf>
   11e91:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e94:	e9 c1 00 00 00       	jmp    11f5a <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11e99:	83 ec 04             	sub    $0x4,%esp
   11e9c:	6a 20                	push   $0x20
   11e9e:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ea1:	50                   	push   %eax
   11ea2:	ff 75 ec             	push   -0x14(%ebp)
   11ea5:	e8 41 58 00 00       	call   176eb <sys_read>
   11eaa:	83 c4 10             	add    $0x10,%esp
   11ead:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11eb0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11eb3:	83 f8 1f             	cmp    $0x1f,%eax
   11eb6:	77 15                	ja     11ecd <load_elf_file+0x16b>
            log_printf("read file failed");
   11eb8:	83 ec 0c             	sub    $0xc,%esp
   11ebb:	68 29 8f 01 00       	push   $0x18f29
   11ec0:	e8 4a 6b 00 00       	call   18a0f <log_printf>
   11ec5:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ec8:	e9 8d 00 00 00       	jmp    11f5a <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE)) {
   11ecd:	8b 45 90             	mov    -0x70(%ebp),%eax
   11ed0:	83 f8 01             	cmp    $0x1,%eax
   11ed3:	75 53                	jne    11f28 <load_elf_file+0x1c6>
   11ed5:	8b 45 98             	mov    -0x68(%ebp),%eax
   11ed8:	85 c0                	test   %eax,%eax
   11eda:	79 4c                	jns    11f28 <load_elf_file+0x1c6>
           continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11edc:	83 ec 04             	sub    $0x4,%esp
   11edf:	ff 75 10             	push   0x10(%ebp)
   11ee2:	8d 45 90             	lea    -0x70(%ebp),%eax
   11ee5:	50                   	push   %eax
   11ee6:	ff 75 ec             	push   -0x14(%ebp)
   11ee9:	e8 4e fd ff ff       	call   11c3c <load_phdr>
   11eee:	83 c4 10             	add    $0x10,%esp
   11ef1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11ef4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11ef8:	79 12                	jns    11f0c <load_elf_file+0x1aa>
            log_printf("load program hdr failed");
   11efa:	83 ec 0c             	sub    $0xc,%esp
   11efd:	68 b9 8f 01 00       	push   $0x18fb9
   11f02:	e8 08 6b 00 00       	call   18a0f <log_printf>
   11f07:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f0a:	eb 4e                	jmp    11f5a <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11f0c:	8b 55 98             	mov    -0x68(%ebp),%edx
   11f0f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11f12:	01 c2                	add    %eax,%edx
   11f14:	8b 45 08             	mov    0x8(%ebp),%eax
   11f17:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11f1a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f1d:	8b 50 2c             	mov    0x2c(%eax),%edx
   11f20:	8b 45 08             	mov    0x8(%ebp),%eax
   11f23:	89 50 30             	mov    %edx,0x30(%eax)
   11f26:	eb 01                	jmp    11f29 <load_elf_file+0x1c7>
           continue;
   11f28:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11f29:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f2d:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f31:	0f b7 c0             	movzwl %ax,%eax
   11f34:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f37:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f3b:	0f b7 c0             	movzwl %ax,%eax
   11f3e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f41:	0f 8c 25 ff ff ff    	jl     11e6c <load_elf_file+0x10a>
   }

    sys_close(file);
   11f47:	83 ec 0c             	sub    $0xc,%esp
   11f4a:	ff 75 ec             	push   -0x14(%ebp)
   11f4d:	e8 b7 59 00 00       	call   17909 <sys_close>
   11f52:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f55:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f58:	eb 19                	jmp    11f73 <load_elf_file+0x211>

load_failed:
    if (file >= 0) {
   11f5a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f5e:	78 0e                	js     11f6e <load_elf_file+0x20c>
        sys_close(file);
   11f60:	83 ec 0c             	sub    $0xc,%esp
   11f63:	ff 75 ec             	push   -0x14(%ebp)
   11f66:	e8 9e 59 00 00       	call   17909 <sys_close>
   11f6b:	83 c4 10             	add    $0x10,%esp
    }

    return 0;
   11f6e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f73:	c9                   	leave  
   11f74:	c3                   	ret    

00011f75 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args (char * to, uint32_t page_dir, int argc, char **argv) {
   11f75:	55                   	push   %ebp
   11f76:	89 e5                	mov    %esp,%ebp
   11f78:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11f7b:	8b 45 10             	mov    0x10(%ebp),%eax
   11f7e:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11f81:	8b 45 08             	mov    0x8(%ebp),%eax
   11f84:	83 c0 0c             	add    $0xc,%eax
   11f87:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char * dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1);   // 留出结束符
   11f8a:	8b 45 10             	mov    0x10(%ebp),%eax
   11f8d:	83 c0 04             	add    $0x4,%eax
   11f90:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f97:	8b 45 08             	mov    0x8(%ebp),%eax
   11f9a:	01 d0                	add    %edx,%eax
   11f9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    // argv表
    char ** dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11f9f:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa2:	83 c0 0c             	add    $0xc,%eax
   11fa5:	83 ec 08             	sub    $0x8,%esp
   11fa8:	50                   	push   %eax
   11fa9:	ff 75 0c             	push   0xc(%ebp)
   11fac:	e8 e9 ea ff ff       	call   10a9a <memory_get_paddr>
   11fb1:	83 c4 10             	add    $0x10,%esp
   11fb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11fb7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fbb:	75 1c                	jne    11fd9 <copy_args+0x64>
   11fbd:	68 d1 8f 01 00       	push   $0x18fd1
   11fc2:	68 14 90 01 00       	push   $0x19014
   11fc7:	68 bb 02 00 00       	push   $0x2bb
   11fcc:	68 7c 8e 01 00       	push   $0x18e7c
   11fd1:	e8 dc 67 00 00       	call   187b2 <panic>
   11fd6:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++) {
   11fd9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fe0:	e9 82 00 00 00       	jmp    12067 <copy_args+0xf2>
        char * from = argv[i];
   11fe5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fe8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fef:	8b 45 14             	mov    0x14(%ebp),%eax
   11ff2:	01 d0                	add    %edx,%eax
   11ff4:	8b 00                	mov    (%eax),%eax
   11ff6:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1;   // 包含结束符
   11ff9:	83 ec 0c             	sub    $0xc,%esp
   11ffc:	ff 75 e8             	push   -0x18(%ebp)
   11fff:	e8 59 63 00 00       	call   1835d <kernel_strlen>
   12004:	83 c4 10             	add    $0x10,%esp
   12007:	83 c0 01             	add    $0x1,%eax
   1200a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   1200d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   12010:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12013:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12016:	51                   	push   %ecx
   12017:	52                   	push   %edx
   12018:	ff 75 0c             	push   0xc(%ebp)
   1201b:	50                   	push   %eax
   1201c:	e8 bf ea ff ff       	call   10ae0 <memory_copy_uvm_data>
   12021:	83 c4 10             	add    $0x10,%esp
   12024:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   12027:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1202b:	79 1c                	jns    12049 <copy_args+0xd4>
   1202d:	68 e3 8f 01 00       	push   $0x18fe3
   12032:	68 14 90 01 00       	push   $0x19014
   12037:	68 c3 02 00 00       	push   $0x2c3
   1203c:	68 7c 8e 01 00       	push   $0x18e7c
   12041:	e8 6c 67 00 00       	call   187b2 <panic>
   12046:	83 c4 10             	add    $0x10,%esp

        // 关联ar
        dest_argv_tb[i] = dest_arg;
   12049:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1204c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12053:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12056:	01 c2                	add    %eax,%edx
   12058:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1205b:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   1205d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12060:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++) {
   12063:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12067:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1206a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1206d:	0f 8c 72 ff ff ff    	jl     11fe5 <copy_args+0x70>
    }

    // 可能存在无参的情况，此时不需要写入
    if (argc) {
   12073:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12077:	74 15                	je     1208e <copy_args+0x119>
        dest_argv_tb[argc] = '\0';
   12079:	8b 45 10             	mov    0x10(%ebp),%eax
   1207c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   12083:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12086:	01 d0                	add    %edx,%eax
   12088:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

     // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   1208e:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   12091:	8b 45 08             	mov    0x8(%ebp),%eax
   12094:	6a 0c                	push   $0xc
   12096:	52                   	push   %edx
   12097:	ff 75 0c             	push   0xc(%ebp)
   1209a:	50                   	push   %eax
   1209b:	e8 40 ea ff ff       	call   10ae0 <memory_copy_uvm_data>
   120a0:	83 c4 10             	add    $0x10,%esp
}
   120a3:	c9                   	leave  
   120a4:	c3                   	ret    

000120a5 <sys_execve>:
/**
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env) {
   120a5:	55                   	push   %ebp
   120a6:	89 e5                	mov    %esp,%ebp
   120a8:	83 ec 28             	sub    $0x28,%esp
    task_t * task = task_current();
   120ab:	e8 57 f6 ff ff       	call   11707 <task_current>
   120b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   120b3:	83 ec 0c             	sub    $0xc,%esp
   120b6:	ff 75 08             	push   0x8(%ebp)
   120b9:	e8 a2 61 00 00       	call   18260 <get_file_name>
   120be:	83 c4 10             	add    $0x10,%esp
   120c1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   120c4:	83 c2 04             	add    $0x4,%edx
   120c7:	83 ec 04             	sub    $0x4,%esp
   120ca:	6a 20                	push   $0x20
   120cc:	50                   	push   %eax
   120cd:	52                   	push   %edx
   120ce:	e8 1a 62 00 00       	call   182ed <kernel_strncpy>
   120d3:	83 c4 10             	add    $0x10,%esp

    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   120d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120d9:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   120e2:	e8 cc e6 ff ff       	call   107b3 <memory_create_uvm>
   120e7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir) {
   120ea:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120ee:	0f 84 2d 01 00 00    	je     12221 <sys_execve+0x17c>
        goto exec_failed;
    }

    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir);    // 暂时置用task->name表示
   120f4:	83 ec 04             	sub    $0x4,%esp
   120f7:	ff 75 ec             	push   -0x14(%ebp)
   120fa:	ff 75 08             	push   0x8(%ebp)
   120fd:	ff 75 f4             	push   -0xc(%ebp)
   12100:	e8 5d fc ff ff       	call   11d62 <load_elf_file>
   12105:	83 c4 10             	add    $0x10,%esp
   12108:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0) {
   1210b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1210f:	0f 84 0f 01 00 00    	je     12224 <sys_execve+0x17f>
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;    // 预留一部分参数空间
   12115:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   1211c:	6a 07                	push   $0x7
   1211e:	68 00 40 1f 00       	push   $0x1f4000
   12123:	68 00 c0 e0 df       	push   $0xdfe0c000
   12128:	ff 75 ec             	push   -0x14(%ebp)
   1212b:	e8 33 ea ff ff       	call   10b63 <memory_alloc_for_page_dir>
   12130:	83 c4 10             	add    $0x10,%esp
   12133:	89 45 e0             	mov    %eax,-0x20(%ebp)
                            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                            MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0) {
   12136:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1213a:	0f 88 e7 00 00 00    	js     12227 <sys_execve+0x182>
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   12140:	83 ec 0c             	sub    $0xc,%esp
   12143:	ff 75 0c             	push   0xc(%ebp)
   12146:	e8 e8 60 00 00       	call   18233 <strings_count>
   1214b:	83 c4 10             	add    $0x10,%esp
   1214e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12151:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12154:	ff 75 0c             	push   0xc(%ebp)
   12157:	ff 75 dc             	push   -0x24(%ebp)
   1215a:	ff 75 ec             	push   -0x14(%ebp)
   1215d:	50                   	push   %eax
   1215e:	e8 12 fe ff ff       	call   11f75 <copy_args>
   12163:	83 c4 10             	add    $0x10,%esp
   12166:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0) {
   12169:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1216d:	0f 88 b7 00 00 00    	js     1222a <sys_execve+0x185>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t * frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   12173:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12176:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   1217c:	83 e8 58             	sub    $0x58,%eax
   1217f:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   12182:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12185:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12188:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1218b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1218e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12195:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12198:	8b 50 28             	mov    0x28(%eax),%edx
   1219b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1219e:	89 50 2c             	mov    %edx,0x2c(%eax)
   121a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121a4:	8b 50 2c             	mov    0x2c(%eax),%edx
   121a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121aa:	89 50 24             	mov    %edx,0x24(%eax)
   121ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b0:	8b 50 24             	mov    0x24(%eax),%edx
   121b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b6:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   121b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121bc:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   121c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c6:	8b 50 1c             	mov    0x1c(%eax),%edx
   121c9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121cc:	89 50 14             	mov    %edx,0x14(%eax)
   121cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121d2:	8b 50 14             	mov    0x14(%eax),%edx
   121d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121d8:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT| EFLAGS_IF;  // 段寄存器无需修改
   121db:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121de:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t)*SYSCALL_PARAM_COUNT;
   121e4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   121e7:	83 e8 14             	sub    $0x14,%eax
   121ea:	89 c2                	mov    %eax,%edx
   121ec:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ef:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   121f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   121f5:	8b 55 ec             	mov    -0x14(%ebp),%edx
   121f8:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    mmu_set_page_dir(new_page_dir);   // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   121fe:	83 ec 0c             	sub    $0xc,%esp
   12201:	ff 75 ec             	push   -0x14(%ebp)
   12204:	e8 14 ee ff ff       	call   1101d <mmu_set_page_dir>
   12209:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir);            // 再释放掉了原进程的内容空间
   1220c:	83 ec 0c             	sub    $0xc,%esp
   1220f:	ff 75 f0             	push   -0x10(%ebp)
   12212:	e8 21 e6 ff ff       	call   10838 <memory_destroy_uvm>
   12217:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return  0;
   1221a:	b8 00 00 00 00       	mov    $0x0,%eax
   1221f:	eb 3d                	jmp    1225e <sys_execve+0x1b9>
        goto exec_failed;
   12221:	90                   	nop
   12222:	eb 07                	jmp    1222b <sys_execve+0x186>
        goto exec_failed;
   12224:	90                   	nop
   12225:	eb 04                	jmp    1222b <sys_execve+0x186>
        goto exec_failed;
   12227:	90                   	nop
   12228:	eb 01                	jmp    1222b <sys_execve+0x186>
        goto exec_failed;
   1222a:	90                   	nop

exec_failed:    // 必要的资源释放
    if (new_page_dir) {
   1222b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1222f:	74 28                	je     12259 <sys_execve+0x1b4>
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12231:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12234:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12237:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        mmu_set_page_dir(old_page_dir);
   1223d:	83 ec 0c             	sub    $0xc,%esp
   12240:	ff 75 f0             	push   -0x10(%ebp)
   12243:	e8 d5 ed ff ff       	call   1101d <mmu_set_page_dir>
   12248:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1224b:	83 ec 0c             	sub    $0xc,%esp
   1224e:	ff 75 ec             	push   -0x14(%ebp)
   12251:	e8 e2 e5 ff ff       	call   10838 <memory_destroy_uvm>
   12256:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   12259:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1225e:	c9                   	leave  
   1225f:	c3                   	ret    

00012260 <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid (void) {
   12260:	55                   	push   %ebp
   12261:	89 e5                	mov    %esp,%ebp
   12263:	83 ec 10             	sub    $0x10,%esp
    task_t * curr_task = task_current();
   12266:	e8 9c f4 ff ff       	call   11707 <task_current>
   1226b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   1226e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12271:	8b 40 24             	mov    0x24(%eax),%eax
}
   12274:	c9                   	leave  
   12275:	c3                   	ret    

00012276 <sys_wait>:


/**
 * @brief 等待子进程退出
 */
int sys_wait(int* status) {
   12276:	55                   	push   %ebp
   12277:	89 e5                	mov    %esp,%ebp
   12279:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   1227c:	e8 86 f4 ff ff       	call   11707 <task_current>
   12281:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (;;) {
        // 遍历，找僵尸状态的进程，然后回收。如果收不到，则进入睡眠态
        mutex_lock(&task_table_mutex);
   12284:	83 ec 0c             	sub    $0xc,%esp
   12287:	68 c0 49 03 00       	push   $0x349c0
   1228c:	e8 d1 5a 00 00       	call   17d62 <mutex_lock>
   12291:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++) {
   12294:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1229b:	e9 98 00 00 00       	jmp    12338 <sys_wait+0xc2>
            task_t * task = task_table + i;
   122a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122a3:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   122a9:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   122ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task) {
   122b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122b4:	8b 40 28             	mov    0x28(%eax),%eax
   122b7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122ba:	75 77                	jne    12333 <sys_wait+0xbd>
                continue;
            }

            if (task->state == TASK_ZOMBIE) {
   122bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122bf:	8b 00                	mov    (%eax),%eax
   122c1:	83 f8 05             	cmp    $0x5,%eax
   122c4:	75 6e                	jne    12334 <sys_wait+0xbe>
                int pid = task->pid;
   122c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122c9:	8b 40 24             	mov    0x24(%eax),%eax
   122cc:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   122cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122d2:	8b 50 34             	mov    0x34(%eax),%edx
   122d5:	8b 45 08             	mov    0x8(%ebp),%eax
   122d8:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   122da:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122dd:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   122e3:	83 ec 0c             	sub    $0xc,%esp
   122e6:	50                   	push   %eax
   122e7:	e8 4c e5 ff ff       	call   10838 <memory_destroy_uvm>
   122ec:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   122ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122f2:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   122f8:	2d 00 10 00 00       	sub    $0x1000,%eax
   122fd:	83 ec 0c             	sub    $0xc,%esp
   12300:	50                   	push   %eax
   12301:	e8 85 e9 ff ff       	call   10c8b <memory_free_page>
   12306:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   12309:	83 ec 04             	sub    $0x4,%esp
   1230c:	68 c8 02 00 00       	push   $0x2c8
   12311:	6a 00                	push   $0x0
   12313:	ff 75 e8             	push   -0x18(%ebp)
   12316:	e8 4a 61 00 00       	call   18465 <kernel_memset>
   1231b:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   1231e:	83 ec 0c             	sub    $0xc,%esp
   12321:	68 c0 49 03 00       	push   $0x349c0
   12326:	e8 ce 5a 00 00       	call   17df9 <mutex_unlock>
   1232b:	83 c4 10             	add    $0x10,%esp
                return pid;
   1232e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12331:	eb 56                	jmp    12389 <sys_wait+0x113>
                continue;
   12333:	90                   	nop
        for (int i = 0; i < TASK_NR; i++) {
   12334:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12338:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1233c:	0f 8e 5e ff ff ff    	jle    122a0 <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   12342:	83 ec 0c             	sub    $0xc,%esp
   12345:	68 c0 49 03 00       	push   $0x349c0
   1234a:	e8 aa 5a 00 00       	call   17df9 <mutex_unlock>
   1234f:	83 c4 10             	add    $0x10,%esp

        // 找不到，则等待
        irq_state_t state = irq_enter_protection();
   12352:	e8 ad 0d 00 00       	call   13104 <irq_enter_protection>
   12357:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   1235a:	83 ec 0c             	sub    $0xc,%esp
   1235d:	ff 75 f0             	push   -0x10(%ebp)
   12360:	e8 d4 f2 ff ff       	call   11639 <task_set_block>
   12365:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   12368:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1236b:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   12371:	e8 a4 f4 ff ff       	call   1181a <task_dispatch>
        irq_leave_protection(state);
   12376:	83 ec 0c             	sub    $0xc,%esp
   12379:	ff 75 ec             	push   -0x14(%ebp)
   1237c:	e8 9b 0d 00 00       	call   1311c <irq_leave_protection>
   12381:	83 c4 10             	add    $0x10,%esp
    for (;;) {
   12384:	e9 fb fe ff ff       	jmp    12284 <sys_wait+0xe>
    }
}
   12389:	c9                   	leave  
   1238a:	c3                   	ret    

0001238b <sys_exit>:

/**
 * @brief 退出进程
 */
void sys_exit(int status) {
   1238b:	55                   	push   %ebp
   1238c:	89 e5                	mov    %esp,%ebp
   1238e:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   12391:	e8 71 f3 ff ff       	call   11707 <task_current>
   12396:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 关闭所有已经打开的文件, 标准输入输出库会由newlib自行关闭，但这里仍然再处理下
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   12399:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123a0:	eb 39                	jmp    123db <sys_exit+0x50>
        file_t * file = curr_task->file_table[fd];
   123a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123a8:	83 c2 10             	add    $0x10,%edx
   123ab:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   123af:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file) {
   123b2:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   123b6:	74 1f                	je     123d7 <sys_exit+0x4c>
            sys_close(fd);
   123b8:	83 ec 0c             	sub    $0xc,%esp
   123bb:	ff 75 f4             	push   -0xc(%ebp)
   123be:	e8 46 55 00 00       	call   17909 <sys_close>
   123c3:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   123c6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123cc:	83 c2 10             	add    $0x10,%edx
   123cf:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   123d6:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123db:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   123df:	7e c1                	jle    123a2 <sys_exit+0x17>
        }
    }

    int move_child = 0;
   123e1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 找所有的子进程，将其转交给init进程
    mutex_lock(&task_table_mutex);
   123e8:	83 ec 0c             	sub    $0xc,%esp
   123eb:	68 c0 49 03 00       	push   $0x349c0
   123f0:	e8 6d 59 00 00       	call   17d62 <mutex_lock>
   123f5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   123f8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   123ff:	eb 3b                	jmp    1243c <sys_exit+0xb1>
        task_t * task = task_table + i;
   12401:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12404:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   1240a:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   1240f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task) {
   12412:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12415:	8b 40 28             	mov    0x28(%eax),%eax
   12418:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   1241b:	75 1b                	jne    12438 <sys_exit+0xad>
            // 有子进程，则转给init_task
            task->parent = &task_manager.first_task;
   1241d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12420:	c7 40 28 28 d0 01 00 	movl   $0x1d028,0x28(%eax)

            // 如果子进程中有僵尸进程，唤醒回收资源
            // 并不由自己回收，因为自己将要退出
            if (task->state == TASK_ZOMBIE) {
   12427:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1242a:	8b 00                	mov    (%eax),%eax
   1242c:	83 f8 05             	cmp    $0x5,%eax
   1242f:	75 07                	jne    12438 <sys_exit+0xad>
                move_child = 1;
   12431:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12438:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1243c:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   12440:	7e bf                	jle    12401 <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   12442:	83 ec 0c             	sub    $0xc,%esp
   12445:	68 c0 49 03 00       	push   $0x349c0
   1244a:	e8 aa 59 00 00       	call   17df9 <mutex_unlock>
   1244f:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   12452:	e8 ad 0c 00 00       	call   13104 <irq_enter_protection>
   12457:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 如果有移动子进程，则唤醒init进程
    task_t * parent = curr_task->parent;
   1245a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1245d:	8b 40 28             	mov    0x28(%eax),%eax
   12460:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task)) {  // 如果父进程为init进程，在下方唤醒
   12463:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12467:	74 23                	je     1248c <sys_exit+0x101>
   12469:	81 7d e0 28 d0 01 00 	cmpl   $0x1d028,-0x20(%ebp)
   12470:	74 1a                	je     1248c <sys_exit+0x101>
        if (task_manager.first_task.state == TASK_WAITING) {
   12472:	a1 28 d0 01 00       	mov    0x1d028,%eax
   12477:	83 f8 04             	cmp    $0x4,%eax
   1247a:	75 10                	jne    1248c <sys_exit+0x101>
            task_set_ready(&task_manager.first_task);
   1247c:	83 ec 0c             	sub    $0xc,%esp
   1247f:	68 28 d0 01 00       	push   $0x1d028
   12484:	e8 7c f1 ff ff       	call   11605 <task_set_ready>
   12489:	83 c4 10             	add    $0x10,%esp
        }
    }

    // 如果有父任务在wait，则唤醒父任务进行回收
    // 如果父进程没有等待，则一直处理僵死状态？
    if (parent->state == TASK_WAITING) {
   1248c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1248f:	8b 00                	mov    (%eax),%eax
   12491:	83 f8 04             	cmp    $0x4,%eax
   12494:	75 12                	jne    124a8 <sys_exit+0x11d>
        task_set_ready(curr_task->parent);
   12496:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12499:	8b 40 28             	mov    0x28(%eax),%eax
   1249c:	83 ec 0c             	sub    $0xc,%esp
   1249f:	50                   	push   %eax
   124a0:	e8 60 f1 ff ff       	call   11605 <task_set_ready>
   124a5:	83 c4 10             	add    $0x10,%esp
    }

    // 保存返回值，进入僵尸状态
    curr_task->status = status;
   124a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124ab:	8b 55 08             	mov    0x8(%ebp),%edx
   124ae:	89 50 34             	mov    %edx,0x34(%eax)
    curr_task->state = TASK_ZOMBIE;
   124b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124b4:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   124ba:	83 ec 0c             	sub    $0xc,%esp
   124bd:	ff 75 e8             	push   -0x18(%ebp)
   124c0:	e8 74 f1 ff ff       	call   11639 <task_set_block>
   124c5:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   124c8:	e8 4d f3 ff ff       	call   1181a <task_dispatch>

    irq_leave_protection(state);
   124cd:	83 ec 0c             	sub    $0xc,%esp
   124d0:	ff 75 e4             	push   -0x1c(%ebp)
   124d3:	e8 44 0c 00 00       	call   1311c <irq_leave_protection>
   124d8:	83 c4 10             	add    $0x10,%esp
}
   124db:	90                   	nop
   124dc:	c9                   	leave  
   124dd:	c3                   	ret    

000124de <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   124de:	55                   	push   %ebp
   124df:	89 e5                	mov    %esp,%ebp
   124e1:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   124e4:	8b 45 08             	mov    0x8(%ebp),%eax
   124e7:	c1 e8 10             	shr    $0x10,%eax
   124ea:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   124ee:	8b 45 08             	mov    0x8(%ebp),%eax
   124f1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   124f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   124f8:	83 e8 01             	sub    $0x1,%eax
   124fb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   124ff:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12503:	90                   	nop
   12504:	c9                   	leave  
   12505:	c3                   	ret    

00012506 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12506:	55                   	push   %ebp
   12507:	89 e5                	mov    %esp,%ebp
   12509:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
   1250c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1250f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12512:	8b 45 08             	mov    0x8(%ebp),%eax
   12515:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   12518:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1251b:	ff 28                	ljmp   *(%eax)
}
   1251d:	90                   	nop
   1251e:	c9                   	leave  
   1251f:	c3                   	ret    

00012520 <segment_desc_set>:
static mutex_t mutex;

/**
 * 设置段描述符
 */
void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   12520:	55                   	push   %ebp
   12521:	89 e5                	mov    %esp,%ebp
   12523:	83 ec 14             	sub    $0x14,%esp
   12526:	8b 45 14             	mov    0x14(%ebp),%eax
   12529:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   1252d:	8b 45 08             	mov    0x8(%ebp),%eax
   12530:	c1 f8 03             	sar    $0x3,%eax
   12533:	c1 e0 03             	shl    $0x3,%eax
   12536:	05 e0 49 03 00       	add    $0x349e0,%eax
   1253b:	89 45 fc             	mov    %eax,-0x4(%ebp)

	// 如果界限比较长，将长度单位换成4KB
	if (limit > 0xfffff) {
   1253e:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12545:	76 0f                	jbe    12556 <segment_desc_set+0x36>
		attr |= 0x8000;
   12547:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   1254d:	8b 45 10             	mov    0x10(%ebp),%eax
   12550:	c1 e8 0c             	shr    $0xc,%eax
   12553:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   12556:	8b 45 10             	mov    0x10(%ebp),%eax
   12559:	89 c2                	mov    %eax,%edx
   1255b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1255e:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   12561:	8b 45 0c             	mov    0xc(%ebp),%eax
   12564:	89 c2                	mov    %eax,%edx
   12566:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12569:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   1256d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12570:	c1 e8 10             	shr    $0x10,%eax
   12573:	89 c2                	mov    %eax,%edx
   12575:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12578:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   1257b:	8b 45 10             	mov    0x10(%ebp),%eax
   1257e:	c1 e8 10             	shr    $0x10,%eax
   12581:	c1 e0 08             	shl    $0x8,%eax
   12584:	66 25 00 0f          	and    $0xf00,%ax
   12588:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   1258c:	89 c2                	mov    %eax,%edx
   1258e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12591:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   12595:	8b 45 0c             	mov    0xc(%ebp),%eax
   12598:	c1 e8 18             	shr    $0x18,%eax
   1259b:	89 c2                	mov    %eax,%edx
   1259d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125a0:	88 50 07             	mov    %dl,0x7(%eax)
}
   125a3:	90                   	nop
   125a4:	c9                   	leave  
   125a5:	c3                   	ret    

000125a6 <gate_desc_set>:

/**
 * 设置门描述符
 */
void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   125a6:	55                   	push   %ebp
   125a7:	89 e5                	mov    %esp,%ebp
   125a9:	83 ec 08             	sub    $0x8,%esp
   125ac:	8b 55 0c             	mov    0xc(%ebp),%edx
   125af:	8b 45 14             	mov    0x14(%ebp),%eax
   125b2:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   125b6:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   125ba:	8b 45 10             	mov    0x10(%ebp),%eax
   125bd:	89 c2                	mov    %eax,%edx
   125bf:	8b 45 08             	mov    0x8(%ebp),%eax
   125c2:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   125c5:	8b 45 08             	mov    0x8(%ebp),%eax
   125c8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   125cc:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   125d0:	8b 45 08             	mov    0x8(%ebp),%eax
   125d3:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   125d7:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   125db:	8b 45 10             	mov    0x10(%ebp),%eax
   125de:	c1 e8 10             	shr    $0x10,%eax
   125e1:	89 c2                	mov    %eax,%edx
   125e3:	8b 45 08             	mov    0x8(%ebp),%eax
   125e6:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   125ea:	90                   	nop
   125eb:	c9                   	leave  
   125ec:	c3                   	ret    

000125ed <gdt_free_sel>:

void gdt_free_sel (int sel) {
   125ed:	55                   	push   %ebp
   125ee:	89 e5                	mov    %esp,%ebp
   125f0:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   125f3:	83 ec 0c             	sub    $0xc,%esp
   125f6:	68 e0 51 03 00       	push   $0x351e0
   125fb:	e8 62 57 00 00       	call   17d62 <mutex_lock>
   12600:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12603:	8b 45 08             	mov    0x8(%ebp),%eax
   12606:	c1 e8 03             	shr    $0x3,%eax
   12609:	66 c7 04 c5 e5 49 03 	movw   $0x0,0x349e5(,%eax,8)
   12610:	00 00 00 
    mutex_unlock(&mutex);
   12613:	83 ec 0c             	sub    $0xc,%esp
   12616:	68 e0 51 03 00       	push   $0x351e0
   1261b:	e8 d9 57 00 00       	call   17df9 <mutex_unlock>
   12620:	83 c4 10             	add    $0x10,%esp
}
   12623:	90                   	nop
   12624:	c9                   	leave  
   12625:	c3                   	ret    

00012626 <gdt_alloc_desc>:

/**
 * 分配一个GDT推荐表符
 */
int gdt_alloc_desc (void) {
   12626:	55                   	push   %ebp
   12627:	89 e5                	mov    %esp,%ebp
   12629:	83 ec 18             	sub    $0x18,%esp
    int i;

    // 跳过第0项
    mutex_lock(&mutex);
   1262c:	83 ec 0c             	sub    $0xc,%esp
   1262f:	68 e0 51 03 00       	push   $0x351e0
   12634:	e8 29 57 00 00       	call   17d62 <mutex_lock>
   12639:	83 c4 10             	add    $0x10,%esp
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1263c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12643:	eb 29                	jmp    1266e <gdt_alloc_desc+0x48>
        segment_desc_t * desc = gdt_table + i;
   12645:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12648:	c1 e0 03             	shl    $0x3,%eax
   1264b:	05 e0 49 03 00       	add    $0x349e0,%eax
   12650:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   12653:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12656:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1265a:	66 85 c0             	test   %ax,%ax
   1265d:	75 0b                	jne    1266a <gdt_alloc_desc+0x44>
            desc->attr = SEG_P_PRESENT;     // 标记为占用状态
   1265f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12662:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            break;
   12668:	eb 0d                	jmp    12677 <gdt_alloc_desc+0x51>
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   1266a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1266e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12675:	7e ce                	jle    12645 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   12677:	83 ec 0c             	sub    $0xc,%esp
   1267a:	68 e0 51 03 00       	push   $0x351e0
   1267f:	e8 75 57 00 00       	call   17df9 <mutex_unlock>
   12684:	83 c4 10             	add    $0x10,%esp

    return i >= GDT_TABLE_SIZE ? -1 : i * sizeof(segment_desc_t);;
   12687:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1268e:	7f 08                	jg     12698 <gdt_alloc_desc+0x72>
   12690:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12693:	c1 e0 03             	shl    $0x3,%eax
   12696:	eb 05                	jmp    1269d <gdt_alloc_desc+0x77>
   12698:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1269d:	c9                   	leave  
   1269e:	c3                   	ret    

0001269f <init_gdt>:

/**
 * 初始化GDT
 */
void init_gdt(void) {
   1269f:	55                   	push   %ebp
   126a0:	89 e5                	mov    %esp,%ebp
   126a2:	83 ec 10             	sub    $0x10,%esp
	// 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126a5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   126ac:	eb 19                	jmp    126c7 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   126ae:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126b1:	c1 e0 03             	shl    $0x3,%eax
   126b4:	6a 00                	push   $0x0
   126b6:	6a 00                	push   $0x0
   126b8:	6a 00                	push   $0x0
   126ba:	50                   	push   %eax
   126bb:	e8 60 fe ff ff       	call   12520 <segment_desc_set>
   126c0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126c3:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   126c7:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   126ce:	7e de                	jle    126ae <init_gdt+0xf>
    }

    //数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   126d0:	68 92 c0 00 00       	push   $0xc092
   126d5:	6a ff                	push   $0xffffffff
   126d7:	6a 00                	push   $0x0
   126d9:	6a 10                	push   $0x10
   126db:	e8 40 fe ff ff       	call   12520 <segment_desc_set>
   126e0:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 只能用非一致代码段，以便通过调用门更改当前任务的CPL执行关键的资源访问操作
    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   126e3:	68 9a c0 00 00       	push   $0xc09a
   126e8:	6a ff                	push   $0xffffffff
   126ea:	6a 00                	push   $0x0
   126ec:	6a 08                	push   $0x8
   126ee:	e8 2d fe ff ff       	call   12520 <segment_desc_set>
   126f3:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   126f6:	ba f8 02 01 00       	mov    $0x102f8,%edx
   126fb:	b8 f8 49 03 00       	mov    $0x349f8,%eax
   12700:	68 05 ec 00 00       	push   $0xec05
   12705:	52                   	push   %edx
   12706:	6a 08                	push   $0x8
   12708:	50                   	push   %eax
   12709:	e8 98 fe ff ff       	call   125a6 <gate_desc_set>
   1270e:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handler_syscall,
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    // 加载gdt
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12711:	b8 e0 49 03 00       	mov    $0x349e0,%eax
   12716:	68 00 08 00 00       	push   $0x800
   1271b:	50                   	push   %eax
   1271c:	e8 bd fd ff ff       	call   124de <lgdt>
   12721:	83 c4 08             	add    $0x8,%esp
}
   12724:	90                   	nop
   12725:	c9                   	leave  
   12726:	c3                   	ret    

00012727 <switch_to_tss>:

/**
 * 切换至TSS，即跳转实现任务切换
 */
void switch_to_tss (uint32_t tss_selector) {
   12727:	55                   	push   %ebp
   12728:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   1272a:	6a 00                	push   $0x0
   1272c:	ff 75 08             	push   0x8(%ebp)
   1272f:	e8 d2 fd ff ff       	call   12506 <far_jump>
   12734:	83 c4 08             	add    $0x8,%esp
}
   12737:	90                   	nop
   12738:	c9                   	leave  
   12739:	c3                   	ret    

0001273a <cpu_init>:

/**
 * CPU初始化
 */
void cpu_init (void) {
   1273a:	55                   	push   %ebp
   1273b:	89 e5                	mov    %esp,%ebp
   1273d:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12740:	83 ec 0c             	sub    $0xc,%esp
   12743:	68 e0 51 03 00       	push   $0x351e0
   12748:	e8 e7 55 00 00       	call   17d34 <mutex_init>
   1274d:	83 c4 10             	add    $0x10,%esp

    init_gdt();
   12750:	e8 4a ff ff ff       	call   1269f <init_gdt>
}
   12755:	90                   	nop
   12756:	c9                   	leave  
   12757:	c3                   	ret    

00012758 <inb>:
static inline uint8_t inb(uint16_t  port) {
   12758:	55                   	push   %ebp
   12759:	89 e5                	mov    %esp,%ebp
   1275b:	83 ec 14             	sub    $0x14,%esp
   1275e:	8b 45 08             	mov    0x8(%ebp),%eax
   12761:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   12765:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12769:	89 c2                	mov    %eax,%edx
   1276b:	ec                   	in     (%dx),%al
   1276c:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1276f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12773:	c9                   	leave  
   12774:	c3                   	ret    

00012775 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12775:	55                   	push   %ebp
   12776:	89 e5                	mov    %esp,%ebp
   12778:	83 ec 08             	sub    $0x8,%esp
   1277b:	8b 45 08             	mov    0x8(%ebp),%eax
   1277e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12781:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   12785:	89 d0                	mov    %edx,%eax
   12787:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1278a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1278e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12792:	ee                   	out    %al,(%dx)
}
   12793:	90                   	nop
   12794:	c9                   	leave  
   12795:	c3                   	ret    

00012796 <cli>:
static inline void cli() {
   12796:	55                   	push   %ebp
   12797:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   12799:	fa                   	cli    
}
   1279a:	90                   	nop
   1279b:	5d                   	pop    %ebp
   1279c:	c3                   	ret    

0001279d <sti>:
static inline void sti() {
   1279d:	55                   	push   %ebp
   1279e:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   127a0:	fb                   	sti    
}
   127a1:	90                   	nop
   127a2:	5d                   	pop    %ebp
   127a3:	c3                   	ret    

000127a4 <read_cr2>:
static inline uint32_t read_cr2() {
   127a4:	55                   	push   %ebp
   127a5:	89 e5                	mov    %esp,%ebp
   127a7:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   127aa:	0f 20 d0             	mov    %cr2,%eax
   127ad:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   127b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127b3:	c9                   	leave  
   127b4:	c3                   	ret    

000127b5 <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   127b5:	55                   	push   %ebp
   127b6:	89 e5                	mov    %esp,%ebp
   127b8:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   127bb:	8b 45 08             	mov    0x8(%ebp),%eax
   127be:	c1 e8 10             	shr    $0x10,%eax
   127c1:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   127c5:	8b 45 08             	mov    0x8(%ebp),%eax
   127c8:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   127cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   127cf:	83 e8 01             	sub    $0x1,%eax
   127d2:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   127d6:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   127da:	90                   	nop
   127db:	c9                   	leave  
   127dc:	c3                   	ret    

000127dd <hlt>:
static inline void hlt(void) {
   127dd:	55                   	push   %ebp
   127de:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   127e0:	f4                   	hlt    
}
   127e1:	90                   	nop
   127e2:	5d                   	pop    %ebp
   127e3:	c3                   	ret    

000127e4 <read_eflags>:

static inline uint32_t read_eflags (void) {
   127e4:	55                   	push   %ebp
   127e5:	89 e5                	mov    %esp,%ebp
   127e7:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   127ea:	9c                   	pushf  
   127eb:	58                   	pop    %eax
   127ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   127ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127f2:	c9                   	leave  
   127f3:	c3                   	ret    

000127f4 <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   127f4:	55                   	push   %ebp
   127f5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   127f7:	8b 45 08             	mov    0x8(%ebp),%eax
   127fa:	50                   	push   %eax
   127fb:	9d                   	popf   
}
   127fc:	90                   	nop
   127fd:	5d                   	pop    %ebp
   127fe:	c3                   	ret    

000127ff <dump_core_regs>:

#define IDT_TABLE_NR			128				// IDT表项数量

static gate_desc_t idt_table[IDT_TABLE_NR];	// 中断描述表

static void dump_core_regs (exception_frame_t * frame) {
   127ff:	55                   	push   %ebp
   12800:	89 e5                	mov    %esp,%ebp
   12802:	57                   	push   %edi
   12803:	56                   	push   %esi
   12804:	53                   	push   %ebx
   12805:	83 ec 2c             	sub    $0x2c,%esp
    // 打印CPU寄存器相关内容
    uint32_t esp, ss;
    if (frame->cs & 0x7) {
   12808:	8b 45 08             	mov    0x8(%ebp),%eax
   1280b:	8b 40 3c             	mov    0x3c(%eax),%eax
   1280e:	83 e0 07             	and    $0x7,%eax
   12811:	85 c0                	test   %eax,%eax
   12813:	74 14                	je     12829 <dump_core_regs+0x2a>
        ss = frame->ds;
   12815:	8b 45 08             	mov    0x8(%ebp),%eax
   12818:	8b 40 0c             	mov    0xc(%eax),%eax
   1281b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1281e:	8b 45 08             	mov    0x8(%ebp),%eax
   12821:	8b 40 1c             	mov    0x1c(%eax),%eax
   12824:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12827:	eb 12                	jmp    1283b <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   12829:	8b 45 08             	mov    0x8(%ebp),%eax
   1282c:	8b 40 48             	mov    0x48(%eax),%eax
   1282f:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   12832:	8b 45 08             	mov    0x8(%ebp),%eax
   12835:	8b 40 44             	mov    0x44(%eax),%eax
   12838:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   1283b:	8b 45 08             	mov    0x8(%ebp),%eax
   1283e:	8b 50 34             	mov    0x34(%eax),%edx
   12841:	8b 45 08             	mov    0x8(%ebp),%eax
   12844:	8b 40 30             	mov    0x30(%eax),%eax
   12847:	83 ec 04             	sub    $0x4,%esp
   1284a:	52                   	push   %edx
   1284b:	50                   	push   %eax
   1284c:	68 20 90 01 00       	push   $0x19020
   12851:	e8 b9 61 00 00       	call   18a0f <log_printf>
   12856:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   12859:	8b 45 08             	mov    0x8(%ebp),%eax
   1285c:	8b 30                	mov    (%eax),%esi
   1285e:	8b 45 08             	mov    0x8(%ebp),%eax
   12861:	8b 58 04             	mov    0x4(%eax),%ebx
   12864:	8b 45 08             	mov    0x8(%ebp),%eax
   12867:	8b 48 08             	mov    0x8(%eax),%ecx
   1286a:	8b 45 08             	mov    0x8(%ebp),%eax
   1286d:	8b 50 0c             	mov    0xc(%eax),%edx
   12870:	8b 45 08             	mov    0x8(%ebp),%eax
   12873:	8b 40 3c             	mov    0x3c(%eax),%eax
   12876:	83 ec 04             	sub    $0x4,%esp
   12879:	56                   	push   %esi
   1287a:	53                   	push   %ebx
   1287b:	ff 75 e0             	push   -0x20(%ebp)
   1287e:	51                   	push   %ecx
   1287f:	52                   	push   %edx
   12880:	50                   	push   %eax
   12881:	68 3c 90 01 00       	push   $0x1903c
   12886:	e8 84 61 00 00       	call   18a0f <log_printf>
   1288b:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs
    );
     log_printf("EAX:0x%x\n"
   1288e:	8b 45 08             	mov    0x8(%ebp),%eax
   12891:	8b 40 18             	mov    0x18(%eax),%eax
   12894:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   12897:	8b 45 08             	mov    0x8(%ebp),%eax
   1289a:	8b 78 14             	mov    0x14(%eax),%edi
   1289d:	8b 45 08             	mov    0x8(%ebp),%eax
   128a0:	8b 70 10             	mov    0x10(%eax),%esi
   128a3:	8b 45 08             	mov    0x8(%ebp),%eax
   128a6:	8b 58 24             	mov    0x24(%eax),%ebx
   128a9:	8b 45 08             	mov    0x8(%ebp),%eax
   128ac:	8b 48 28             	mov    0x28(%eax),%ecx
   128af:	8b 45 08             	mov    0x8(%ebp),%eax
   128b2:	8b 50 20             	mov    0x20(%eax),%edx
   128b5:	8b 45 08             	mov    0x8(%ebp),%eax
   128b8:	8b 40 2c             	mov    0x2c(%eax),%eax
   128bb:	83 ec 0c             	sub    $0xc,%esp
   128be:	ff 75 e4             	push   -0x1c(%ebp)
   128c1:	ff 75 d4             	push   -0x2c(%ebp)
   128c4:	57                   	push   %edi
   128c5:	56                   	push   %esi
   128c6:	53                   	push   %ebx
   128c7:	51                   	push   %ecx
   128c8:	52                   	push   %edx
   128c9:	50                   	push   %eax
   128ca:	68 64 90 01 00       	push   $0x19064
   128cf:	e8 3b 61 00 00       	call   18a0f <log_printf>
   128d4:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   128d7:	8b 45 08             	mov    0x8(%ebp),%eax
   128da:	8b 50 40             	mov    0x40(%eax),%edx
   128dd:	8b 45 08             	mov    0x8(%ebp),%eax
   128e0:	8b 40 38             	mov    0x38(%eax),%eax
   128e3:	83 ec 04             	sub    $0x4,%esp
   128e6:	52                   	push   %edx
   128e7:	50                   	push   %eax
   128e8:	68 ad 90 01 00       	push   $0x190ad
   128ed:	e8 1d 61 00 00       	call   18a0f <log_printf>
   128f2:	83 c4 10             	add    $0x10,%esp
}
   128f5:	90                   	nop
   128f6:	8d 65 f4             	lea    -0xc(%ebp),%esp
   128f9:	5b                   	pop    %ebx
   128fa:	5e                   	pop    %esi
   128fb:	5f                   	pop    %edi
   128fc:	5d                   	pop    %ebp
   128fd:	c3                   	ret    

000128fe <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, const char * message) {
   128fe:	55                   	push   %ebp
   128ff:	89 e5                	mov    %esp,%ebp
   12901:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12904:	83 ec 0c             	sub    $0xc,%esp
   12907:	68 c4 90 01 00       	push   $0x190c4
   1290c:	e8 fe 60 00 00       	call   18a0f <log_printf>
   12911:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", message);
   12914:	83 ec 08             	sub    $0x8,%esp
   12917:	ff 75 0c             	push   0xc(%ebp)
   1291a:	68 e5 90 01 00       	push   $0x190e5
   1291f:	e8 eb 60 00 00       	call   18a0f <log_printf>
   12924:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   12927:	83 ec 0c             	sub    $0xc,%esp
   1292a:	ff 75 08             	push   0x8(%ebp)
   1292d:	e8 cd fe ff ff       	call   127ff <dump_core_regs>
   12932:	83 c4 10             	add    $0x10,%esp
    
    // todo: 留等以后补充打印任务栈的内容

    log_printf("--------------------------------");
   12935:	83 ec 0c             	sub    $0xc,%esp
   12938:	68 c4 90 01 00       	push   $0x190c4
   1293d:	e8 cd 60 00 00       	call   18a0f <log_printf>
   12942:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12945:	8b 45 08             	mov    0x8(%ebp),%eax
   12948:	8b 40 3c             	mov    0x3c(%eax),%eax
   1294b:	83 e0 03             	and    $0x3,%eax
   1294e:	85 c0                	test   %eax,%eax
   12950:	74 14                	je     12966 <do_default_handler+0x68>
        sys_exit(frame->error_code);
   12952:	8b 45 08             	mov    0x8(%ebp),%eax
   12955:	8b 40 34             	mov    0x34(%eax),%eax
   12958:	83 ec 0c             	sub    $0xc,%esp
   1295b:	50                   	push   %eax
   1295c:	e8 2a fa ff ff       	call   1238b <sys_exit>
   12961:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12964:	eb 07                	jmp    1296d <do_default_handler+0x6f>
            hlt();
   12966:	e8 72 fe ff ff       	call   127dd <hlt>
   1296b:	eb f9                	jmp    12966 <do_default_handler+0x68>
}
   1296d:	c9                   	leave  
   1296e:	c3                   	ret    

0001296f <do_handler_unknown>:

void do_handler_unknown (exception_frame_t * frame) {
   1296f:	55                   	push   %ebp
   12970:	89 e5                	mov    %esp,%ebp
   12972:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   12975:	83 ec 08             	sub    $0x8,%esp
   12978:	68 00 91 01 00       	push   $0x19100
   1297d:	ff 75 08             	push   0x8(%ebp)
   12980:	e8 79 ff ff ff       	call   128fe <do_default_handler>
   12985:	83 c4 10             	add    $0x10,%esp
}
   12988:	90                   	nop
   12989:	c9                   	leave  
   1298a:	c3                   	ret    

0001298b <do_handler_divider>:

void do_handler_divider(exception_frame_t * frame) {
   1298b:	55                   	push   %ebp
   1298c:	89 e5                	mov    %esp,%ebp
   1298e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   12991:	83 ec 08             	sub    $0x8,%esp
   12994:	68 13 91 01 00       	push   $0x19113
   12999:	ff 75 08             	push   0x8(%ebp)
   1299c:	e8 5d ff ff ff       	call   128fe <do_default_handler>
   129a1:	83 c4 10             	add    $0x10,%esp
}
   129a4:	90                   	nop
   129a5:	c9                   	leave  
   129a6:	c3                   	ret    

000129a7 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   129a7:	55                   	push   %ebp
   129a8:	89 e5                	mov    %esp,%ebp
   129aa:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   129ad:	83 ec 08             	sub    $0x8,%esp
   129b0:	68 22 91 01 00       	push   $0x19122
   129b5:	ff 75 08             	push   0x8(%ebp)
   129b8:	e8 41 ff ff ff       	call   128fe <do_default_handler>
   129bd:	83 c4 10             	add    $0x10,%esp
}
   129c0:	90                   	nop
   129c1:	c9                   	leave  
   129c2:	c3                   	ret    

000129c3 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   129c3:	55                   	push   %ebp
   129c4:	89 e5                	mov    %esp,%ebp
   129c6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   129c9:	83 ec 08             	sub    $0x8,%esp
   129cc:	68 32 91 01 00       	push   $0x19132
   129d1:	ff 75 08             	push   0x8(%ebp)
   129d4:	e8 25 ff ff ff       	call   128fe <do_default_handler>
   129d9:	83 c4 10             	add    $0x10,%esp
}
   129dc:	90                   	nop
   129dd:	c9                   	leave  
   129de:	c3                   	ret    

000129df <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   129df:	55                   	push   %ebp
   129e0:	89 e5                	mov    %esp,%ebp
   129e2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   129e5:	83 ec 08             	sub    $0x8,%esp
   129e8:	68 41 91 01 00       	push   $0x19141
   129ed:	ff 75 08             	push   0x8(%ebp)
   129f0:	e8 09 ff ff ff       	call   128fe <do_default_handler>
   129f5:	83 c4 10             	add    $0x10,%esp
}
   129f8:	90                   	nop
   129f9:	c9                   	leave  
   129fa:	c3                   	ret    

000129fb <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   129fb:	55                   	push   %ebp
   129fc:	89 e5                	mov    %esp,%ebp
   129fe:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   12a01:	83 ec 08             	sub    $0x8,%esp
   12a04:	68 4d 91 01 00       	push   $0x1914d
   12a09:	ff 75 08             	push   0x8(%ebp)
   12a0c:	e8 ed fe ff ff       	call   128fe <do_default_handler>
   12a11:	83 c4 10             	add    $0x10,%esp
}
   12a14:	90                   	nop
   12a15:	c9                   	leave  
   12a16:	c3                   	ret    

00012a17 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   12a17:	55                   	push   %ebp
   12a18:	89 e5                	mov    %esp,%ebp
   12a1a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   12a1d:	83 ec 08             	sub    $0x8,%esp
   12a20:	68 57 91 01 00       	push   $0x19157
   12a25:	ff 75 08             	push   0x8(%ebp)
   12a28:	e8 d1 fe ff ff       	call   128fe <do_default_handler>
   12a2d:	83 c4 10             	add    $0x10,%esp
}
   12a30:	90                   	nop
   12a31:	c9                   	leave  
   12a32:	c3                   	ret    

00012a33 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   12a33:	55                   	push   %ebp
   12a34:	89 e5                	mov    %esp,%ebp
   12a36:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   12a39:	83 ec 08             	sub    $0x8,%esp
   12a3c:	68 6d 91 01 00       	push   $0x1916d
   12a41:	ff 75 08             	push   0x8(%ebp)
   12a44:	e8 b5 fe ff ff       	call   128fe <do_default_handler>
   12a49:	83 c4 10             	add    $0x10,%esp
}
   12a4c:	90                   	nop
   12a4d:	c9                   	leave  
   12a4e:	c3                   	ret    

00012a4f <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   12a4f:	55                   	push   %ebp
   12a50:	89 e5                	mov    %esp,%ebp
   12a52:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   12a55:	83 ec 08             	sub    $0x8,%esp
   12a58:	68 7d 91 01 00       	push   $0x1917d
   12a5d:	ff 75 08             	push   0x8(%ebp)
   12a60:	e8 99 fe ff ff       	call   128fe <do_default_handler>
   12a65:	83 c4 10             	add    $0x10,%esp
}
   12a68:	90                   	nop
   12a69:	c9                   	leave  
   12a6a:	c3                   	ret    

00012a6b <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   12a6b:	55                   	push   %ebp
   12a6c:	89 e5                	mov    %esp,%ebp
   12a6e:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   12a71:	83 ec 08             	sub    $0x8,%esp
   12a74:	68 93 91 01 00       	push   $0x19193
   12a79:	ff 75 08             	push   0x8(%ebp)
   12a7c:	e8 7d fe ff ff       	call   128fe <do_default_handler>
   12a81:	83 c4 10             	add    $0x10,%esp
}
   12a84:	90                   	nop
   12a85:	c9                   	leave  
   12a86:	c3                   	ret    

00012a87 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   12a87:	55                   	push   %ebp
   12a88:	89 e5                	mov    %esp,%ebp
   12a8a:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   12a8d:	83 ec 08             	sub    $0x8,%esp
   12a90:	68 a1 91 01 00       	push   $0x191a1
   12a95:	ff 75 08             	push   0x8(%ebp)
   12a98:	e8 61 fe ff ff       	call   128fe <do_default_handler>
   12a9d:	83 c4 10             	add    $0x10,%esp
}
   12aa0:	90                   	nop
   12aa1:	c9                   	leave  
   12aa2:	c3                   	ret    

00012aa3 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   12aa3:	55                   	push   %ebp
   12aa4:	89 e5                	mov    %esp,%ebp
   12aa6:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   12aa9:	83 ec 08             	sub    $0x8,%esp
   12aac:	68 ad 91 01 00       	push   $0x191ad
   12ab1:	ff 75 08             	push   0x8(%ebp)
   12ab4:	e8 45 fe ff ff       	call   128fe <do_default_handler>
   12ab9:	83 c4 10             	add    $0x10,%esp
}
   12abc:	90                   	nop
   12abd:	c9                   	leave  
   12abe:	c3                   	ret    

00012abf <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   12abf:	55                   	push   %ebp
   12ac0:	89 e5                	mov    %esp,%ebp
   12ac2:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   12ac5:	83 ec 08             	sub    $0x8,%esp
   12ac8:	68 c2 91 01 00       	push   $0x191c2
   12acd:	ff 75 08             	push   0x8(%ebp)
   12ad0:	e8 29 fe ff ff       	call   128fe <do_default_handler>
   12ad5:	83 c4 10             	add    $0x10,%esp
}
   12ad8:	90                   	nop
   12ad9:	c9                   	leave  
   12ada:	c3                   	ret    

00012adb <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   12adb:	55                   	push   %ebp
   12adc:	89 e5                	mov    %esp,%ebp
   12ade:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12ae1:	83 ec 0c             	sub    $0xc,%esp
   12ae4:	68 c4 90 01 00       	push   $0x190c4
   12ae9:	e8 21 5f 00 00       	call   18a0f <log_printf>
   12aee:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12af1:	83 ec 0c             	sub    $0xc,%esp
   12af4:	68 d8 91 01 00       	push   $0x191d8
   12af9:	e8 11 5f 00 00       	call   18a0f <log_printf>
   12afe:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12b01:	8b 45 08             	mov    0x8(%ebp),%eax
   12b04:	8b 40 34             	mov    0x34(%eax),%eax
   12b07:	83 e0 01             	and    $0x1,%eax
   12b0a:	85 c0                	test   %eax,%eax
   12b0c:	74 12                	je     12b20 <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12b0e:	83 ec 0c             	sub    $0xc,%esp
   12b11:	68 04 92 01 00       	push   $0x19204
   12b16:	e8 f4 5e 00 00       	call   18a0f <log_printf>
   12b1b:	83 c4 10             	add    $0x10,%esp
   12b1e:	eb 10                	jmp    12b30 <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   12b20:	83 ec 0c             	sub    $0xc,%esp
   12b23:	68 80 92 01 00       	push   $0x19280
   12b28:	e8 e2 5e 00 00       	call   18a0f <log_printf>
   12b2d:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   12b30:	8b 45 08             	mov    0x8(%ebp),%eax
   12b33:	8b 40 34             	mov    0x34(%eax),%eax
   12b36:	83 e0 02             	and    $0x2,%eax
   12b39:	85 c0                	test   %eax,%eax
   12b3b:	74 12                	je     12b4f <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12b3d:	83 ec 0c             	sub    $0xc,%esp
   12b40:	68 d8 92 01 00       	push   $0x192d8
   12b45:	e8 c5 5e 00 00       	call   18a0f <log_printf>
   12b4a:	83 c4 10             	add    $0x10,%esp
   12b4d:	eb 10                	jmp    12b5f <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   12b4f:	83 ec 0c             	sub    $0xc,%esp
   12b52:	68 24 93 01 00       	push   $0x19324
   12b57:	e8 b3 5e 00 00       	call   18a0f <log_printf>
   12b5c:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   12b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b62:	8b 40 34             	mov    0x34(%eax),%eax
   12b65:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12b6a:	83 ec 08             	sub    $0x8,%esp
   12b6d:	50                   	push   %eax
   12b6e:	68 50 93 01 00       	push   $0x19350
   12b73:	e8 97 5e 00 00       	call   18a0f <log_printf>
   12b78:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12b7b:	83 ec 0c             	sub    $0xc,%esp
   12b7e:	ff 75 08             	push   0x8(%ebp)
   12b81:	e8 79 fc ff ff       	call   127ff <dump_core_regs>
   12b86:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12b89:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8c:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b8f:	83 e0 03             	and    $0x3,%eax
   12b92:	85 c0                	test   %eax,%eax
   12b94:	74 14                	je     12baa <do_handler_general_protection+0xcf>
        sys_exit(frame->error_code);
   12b96:	8b 45 08             	mov    0x8(%ebp),%eax
   12b99:	8b 40 34             	mov    0x34(%eax),%eax
   12b9c:	83 ec 0c             	sub    $0xc,%esp
   12b9f:	50                   	push   %eax
   12ba0:	e8 e6 f7 ff ff       	call   1238b <sys_exit>
   12ba5:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12ba8:	eb 07                	jmp    12bb1 <do_handler_general_protection+0xd6>
            hlt();
   12baa:	e8 2e fc ff ff       	call   127dd <hlt>
   12baf:	eb f9                	jmp    12baa <do_handler_general_protection+0xcf>
}
   12bb1:	c9                   	leave  
   12bb2:	c3                   	ret    

00012bb3 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   12bb3:	55                   	push   %ebp
   12bb4:	89 e5                	mov    %esp,%ebp
   12bb6:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12bb9:	83 ec 0c             	sub    $0xc,%esp
   12bbc:	68 c4 90 01 00       	push   $0x190c4
   12bc1:	e8 49 5e 00 00       	call   18a0f <log_printf>
   12bc6:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12bc9:	83 ec 0c             	sub    $0xc,%esp
   12bcc:	68 64 93 01 00       	push   $0x19364
   12bd1:	e8 39 5e 00 00       	call   18a0f <log_printf>
   12bd6:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12bd9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bdc:	8b 40 34             	mov    0x34(%eax),%eax
   12bdf:	83 e0 01             	and    $0x1,%eax
   12be2:	85 c0                	test   %eax,%eax
   12be4:	74 18                	je     12bfe <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12be6:	e8 b9 fb ff ff       	call   127a4 <read_cr2>
   12beb:	83 ec 08             	sub    $0x8,%esp
   12bee:	50                   	push   %eax
   12bef:	68 88 93 01 00       	push   $0x19388
   12bf4:	e8 16 5e 00 00       	call   18a0f <log_printf>
   12bf9:	83 c4 10             	add    $0x10,%esp
   12bfc:	eb 16                	jmp    12c14 <do_handler_page_fault+0x61>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   12bfe:	e8 a1 fb ff ff       	call   127a4 <read_cr2>
   12c03:	83 ec 08             	sub    $0x8,%esp
   12c06:	50                   	push   %eax
   12c07:	68 b0 93 01 00       	push   $0x193b0
   12c0c:	e8 fe 5d 00 00       	call   18a0f <log_printf>
   12c11:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12c14:	8b 45 08             	mov    0x8(%ebp),%eax
   12c17:	8b 40 34             	mov    0x34(%eax),%eax
   12c1a:	83 e0 02             	and    $0x2,%eax
   12c1d:	85 c0                	test   %eax,%eax
   12c1f:	74 12                	je     12c33 <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   12c21:	83 ec 0c             	sub    $0xc,%esp
   12c24:	68 cc 93 01 00       	push   $0x193cc
   12c29:	e8 e1 5d 00 00       	call   18a0f <log_printf>
   12c2e:	83 c4 10             	add    $0x10,%esp
   12c31:	eb 10                	jmp    12c43 <do_handler_page_fault+0x90>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   12c33:	83 ec 0c             	sub    $0xc,%esp
   12c36:	68 f8 93 01 00       	push   $0x193f8
   12c3b:	e8 cf 5d 00 00       	call   18a0f <log_printf>
   12c40:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12c43:	8b 45 08             	mov    0x8(%ebp),%eax
   12c46:	8b 40 34             	mov    0x34(%eax),%eax
   12c49:	83 e0 02             	and    $0x2,%eax
   12c4c:	85 c0                	test   %eax,%eax
   12c4e:	74 12                	je     12c62 <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12c50:	83 ec 0c             	sub    $0xc,%esp
   12c53:	68 24 94 01 00       	push   $0x19424
   12c58:	e8 b2 5d 00 00       	call   18a0f <log_printf>
   12c5d:	83 c4 10             	add    $0x10,%esp
   12c60:	eb 10                	jmp    12c72 <do_handler_page_fault+0xbf>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   12c62:	83 ec 0c             	sub    $0xc,%esp
   12c65:	68 50 94 01 00       	push   $0x19450
   12c6a:	e8 a0 5d 00 00       	call   18a0f <log_printf>
   12c6f:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12c72:	83 ec 0c             	sub    $0xc,%esp
   12c75:	ff 75 08             	push   0x8(%ebp)
   12c78:	e8 82 fb ff ff       	call   127ff <dump_core_regs>
   12c7d:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12c80:	8b 45 08             	mov    0x8(%ebp),%eax
   12c83:	8b 40 3c             	mov    0x3c(%eax),%eax
   12c86:	83 e0 03             	and    $0x3,%eax
   12c89:	85 c0                	test   %eax,%eax
   12c8b:	74 14                	je     12ca1 <do_handler_page_fault+0xee>
        sys_exit(frame->error_code);
   12c8d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c90:	8b 40 34             	mov    0x34(%eax),%eax
   12c93:	83 ec 0c             	sub    $0xc,%esp
   12c96:	50                   	push   %eax
   12c97:	e8 ef f6 ff ff       	call   1238b <sys_exit>
   12c9c:	83 c4 10             	add    $0x10,%esp
        for (;;) {
            hlt();
        }
    }

}
   12c9f:	eb 07                	jmp    12ca8 <do_handler_page_fault+0xf5>
            hlt();
   12ca1:	e8 37 fb ff ff       	call   127dd <hlt>
   12ca6:	eb f9                	jmp    12ca1 <do_handler_page_fault+0xee>
}
   12ca8:	c9                   	leave  
   12ca9:	c3                   	ret    

00012caa <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   12caa:	55                   	push   %ebp
   12cab:	89 e5                	mov    %esp,%ebp
   12cad:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   12cb0:	83 ec 08             	sub    $0x8,%esp
   12cb3:	68 76 94 01 00       	push   $0x19476
   12cb8:	ff 75 08             	push   0x8(%ebp)
   12cbb:	e8 3e fc ff ff       	call   128fe <do_default_handler>
   12cc0:	83 c4 10             	add    $0x10,%esp
}
   12cc3:	90                   	nop
   12cc4:	c9                   	leave  
   12cc5:	c3                   	ret    

00012cc6 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   12cc6:	55                   	push   %ebp
   12cc7:	89 e5                	mov    %esp,%ebp
   12cc9:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   12ccc:	83 ec 08             	sub    $0x8,%esp
   12ccf:	68 94 94 01 00       	push   $0x19494
   12cd4:	ff 75 08             	push   0x8(%ebp)
   12cd7:	e8 22 fc ff ff       	call   128fe <do_default_handler>
   12cdc:	83 c4 10             	add    $0x10,%esp
}
   12cdf:	90                   	nop
   12ce0:	c9                   	leave  
   12ce1:	c3                   	ret    

00012ce2 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   12ce2:	55                   	push   %ebp
   12ce3:	89 e5                	mov    %esp,%ebp
   12ce5:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   12ce8:	83 ec 08             	sub    $0x8,%esp
   12ceb:	68 a5 94 01 00       	push   $0x194a5
   12cf0:	ff 75 08             	push   0x8(%ebp)
   12cf3:	e8 06 fc ff ff       	call   128fe <do_default_handler>
   12cf8:	83 c4 10             	add    $0x10,%esp
}
   12cfb:	90                   	nop
   12cfc:	c9                   	leave  
   12cfd:	c3                   	ret    

00012cfe <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   12cfe:	55                   	push   %ebp
   12cff:	89 e5                	mov    %esp,%ebp
   12d01:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   12d04:	83 ec 08             	sub    $0x8,%esp
   12d07:	68 b4 94 01 00       	push   $0x194b4
   12d0c:	ff 75 08             	push   0x8(%ebp)
   12d0f:	e8 ea fb ff ff       	call   128fe <do_default_handler>
   12d14:	83 c4 10             	add    $0x10,%esp
}
   12d17:	90                   	nop
   12d18:	c9                   	leave  
   12d19:	c3                   	ret    

00012d1a <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   12d1a:	55                   	push   %ebp
   12d1b:	89 e5                	mov    %esp,%ebp
   12d1d:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   12d20:	83 ec 08             	sub    $0x8,%esp
   12d23:	68 d3 94 01 00       	push   $0x194d3
   12d28:	ff 75 08             	push   0x8(%ebp)
   12d2b:	e8 ce fb ff ff       	call   128fe <do_default_handler>
   12d30:	83 c4 10             	add    $0x10,%esp
}
   12d33:	90                   	nop
   12d34:	c9                   	leave  
   12d35:	c3                   	ret    

00012d36 <init_pic>:

static void init_pic(void) {
   12d36:	55                   	push   %ebp
   12d37:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12d39:	6a 11                	push   $0x11
   12d3b:	6a 20                	push   $0x20
   12d3d:	e8 33 fa ff ff       	call   12775 <outb>
   12d42:	83 c4 08             	add    $0x8,%esp

    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12d45:	6a 20                	push   $0x20
   12d47:	6a 21                	push   $0x21
   12d49:	e8 27 fa ff ff       	call   12775 <outb>
   12d4e:	83 c4 08             	add    $0x8,%esp

    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12d51:	6a 04                	push   $0x4
   12d53:	6a 21                	push   $0x21
   12d55:	e8 1b fa ff ff       	call   12775 <outb>
   12d5a:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d5d:	6a 01                	push   $0x1
   12d5f:	6a 21                	push   $0x21
   12d61:	e8 0f fa ff ff       	call   12775 <outb>
   12d66:	83 c4 08             	add    $0x8,%esp

    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12d69:	6a 11                	push   $0x11
   12d6b:	68 a0 00 00 00       	push   $0xa0
   12d70:	e8 00 fa ff ff       	call   12775 <outb>
   12d75:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12d78:	6a 28                	push   $0x28
   12d7a:	68 a1 00 00 00       	push   $0xa1
   12d7f:	e8 f1 f9 ff ff       	call   12775 <outb>
   12d84:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12d87:	6a 02                	push   $0x2
   12d89:	68 a1 00 00 00       	push   $0xa1
   12d8e:	e8 e2 f9 ff ff       	call   12775 <outb>
   12d93:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12d96:	6a 01                	push   $0x1
   12d98:	68 a1 00 00 00       	push   $0xa1
   12d9d:	e8 d3 f9 ff ff       	call   12775 <outb>
   12da2:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12da5:	68 fb 00 00 00       	push   $0xfb
   12daa:	6a 21                	push   $0x21
   12dac:	e8 c4 f9 ff ff       	call   12775 <outb>
   12db1:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12db4:	68 ff 00 00 00       	push   $0xff
   12db9:	68 a1 00 00 00       	push   $0xa1
   12dbe:	e8 b2 f9 ff ff       	call   12775 <outb>
   12dc3:	83 c4 08             	add    $0x8,%esp
}
   12dc6:	90                   	nop
   12dc7:	c9                   	leave  
   12dc8:	c3                   	ret    

00012dc9 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   12dc9:	55                   	push   %ebp
   12dca:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12dcc:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    // 从片也可能需要发送EOI
    if (irq_num >= 8) {
   12dd0:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12dd4:	7e 0f                	jle    12de5 <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12dd6:	6a 20                	push   $0x20
   12dd8:	68 a0 00 00 00       	push   $0xa0
   12ddd:	e8 93 f9 ff ff       	call   12775 <outb>
   12de2:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12de5:	6a 20                	push   $0x20
   12de7:	6a 20                	push   $0x20
   12de9:	e8 87 f9 ff ff       	call   12775 <outb>
   12dee:	83 c4 08             	add    $0x8,%esp
}
   12df1:	90                   	nop
   12df2:	c9                   	leave  
   12df3:	c3                   	ret    

00012df4 <irq_init>:

/**
 * @brief 中断和异常初始化
 */
void irq_init(void) {
   12df4:	55                   	push   %ebp
   12df5:	89 e5                	mov    %esp,%ebp
   12df7:	83 ec 18             	sub    $0x18,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12dfa:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12e01:	eb 25                	jmp    12e28 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   12e03:	ba 28 00 01 00       	mov    $0x10028,%edx
   12e08:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e0b:	c1 e0 03             	shl    $0x3,%eax
   12e0e:	05 00 52 03 00       	add    $0x35200,%eax
   12e13:	68 00 8e 00 00       	push   $0x8e00
   12e18:	52                   	push   %edx
   12e19:	6a 08                	push   $0x8
   12e1b:	50                   	push   %eax
   12e1c:	e8 85 f7 ff ff       	call   125a6 <gate_desc_set>
   12e21:	83 c4 10             	add    $0x10,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e24:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e28:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12e2c:	76 d5                	jbe    12e03 <irq_init+0xf>
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

	// 设置异常处理接口
    irq_install(IRQ0_DE, exception_handler_divider);
   12e2e:	83 ec 08             	sub    $0x8,%esp
   12e31:	68 47 00 01 00       	push   $0x10047
   12e36:	6a 00                	push   $0x0
   12e38:	e8 65 01 00 00       	call   12fa2 <irq_install>
   12e3d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   12e40:	83 ec 08             	sub    $0x8,%esp
   12e43:	68 66 00 01 00       	push   $0x10066
   12e48:	6a 01                	push   $0x1
   12e4a:	e8 53 01 00 00       	call   12fa2 <irq_install>
   12e4f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   12e52:	83 ec 08             	sub    $0x8,%esp
   12e55:	68 85 00 01 00       	push   $0x10085
   12e5a:	6a 02                	push   $0x2
   12e5c:	e8 41 01 00 00       	call   12fa2 <irq_install>
   12e61:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   12e64:	83 ec 08             	sub    $0x8,%esp
   12e67:	68 a4 00 01 00       	push   $0x100a4
   12e6c:	6a 03                	push   $0x3
   12e6e:	e8 2f 01 00 00       	call   12fa2 <irq_install>
   12e73:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   12e76:	83 ec 08             	sub    $0x8,%esp
   12e79:	68 c3 00 01 00       	push   $0x100c3
   12e7e:	6a 04                	push   $0x4
   12e80:	e8 1d 01 00 00       	call   12fa2 <irq_install>
   12e85:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   12e88:	83 ec 08             	sub    $0x8,%esp
   12e8b:	68 e2 00 01 00       	push   $0x100e2
   12e90:	6a 05                	push   $0x5
   12e92:	e8 0b 01 00 00       	call   12fa2 <irq_install>
   12e97:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   12e9a:	83 ec 08             	sub    $0x8,%esp
   12e9d:	68 01 01 01 00       	push   $0x10101
   12ea2:	6a 06                	push   $0x6
   12ea4:	e8 f9 00 00 00       	call   12fa2 <irq_install>
   12ea9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   12eac:	83 ec 08             	sub    $0x8,%esp
   12eaf:	68 20 01 01 00       	push   $0x10120
   12eb4:	6a 07                	push   $0x7
   12eb6:	e8 e7 00 00 00       	call   12fa2 <irq_install>
   12ebb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   12ebe:	83 ec 08             	sub    $0x8,%esp
   12ec1:	68 3f 01 01 00       	push   $0x1013f
   12ec6:	6a 08                	push   $0x8
   12ec8:	e8 d5 00 00 00       	call   12fa2 <irq_install>
   12ecd:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   12ed0:	83 ec 08             	sub    $0x8,%esp
   12ed3:	68 5c 01 01 00       	push   $0x1015c
   12ed8:	6a 0a                	push   $0xa
   12eda:	e8 c3 00 00 00       	call   12fa2 <irq_install>
   12edf:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   12ee2:	83 ec 08             	sub    $0x8,%esp
   12ee5:	68 79 01 01 00       	push   $0x10179
   12eea:	6a 0b                	push   $0xb
   12eec:	e8 b1 00 00 00       	call   12fa2 <irq_install>
   12ef1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   12ef4:	83 ec 08             	sub    $0x8,%esp
   12ef7:	68 96 01 01 00       	push   $0x10196
   12efc:	6a 0c                	push   $0xc
   12efe:	e8 9f 00 00 00       	call   12fa2 <irq_install>
   12f03:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   12f06:	83 ec 08             	sub    $0x8,%esp
   12f09:	68 b3 01 01 00       	push   $0x101b3
   12f0e:	6a 0d                	push   $0xd
   12f10:	e8 8d 00 00 00       	call   12fa2 <irq_install>
   12f15:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   12f18:	83 ec 08             	sub    $0x8,%esp
   12f1b:	68 d0 01 01 00       	push   $0x101d0
   12f20:	6a 0e                	push   $0xe
   12f22:	e8 7b 00 00 00       	call   12fa2 <irq_install>
   12f27:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   12f2a:	83 ec 08             	sub    $0x8,%esp
   12f2d:	68 ed 01 01 00       	push   $0x101ed
   12f32:	6a 10                	push   $0x10
   12f34:	e8 69 00 00 00       	call   12fa2 <irq_install>
   12f39:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   12f3c:	83 ec 08             	sub    $0x8,%esp
   12f3f:	68 0c 02 01 00       	push   $0x1020c
   12f44:	6a 11                	push   $0x11
   12f46:	e8 57 00 00 00       	call   12fa2 <irq_install>
   12f4b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   12f4e:	83 ec 08             	sub    $0x8,%esp
   12f51:	68 29 02 01 00       	push   $0x10229
   12f56:	6a 12                	push   $0x12
   12f58:	e8 45 00 00 00       	call   12fa2 <irq_install>
   12f5d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   12f60:	83 ec 08             	sub    $0x8,%esp
   12f63:	68 48 02 01 00       	push   $0x10248
   12f68:	6a 13                	push   $0x13
   12f6a:	e8 33 00 00 00       	call   12fa2 <irq_install>
   12f6f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   12f72:	83 ec 08             	sub    $0x8,%esp
   12f75:	68 67 02 01 00       	push   $0x10267
   12f7a:	6a 14                	push   $0x14
   12f7c:	e8 21 00 00 00       	call   12fa2 <irq_install>
   12f81:	83 c4 10             	add    $0x10,%esp


	lidt((uint32_t)idt_table, sizeof(idt_table));
   12f84:	b8 00 52 03 00       	mov    $0x35200,%eax
   12f89:	83 ec 08             	sub    $0x8,%esp
   12f8c:	68 00 04 00 00       	push   $0x400
   12f91:	50                   	push   %eax
   12f92:	e8 1e f8 ff ff       	call   127b5 <lidt>
   12f97:	83 c4 10             	add    $0x10,%esp

	// 初始化pic 控制器
	init_pic();
   12f9a:	e8 97 fd ff ff       	call   12d36 <init_pic>
}
   12f9f:	90                   	nop
   12fa0:	c9                   	leave  
   12fa1:	c3                   	ret    

00012fa2 <irq_install>:

/**
 * @brief 安装中断或异常处理程序
 */
int irq_install(int irq_num, irq_handler_t handler) {
   12fa2:	55                   	push   %ebp
   12fa3:	89 e5                	mov    %esp,%ebp
   12fa5:	83 ec 08             	sub    $0x8,%esp
	if (irq_num >= IDT_TABLE_NR) {
   12fa8:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12fac:	7e 07                	jle    12fb5 <irq_install+0x13>
		return -1;
   12fae:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fb3:	eb 25                	jmp    12fda <irq_install+0x38>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   12fb5:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fb8:	8b 55 08             	mov    0x8(%ebp),%edx
   12fbb:	c1 e2 03             	shl    $0x3,%edx
   12fbe:	81 c2 00 52 03 00    	add    $0x35200,%edx
   12fc4:	68 00 8e 00 00       	push   $0x8e00
   12fc9:	50                   	push   %eax
   12fca:	6a 08                	push   $0x8
   12fcc:	52                   	push   %edx
   12fcd:	e8 d4 f5 ff ff       	call   125a6 <gate_desc_set>
   12fd2:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   12fd5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fda:	c9                   	leave  
   12fdb:	c3                   	ret    

00012fdc <irq_enable>:

void irq_enable(int irq_num) {
   12fdc:	55                   	push   %ebp
   12fdd:	89 e5                	mov    %esp,%ebp
   12fdf:	53                   	push   %ebx
   12fe0:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12fe3:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12fe7:	7e 78                	jle    13061 <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   12fe9:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12fed:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12ff1:	7f 32                	jg     13025 <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12ff3:	6a 21                	push   $0x21
   12ff5:	e8 5e f7 ff ff       	call   12758 <inb>
   12ffa:	83 c4 04             	add    $0x4,%esp
   12ffd:	89 c3                	mov    %eax,%ebx
   12fff:	8b 45 08             	mov    0x8(%ebp),%eax
   13002:	ba 01 00 00 00       	mov    $0x1,%edx
   13007:	89 c1                	mov    %eax,%ecx
   13009:	d3 e2                	shl    %cl,%edx
   1300b:	89 d0                	mov    %edx,%eax
   1300d:	f7 d0                	not    %eax
   1300f:	21 d8                	and    %ebx,%eax
   13011:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   13014:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13018:	50                   	push   %eax
   13019:	6a 21                	push   $0x21
   1301b:	e8 55 f7 ff ff       	call   12775 <outb>
   13020:	83 c4 08             	add    $0x8,%esp
   13023:	eb 3d                	jmp    13062 <irq_enable+0x86>
    } else {
        irq_num -= 8;
   13025:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   13029:	68 a1 00 00 00       	push   $0xa1
   1302e:	e8 25 f7 ff ff       	call   12758 <inb>
   13033:	83 c4 04             	add    $0x4,%esp
   13036:	89 c3                	mov    %eax,%ebx
   13038:	8b 45 08             	mov    0x8(%ebp),%eax
   1303b:	ba 01 00 00 00       	mov    $0x1,%edx
   13040:	89 c1                	mov    %eax,%ecx
   13042:	d3 e2                	shl    %cl,%edx
   13044:	89 d0                	mov    %edx,%eax
   13046:	f7 d0                	not    %eax
   13048:	21 d8                	and    %ebx,%eax
   1304a:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1304d:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   13051:	50                   	push   %eax
   13052:	68 a1 00 00 00       	push   $0xa1
   13057:	e8 19 f7 ff ff       	call   12775 <outb>
   1305c:	83 c4 08             	add    $0x8,%esp
   1305f:	eb 01                	jmp    13062 <irq_enable+0x86>
        return;
   13061:	90                   	nop
    }
}
   13062:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13065:	c9                   	leave  
   13066:	c3                   	ret    

00013067 <irq_disable>:

void irq_disable(int irq_num) {
   13067:	55                   	push   %ebp
   13068:	89 e5                	mov    %esp,%ebp
   1306a:	53                   	push   %ebx
   1306b:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   1306e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   13072:	7e 74                	jle    130e8 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   13074:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   13078:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1307c:	7f 30                	jg     130ae <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   1307e:	6a 21                	push   $0x21
   13080:	e8 d3 f6 ff ff       	call   12758 <inb>
   13085:	83 c4 04             	add    $0x4,%esp
   13088:	89 c3                	mov    %eax,%ebx
   1308a:	8b 45 08             	mov    0x8(%ebp),%eax
   1308d:	ba 01 00 00 00       	mov    $0x1,%edx
   13092:	89 c1                	mov    %eax,%ecx
   13094:	d3 e2                	shl    %cl,%edx
   13096:	89 d0                	mov    %edx,%eax
   13098:	09 d8                	or     %ebx,%eax
   1309a:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   1309d:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   130a1:	50                   	push   %eax
   130a2:	6a 21                	push   $0x21
   130a4:	e8 cc f6 ff ff       	call   12775 <outb>
   130a9:	83 c4 08             	add    $0x8,%esp
   130ac:	eb 3b                	jmp    130e9 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   130ae:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   130b2:	68 a1 00 00 00       	push   $0xa1
   130b7:	e8 9c f6 ff ff       	call   12758 <inb>
   130bc:	83 c4 04             	add    $0x4,%esp
   130bf:	89 c3                	mov    %eax,%ebx
   130c1:	8b 45 08             	mov    0x8(%ebp),%eax
   130c4:	ba 01 00 00 00       	mov    $0x1,%edx
   130c9:	89 c1                	mov    %eax,%ecx
   130cb:	d3 e2                	shl    %cl,%edx
   130cd:	89 d0                	mov    %edx,%eax
   130cf:	09 d8                	or     %ebx,%eax
   130d1:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   130d4:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   130d8:	50                   	push   %eax
   130d9:	68 a1 00 00 00       	push   $0xa1
   130de:	e8 92 f6 ff ff       	call   12775 <outb>
   130e3:	83 c4 08             	add    $0x8,%esp
   130e6:	eb 01                	jmp    130e9 <irq_disable+0x82>
        return;
   130e8:	90                   	nop
    }
}
   130e9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   130ec:	c9                   	leave  
   130ed:	c3                   	ret    

000130ee <irq_disable_global>:

void irq_disable_global(void) {
   130ee:	55                   	push   %ebp
   130ef:	89 e5                	mov    %esp,%ebp
    cli();
   130f1:	e8 a0 f6 ff ff       	call   12796 <cli>
}
   130f6:	90                   	nop
   130f7:	5d                   	pop    %ebp
   130f8:	c3                   	ret    

000130f9 <irq_enable_global>:

void irq_enable_global(void) {
   130f9:	55                   	push   %ebp
   130fa:	89 e5                	mov    %esp,%ebp
    sti();
   130fc:	e8 9c f6 ff ff       	call   1279d <sti>
}
   13101:	90                   	nop
   13102:	5d                   	pop    %ebp
   13103:	c3                   	ret    

00013104 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection (void) {
   13104:	55                   	push   %ebp
   13105:	89 e5                	mov    %esp,%ebp
   13107:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   1310a:	e8 d5 f6 ff ff       	call   127e4 <read_eflags>
   1310f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   13112:	e8 d7 ff ff ff       	call   130ee <irq_disable_global>
    return state;
   13117:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1311a:	c9                   	leave  
   1311b:	c3                   	ret    

0001311c <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection (irq_state_t state) {
   1311c:	55                   	push   %ebp
   1311d:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   1311f:	ff 75 08             	push   0x8(%ebp)
   13122:	e8 cd f6 ff ff       	call   127f4 <write_eflags>
   13127:	83 c4 04             	add    $0x4,%esp
}
   1312a:	90                   	nop
   1312b:	c9                   	leave  
   1312c:	c3                   	ret    

0001312d <inb>:
static inline uint8_t inb(uint16_t  port) {
   1312d:	55                   	push   %ebp
   1312e:	89 e5                	mov    %esp,%ebp
   13130:	83 ec 14             	sub    $0x14,%esp
   13133:	8b 45 08             	mov    0x8(%ebp),%eax
   13136:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   1313a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1313e:	89 c2                	mov    %eax,%edx
   13140:	ec                   	in     (%dx),%al
   13141:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   13144:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13148:	c9                   	leave  
   13149:	c3                   	ret    

0001314a <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   1314a:	55                   	push   %ebp
   1314b:	89 e5                	mov    %esp,%ebp
   1314d:	83 ec 08             	sub    $0x8,%esp
   13150:	8b 45 08             	mov    0x8(%ebp),%eax
   13153:	8b 55 0c             	mov    0xc(%ebp),%edx
   13156:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   1315a:	89 d0                	mov    %edx,%eax
   1315c:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   1315f:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13163:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13167:	ee                   	out    %al,(%dx)
}
   13168:	90                   	nop
   13169:	c9                   	leave  
   1316a:	c3                   	ret    

0001316b <read_cursor_pos>:
static console_t console_buf[CONSOLE_NR];

/**
 * @brief 读取当前光标的位置
 */
static int read_cursor_pos (void) {
   1316b:	55                   	push   %ebp
   1316c:	89 e5                	mov    %esp,%ebp
   1316e:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   13171:	e8 8e ff ff ff       	call   13104 <irq_enter_protection>
   13176:	89 45 f4             	mov    %eax,-0xc(%ebp)
 	outb(0x3D4, 0x0F);		// 写低地址
   13179:	83 ec 08             	sub    $0x8,%esp
   1317c:	6a 0f                	push   $0xf
   1317e:	68 d4 03 00 00       	push   $0x3d4
   13183:	e8 c2 ff ff ff       	call   1314a <outb>
   13188:	83 c4 10             	add    $0x10,%esp
	pos = inb(0x3D5);
   1318b:	83 ec 0c             	sub    $0xc,%esp
   1318e:	68 d5 03 00 00       	push   $0x3d5
   13193:	e8 95 ff ff ff       	call   1312d <inb>
   13198:	83 c4 10             	add    $0x10,%esp
   1319b:	0f b6 c0             	movzbl %al,%eax
   1319e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0E);		// 写高地址
   131a1:	83 ec 08             	sub    $0x8,%esp
   131a4:	6a 0e                	push   $0xe
   131a6:	68 d4 03 00 00       	push   $0x3d4
   131ab:	e8 9a ff ff ff       	call   1314a <outb>
   131b0:	83 c4 10             	add    $0x10,%esp
	pos |= inb(0x3D5) << 8;   
   131b3:	83 ec 0c             	sub    $0xc,%esp
   131b6:	68 d5 03 00 00       	push   $0x3d5
   131bb:	e8 6d ff ff ff       	call   1312d <inb>
   131c0:	83 c4 10             	add    $0x10,%esp
   131c3:	0f b6 c0             	movzbl %al,%eax
   131c6:	c1 e0 08             	shl    $0x8,%eax
   131c9:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   131cc:	83 ec 0c             	sub    $0xc,%esp
   131cf:	ff 75 f4             	push   -0xc(%ebp)
   131d2:	e8 45 ff ff ff       	call   1311c <irq_leave_protection>
   131d7:	83 c4 10             	add    $0x10,%esp
    return pos;
   131da:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   131dd:	c9                   	leave  
   131de:	c3                   	ret    

000131df <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos (console_t * console) {
   131df:	55                   	push   %ebp
   131e0:	89 e5                	mov    %esp,%ebp
   131e2:	83 ec 18             	sub    $0x18,%esp
	uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   131e5:	8b 45 08             	mov    0x8(%ebp),%eax
   131e8:	2d 00 56 03 00       	sub    $0x35600,%eax
   131ed:	c1 f8 03             	sar    $0x3,%eax
   131f0:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   131f6:	89 c2                	mov    %eax,%edx
   131f8:	8b 45 08             	mov    0x8(%ebp),%eax
   131fb:	8b 40 14             	mov    0x14(%eax),%eax
   131fe:	89 c1                	mov    %eax,%ecx
   13200:	8b 45 08             	mov    0x8(%ebp),%eax
   13203:	8b 40 10             	mov    0x10(%eax),%eax
   13206:	0f af c1             	imul   %ecx,%eax
   13209:	0f af c2             	imul   %edx,%eax
   1320c:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row *  console->display_cols + console->cursor_col;
   13210:	8b 45 08             	mov    0x8(%ebp),%eax
   13213:	8b 40 08             	mov    0x8(%eax),%eax
   13216:	89 c2                	mov    %eax,%edx
   13218:	8b 45 08             	mov    0x8(%ebp),%eax
   1321b:	8b 40 14             	mov    0x14(%eax),%eax
   1321e:	0f af d0             	imul   %eax,%edx
   13221:	8b 45 08             	mov    0x8(%ebp),%eax
   13224:	8b 40 0c             	mov    0xc(%eax),%eax
   13227:	01 d0                	add    %edx,%eax
   13229:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   1322d:	e8 d2 fe ff ff       	call   13104 <irq_enter_protection>
   13232:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0F);		// 写低地址
   13235:	83 ec 08             	sub    $0x8,%esp
   13238:	6a 0f                	push   $0xf
   1323a:	68 d4 03 00 00       	push   $0x3d4
   1323f:	e8 06 ff ff ff       	call   1314a <outb>
   13244:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13247:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1324b:	0f b6 c0             	movzbl %al,%eax
   1324e:	83 ec 08             	sub    $0x8,%esp
   13251:	50                   	push   %eax
   13252:	68 d5 03 00 00       	push   $0x3d5
   13257:	e8 ee fe ff ff       	call   1314a <outb>
   1325c:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0x0E);		// 写高地址
   1325f:	83 ec 08             	sub    $0x8,%esp
   13262:	6a 0e                	push   $0xe
   13264:	68 d4 03 00 00       	push   $0x3d4
   13269:	e8 dc fe ff ff       	call   1314a <outb>
   1326e:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   13271:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13275:	66 c1 e8 08          	shr    $0x8,%ax
   13279:	0f b6 c0             	movzbl %al,%eax
   1327c:	83 ec 08             	sub    $0x8,%esp
   1327f:	50                   	push   %eax
   13280:	68 d5 03 00 00       	push   $0x3d5
   13285:	e8 c0 fe ff ff       	call   1314a <outb>
   1328a:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   1328d:	83 ec 0c             	sub    $0xc,%esp
   13290:	ff 75 f0             	push   -0x10(%ebp)
   13293:	e8 84 fe ff ff       	call   1311c <irq_leave_protection>
   13298:	83 c4 10             	add    $0x10,%esp
}
   1329b:	90                   	nop
   1329c:	c9                   	leave  
   1329d:	c3                   	ret    

0001329e <console_set_cursor>:

void console_set_cursor(int idx, int visiable) {
   1329e:	55                   	push   %ebp
   1329f:	89 e5                	mov    %esp,%ebp
   132a1:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   132a4:	8b 45 08             	mov    0x8(%ebp),%eax
   132a7:	6b c0 68             	imul   $0x68,%eax,%eax
   132aa:	05 00 56 03 00       	add    $0x35600,%eax
   132af:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   132b2:	e8 4d fe ff ff       	call   13104 <irq_enter_protection>
   132b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (visiable) {
   132ba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   132be:	74 79                	je     13339 <console_set_cursor+0x9b>
        outb(0x3D4, 0x0A);
   132c0:	83 ec 08             	sub    $0x8,%esp
   132c3:	6a 0a                	push   $0xa
   132c5:	68 d4 03 00 00       	push   $0x3d4
   132ca:	e8 7b fe ff ff       	call   1314a <outb>
   132cf:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xC0) | 0);
   132d2:	83 ec 0c             	sub    $0xc,%esp
   132d5:	68 d5 03 00 00       	push   $0x3d5
   132da:	e8 4e fe ff ff       	call   1312d <inb>
   132df:	83 c4 10             	add    $0x10,%esp
   132e2:	0f b6 c0             	movzbl %al,%eax
   132e5:	25 c0 00 00 00       	and    $0xc0,%eax
   132ea:	83 ec 08             	sub    $0x8,%esp
   132ed:	50                   	push   %eax
   132ee:	68 d5 03 00 00       	push   $0x3d5
   132f3:	e8 52 fe ff ff       	call   1314a <outb>
   132f8:	83 c4 10             	add    $0x10,%esp
        outb(0x3D4, 0x0B);
   132fb:	83 ec 08             	sub    $0x8,%esp
   132fe:	6a 0b                	push   $0xb
   13300:	68 d4 03 00 00       	push   $0x3d4
   13305:	e8 40 fe ff ff       	call   1314a <outb>
   1330a:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xE0) | 15);
   1330d:	83 ec 0c             	sub    $0xc,%esp
   13310:	68 d5 03 00 00       	push   $0x3d5
   13315:	e8 13 fe ff ff       	call   1312d <inb>
   1331a:	83 c4 10             	add    $0x10,%esp
   1331d:	83 e0 e0             	and    $0xffffffe0,%eax
   13320:	83 c8 0f             	or     $0xf,%eax
   13323:	0f b6 c0             	movzbl %al,%eax
   13326:	83 ec 08             	sub    $0x8,%esp
   13329:	50                   	push   %eax
   1332a:	68 d5 03 00 00       	push   $0x3d5
   1332f:	e8 16 fe ff ff       	call   1314a <outb>
   13334:	83 c4 10             	add    $0x10,%esp
   13337:	eb 24                	jmp    1335d <console_set_cursor+0xbf>
    } else {
        outb(0x3D4, 0x0A);
   13339:	83 ec 08             	sub    $0x8,%esp
   1333c:	6a 0a                	push   $0xa
   1333e:	68 d4 03 00 00       	push   $0x3d4
   13343:	e8 02 fe ff ff       	call   1314a <outb>
   13348:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, 0x20);
   1334b:	83 ec 08             	sub    $0x8,%esp
   1334e:	6a 20                	push   $0x20
   13350:	68 d5 03 00 00       	push   $0x3d5
   13355:	e8 f0 fd ff ff       	call   1314a <outb>
   1335a:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   1335d:	83 ec 0c             	sub    $0xc,%esp
   13360:	ff 75 f0             	push   -0x10(%ebp)
   13363:	e8 b4 fd ff ff       	call   1311c <irq_leave_protection>
   13368:	83 c4 10             	add    $0x10,%esp
}
   1336b:	90                   	nop
   1336c:	c9                   	leave  
   1336d:	c3                   	ret    

0001336e <console_select>:


void console_select(int idx) {
   1336e:	55                   	push   %ebp
   1336f:	89 e5                	mov    %esp,%ebp
   13371:	83 ec 18             	sub    $0x18,%esp
    console_t * console = console_buf + idx;
   13374:	8b 45 08             	mov    0x8(%ebp),%eax
   13377:	6b c0 68             	imul   $0x68,%eax,%eax
   1337a:	05 00 56 03 00       	add    $0x35600,%eax
   1337f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {
   13382:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13385:	8b 00                	mov    (%eax),%eax
   13387:	85 c0                	test   %eax,%eax
   13389:	75 0e                	jne    13399 <console_select+0x2b>
        // 可能没有初始化，先初始化一下
        console_init(idx);
   1338b:	83 ec 0c             	sub    $0xc,%esp
   1338e:	ff 75 08             	push   0x8(%ebp)
   13391:	e8 a1 04 00 00       	call   13837 <console_init>
   13396:	83 c4 10             	add    $0x10,%esp
    }

	uint16_t pos = idx * console->display_cols * console->display_rows;
   13399:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1339c:	8b 40 14             	mov    0x14(%eax),%eax
   1339f:	89 c2                	mov    %eax,%edx
   133a1:	8b 45 08             	mov    0x8(%ebp),%eax
   133a4:	0f af d0             	imul   %eax,%edx
   133a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133aa:	8b 40 10             	mov    0x10(%eax),%eax
   133ad:	0f af c2             	imul   %edx,%eax
   133b0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

	outb(0x3D4, 0xC);		// 写高地址
   133b4:	83 ec 08             	sub    $0x8,%esp
   133b7:	6a 0c                	push   $0xc
   133b9:	68 d4 03 00 00       	push   $0x3d4
   133be:	e8 87 fd ff ff       	call   1314a <outb>
   133c3:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   133c6:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   133ca:	66 c1 e8 08          	shr    $0x8,%ax
   133ce:	0f b6 c0             	movzbl %al,%eax
   133d1:	83 ec 08             	sub    $0x8,%esp
   133d4:	50                   	push   %eax
   133d5:	68 d5 03 00 00       	push   $0x3d5
   133da:	e8 6b fd ff ff       	call   1314a <outb>
   133df:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0xD);		// 写低地址
   133e2:	83 ec 08             	sub    $0x8,%esp
   133e5:	6a 0d                	push   $0xd
   133e7:	68 d4 03 00 00       	push   $0x3d4
   133ec:	e8 59 fd ff ff       	call   1314a <outb>
   133f1:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   133f4:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   133f8:	0f b6 c0             	movzbl %al,%eax
   133fb:	83 ec 08             	sub    $0x8,%esp
   133fe:	50                   	push   %eax
   133ff:	68 d5 03 00 00       	push   $0x3d5
   13404:	e8 41 fd ff ff       	call   1314a <outb>
   13409:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    update_cursor_pos(console);
   1340c:	83 ec 0c             	sub    $0xc,%esp
   1340f:	ff 75 f4             	push   -0xc(%ebp)
   13412:	e8 c8 fd ff ff       	call   131df <update_cursor_pos>
   13417:	83 c4 10             	add    $0x10,%esp
}
   1341a:	90                   	nop
   1341b:	c9                   	leave  
   1341c:	c3                   	ret    

0001341d <erase_rows>:
/**
 * @brief 擦除从start到end的行
 */
static void erase_rows (console_t * console, int start, int end) {
   1341d:	55                   	push   %ebp
   1341e:	89 e5                	mov    %esp,%ebp
   13420:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t * disp_start = console->disp_base + console->display_cols * start;
   13423:	8b 45 08             	mov    0x8(%ebp),%eax
   13426:	8b 10                	mov    (%eax),%edx
   13428:	8b 45 08             	mov    0x8(%ebp),%eax
   1342b:	8b 40 14             	mov    0x14(%eax),%eax
   1342e:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13432:	01 c0                	add    %eax,%eax
   13434:	01 d0                	add    %edx,%eax
   13436:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t * disp_end = console->disp_base + console->display_cols * (end + 1);
   13439:	8b 45 08             	mov    0x8(%ebp),%eax
   1343c:	8b 08                	mov    (%eax),%ecx
   1343e:	8b 45 08             	mov    0x8(%ebp),%eax
   13441:	8b 40 14             	mov    0x14(%eax),%eax
   13444:	8b 55 10             	mov    0x10(%ebp),%edx
   13447:	83 c2 01             	add    $0x1,%edx
   1344a:	0f af c2             	imul   %edx,%eax
   1344d:	01 c0                	add    %eax,%eax
   1344f:	01 c8                	add    %ecx,%eax
   13451:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end) {
   13454:	eb 4d                	jmp    134a3 <erase_rows+0x86>
        disp_start->c = ' ';
   13456:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13459:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   1345c:	8b 45 08             	mov    0x8(%ebp),%eax
   1345f:	8b 40 20             	mov    0x20(%eax),%eax
   13462:	c1 e0 04             	shl    $0x4,%eax
   13465:	c0 f8 04             	sar    $0x4,%al
   13468:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1346b:	83 e0 0f             	and    $0xf,%eax
   1346e:	89 c1                	mov    %eax,%ecx
   13470:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13474:	83 e0 f0             	and    $0xfffffff0,%eax
   13477:	09 c8                	or     %ecx,%eax
   13479:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   1347c:	8b 45 08             	mov    0x8(%ebp),%eax
   1347f:	8b 40 24             	mov    0x24(%eax),%eax
   13482:	c1 e0 05             	shl    $0x5,%eax
   13485:	c0 f8 05             	sar    $0x5,%al
   13488:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1348b:	83 e0 07             	and    $0x7,%eax
   1348e:	c1 e0 04             	shl    $0x4,%eax
   13491:	89 c1                	mov    %eax,%ecx
   13493:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13497:	83 e0 8f             	and    $0xffffff8f,%eax
   1349a:	09 c8                	or     %ecx,%eax
   1349c:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   1349f:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end) {
   134a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134a6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   134a9:	72 ab                	jb     13456 <erase_rows+0x39>
    }
}
   134ab:	90                   	nop
   134ac:	90                   	nop
   134ad:	c9                   	leave  
   134ae:	c3                   	ret    

000134af <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t * console, int lines) {
   134af:	55                   	push   %ebp
   134b0:	89 e5                	mov    %esp,%ebp
   134b2:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t * dest = console->disp_base;
   134b5:	8b 45 08             	mov    0x8(%ebp),%eax
   134b8:	8b 00                	mov    (%eax),%eax
   134ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t * src = console->disp_base + console->display_cols * lines;
   134bd:	8b 45 08             	mov    0x8(%ebp),%eax
   134c0:	8b 10                	mov    (%eax),%edx
   134c2:	8b 45 08             	mov    0x8(%ebp),%eax
   134c5:	8b 40 14             	mov    0x14(%eax),%eax
   134c8:	0f af 45 0c          	imul   0xc(%ebp),%eax
   134cc:	01 c0                	add    %eax,%eax
   134ce:	01 d0                	add    %edx,%eax
   134d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   134d3:	8b 45 08             	mov    0x8(%ebp),%eax
   134d6:	8b 40 10             	mov    0x10(%eax),%eax
   134d9:	2b 45 0c             	sub    0xc(%ebp),%eax
   134dc:	89 c2                	mov    %eax,%edx
   134de:	8b 45 08             	mov    0x8(%ebp),%eax
   134e1:	8b 40 14             	mov    0x14(%eax),%eax
   134e4:	0f af c2             	imul   %edx,%eax
   134e7:	01 c0                	add    %eax,%eax
   134e9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   134ec:	8b 45 ec             	mov    -0x14(%ebp),%eax
   134ef:	83 ec 04             	sub    $0x4,%esp
   134f2:	50                   	push   %eax
   134f3:	ff 75 f0             	push   -0x10(%ebp)
   134f6:	ff 75 f4             	push   -0xc(%ebp)
   134f9:	e8 18 4f 00 00       	call   18416 <kernel_memcpy>
   134fe:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13501:	8b 45 08             	mov    0x8(%ebp),%eax
   13504:	8b 40 10             	mov    0x10(%eax),%eax
   13507:	8d 50 ff             	lea    -0x1(%eax),%edx
   1350a:	8b 45 08             	mov    0x8(%ebp),%eax
   1350d:	8b 40 10             	mov    0x10(%eax),%eax
   13510:	2b 45 0c             	sub    0xc(%ebp),%eax
   13513:	83 ec 04             	sub    $0x4,%esp
   13516:	52                   	push   %edx
   13517:	50                   	push   %eax
   13518:	ff 75 08             	push   0x8(%ebp)
   1351b:	e8 fd fe ff ff       	call   1341d <erase_rows>
   13520:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   13523:	8b 45 08             	mov    0x8(%ebp),%eax
   13526:	8b 40 08             	mov    0x8(%eax),%eax
   13529:	2b 45 0c             	sub    0xc(%ebp),%eax
   1352c:	89 c2                	mov    %eax,%edx
   1352e:	8b 45 08             	mov    0x8(%ebp),%eax
   13531:	89 50 08             	mov    %edx,0x8(%eax)
}
   13534:	90                   	nop
   13535:	c9                   	leave  
   13536:	c3                   	ret    

00013537 <move_to_col0>:

static void move_to_col0 (console_t * console) {
   13537:	55                   	push   %ebp
   13538:	89 e5                	mov    %esp,%ebp
	console->cursor_col = 0;
   1353a:	8b 45 08             	mov    0x8(%ebp),%eax
   1353d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13544:	90                   	nop
   13545:	5d                   	pop    %ebp
   13546:	c3                   	ret    

00013547 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line (console_t * console) {
   13547:	55                   	push   %ebp
   13548:	89 e5                	mov    %esp,%ebp
   1354a:	83 ec 08             	sub    $0x8,%esp
	console->cursor_row++;
   1354d:	8b 45 08             	mov    0x8(%ebp),%eax
   13550:	8b 40 08             	mov    0x8(%eax),%eax
   13553:	8d 50 01             	lea    0x1(%eax),%edx
   13556:	8b 45 08             	mov    0x8(%ebp),%eax
   13559:	89 50 08             	mov    %edx,0x8(%eax)

	// 超出当前屏幕显示的所有行，上移一行
	if (console->cursor_row >= console->display_rows) {
   1355c:	8b 45 08             	mov    0x8(%ebp),%eax
   1355f:	8b 50 08             	mov    0x8(%eax),%edx
   13562:	8b 45 08             	mov    0x8(%ebp),%eax
   13565:	8b 40 10             	mov    0x10(%eax),%eax
   13568:	39 c2                	cmp    %eax,%edx
   1356a:	7c 10                	jl     1357c <move_next_line+0x35>
		scroll_up(console, 1);
   1356c:	83 ec 08             	sub    $0x8,%esp
   1356f:	6a 01                	push   $0x1
   13571:	ff 75 08             	push   0x8(%ebp)
   13574:	e8 36 ff ff ff       	call   134af <scroll_up>
   13579:	83 c4 10             	add    $0x10,%esp
	}
}
   1357c:	90                   	nop
   1357d:	c9                   	leave  
   1357e:	c3                   	ret    

0001357f <move_forward>:

/**
 * 将光标往前移一个字符
 */
static void move_forward (console_t * console, int n) {
   1357f:	55                   	push   %ebp
   13580:	89 e5                	mov    %esp,%ebp
   13582:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < n; i++) {
   13585:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1358c:	eb 5c                	jmp    135ea <move_forward+0x6b>
		if (++console->cursor_col >= console->display_cols) {
   1358e:	8b 45 08             	mov    0x8(%ebp),%eax
   13591:	8b 40 0c             	mov    0xc(%eax),%eax
   13594:	8d 50 01             	lea    0x1(%eax),%edx
   13597:	8b 45 08             	mov    0x8(%ebp),%eax
   1359a:	89 50 0c             	mov    %edx,0xc(%eax)
   1359d:	8b 45 08             	mov    0x8(%ebp),%eax
   135a0:	8b 50 0c             	mov    0xc(%eax),%edx
   135a3:	8b 45 08             	mov    0x8(%ebp),%eax
   135a6:	8b 40 14             	mov    0x14(%eax),%eax
   135a9:	39 c2                	cmp    %eax,%edx
   135ab:	7c 39                	jl     135e6 <move_forward+0x67>
			console->cursor_col = 0;
   135ad:	8b 45 08             	mov    0x8(%ebp),%eax
   135b0:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   135b7:	8b 45 08             	mov    0x8(%ebp),%eax
   135ba:	8b 40 08             	mov    0x8(%eax),%eax
   135bd:	8d 50 01             	lea    0x1(%eax),%edx
   135c0:	8b 45 08             	mov    0x8(%ebp),%eax
   135c3:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows) {
   135c6:	8b 45 08             	mov    0x8(%ebp),%eax
   135c9:	8b 50 08             	mov    0x8(%eax),%edx
   135cc:	8b 45 08             	mov    0x8(%ebp),%eax
   135cf:	8b 40 10             	mov    0x10(%eax),%eax
   135d2:	39 c2                	cmp    %eax,%edx
   135d4:	7c 10                	jl     135e6 <move_forward+0x67>
                // 超出末端，上移
                scroll_up(console, 1);
   135d6:	83 ec 08             	sub    $0x8,%esp
   135d9:	6a 01                	push   $0x1
   135db:	ff 75 08             	push   0x8(%ebp)
   135de:	e8 cc fe ff ff       	call   134af <scroll_up>
   135e3:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < n; i++) {
   135e6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   135ea:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135ed:	3b 45 0c             	cmp    0xc(%ebp),%eax
   135f0:	7c 9c                	jl     1358e <move_forward+0xf>
            }
        }
	}
}
   135f2:	90                   	nop
   135f3:	90                   	nop
   135f4:	c9                   	leave  
   135f5:	c3                   	ret    

000135f6 <show_char>:

/**
 * 在当前位置显示一个字符
 */
static void show_char(console_t * console, char c) {
   135f6:	55                   	push   %ebp
   135f7:	89 e5                	mov    %esp,%ebp
   135f9:	83 ec 28             	sub    $0x28,%esp
   135fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   135ff:	88 45 e4             	mov    %al,-0x1c(%ebp)
    // 每显示一个字符，都进行计算，效率有点低。不过这样直观简单
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   13602:	8b 45 08             	mov    0x8(%ebp),%eax
   13605:	8b 48 0c             	mov    0xc(%eax),%ecx
   13608:	8b 45 08             	mov    0x8(%ebp),%eax
   1360b:	8b 50 08             	mov    0x8(%eax),%edx
   1360e:	8b 45 08             	mov    0x8(%ebp),%eax
   13611:	8b 40 14             	mov    0x14(%eax),%eax
   13614:	0f af c2             	imul   %edx,%eax
   13617:	01 c8                	add    %ecx,%eax
   13619:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * p = console->disp_base + offset;
   1361c:	8b 45 08             	mov    0x8(%ebp),%eax
   1361f:	8b 10                	mov    (%eax),%edx
   13621:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13624:	01 c0                	add    %eax,%eax
   13626:	01 d0                	add    %edx,%eax
   13628:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   1362b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1362e:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   13632:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   13634:	8b 45 08             	mov    0x8(%ebp),%eax
   13637:	8b 40 20             	mov    0x20(%eax),%eax
   1363a:	c1 e0 04             	shl    $0x4,%eax
   1363d:	c0 f8 04             	sar    $0x4,%al
   13640:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13643:	83 e0 0f             	and    $0xf,%eax
   13646:	89 c1                	mov    %eax,%ecx
   13648:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1364c:	83 e0 f0             	and    $0xfffffff0,%eax
   1364f:	09 c8                	or     %ecx,%eax
   13651:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   13654:	8b 45 08             	mov    0x8(%ebp),%eax
   13657:	8b 40 24             	mov    0x24(%eax),%eax
   1365a:	c1 e0 05             	shl    $0x5,%eax
   1365d:	c0 f8 05             	sar    $0x5,%al
   13660:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13663:	83 e0 07             	and    $0x7,%eax
   13666:	c1 e0 04             	shl    $0x4,%eax
   13669:	89 c1                	mov    %eax,%ecx
   1366b:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1366f:	83 e0 8f             	and    $0xffffff8f,%eax
   13672:	09 c8                	or     %ecx,%eax
   13674:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   13677:	83 ec 08             	sub    $0x8,%esp
   1367a:	6a 01                	push   $0x1
   1367c:	ff 75 08             	push   0x8(%ebp)
   1367f:	e8 fb fe ff ff       	call   1357f <move_forward>
   13684:	83 c4 10             	add    $0x10,%esp
}
   13687:	90                   	nop
   13688:	c9                   	leave  
   13689:	c3                   	ret    

0001368a <move_backword>:

/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword (console_t * console, int n) {
   1368a:	55                   	push   %ebp
   1368b:	89 e5                	mov    %esp,%ebp
   1368d:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   13690:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++) {
   13697:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1369e:	eb 55                	jmp    136f5 <move_backword+0x6b>
        if (console->cursor_col > 0) {
   136a0:	8b 45 08             	mov    0x8(%ebp),%eax
   136a3:	8b 40 0c             	mov    0xc(%eax),%eax
   136a6:	85 c0                	test   %eax,%eax
   136a8:	7e 18                	jle    136c2 <move_backword+0x38>
            // 非列超始处,可回退
            console->cursor_col--;
   136aa:	8b 45 08             	mov    0x8(%ebp),%eax
   136ad:	8b 40 0c             	mov    0xc(%eax),%eax
   136b0:	8d 50 ff             	lea    -0x1(%eax),%edx
   136b3:	8b 45 08             	mov    0x8(%ebp),%eax
   136b6:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136b9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   136c0:	eb 2f                	jmp    136f1 <move_backword+0x67>
        } else if (console->cursor_row > 0) {
   136c2:	8b 45 08             	mov    0x8(%ebp),%eax
   136c5:	8b 40 08             	mov    0x8(%eax),%eax
   136c8:	85 c0                	test   %eax,%eax
   136ca:	7e 25                	jle    136f1 <move_backword+0x67>
            // 列起始处，但非首行，可回腿
            console->cursor_row--;
   136cc:	8b 45 08             	mov    0x8(%ebp),%eax
   136cf:	8b 40 08             	mov    0x8(%eax),%eax
   136d2:	8d 50 ff             	lea    -0x1(%eax),%edx
   136d5:	8b 45 08             	mov    0x8(%ebp),%eax
   136d8:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   136db:	8b 45 08             	mov    0x8(%ebp),%eax
   136de:	8b 40 14             	mov    0x14(%eax),%eax
   136e1:	8d 50 ff             	lea    -0x1(%eax),%edx
   136e4:	8b 45 08             	mov    0x8(%ebp),%eax
   136e7:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136ea:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++) {
   136f1:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   136f5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   136f8:	3b 45 0c             	cmp    0xc(%ebp),%eax
   136fb:	7c a3                	jl     136a0 <move_backword+0x16>
        }
    }

    return status;
   136fd:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13700:	c9                   	leave  
   13701:	c3                   	ret    

00013702 <clear_display>:

static void clear_display (console_t * console) {
   13702:	55                   	push   %ebp
   13703:	89 e5                	mov    %esp,%ebp
   13705:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   13708:	8b 45 08             	mov    0x8(%ebp),%eax
   1370b:	8b 50 14             	mov    0x14(%eax),%edx
   1370e:	8b 45 08             	mov    0x8(%ebp),%eax
   13711:	8b 40 10             	mov    0x10(%eax),%eax
   13714:	0f af c2             	imul   %edx,%eax
   13717:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * start = console->disp_base;
   1371a:	8b 45 08             	mov    0x8(%ebp),%eax
   1371d:	8b 00                	mov    (%eax),%eax
   1371f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++) {
   13722:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13729:	eb 51                	jmp    1377c <clear_display+0x7a>
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   1372b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1372e:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   13731:	8b 45 08             	mov    0x8(%ebp),%eax
   13734:	8b 40 24             	mov    0x24(%eax),%eax
   13737:	c1 e0 05             	shl    $0x5,%eax
   1373a:	c0 f8 05             	sar    $0x5,%al
   1373d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13740:	83 e0 07             	and    $0x7,%eax
   13743:	c1 e0 04             	shl    $0x4,%eax
   13746:	89 c1                	mov    %eax,%ecx
   13748:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1374c:	83 e0 8f             	and    $0xffffff8f,%eax
   1374f:	09 c8                	or     %ecx,%eax
   13751:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   13754:	8b 45 08             	mov    0x8(%ebp),%eax
   13757:	8b 40 20             	mov    0x20(%eax),%eax
   1375a:	c1 e0 04             	shl    $0x4,%eax
   1375d:	c0 f8 04             	sar    $0x4,%al
   13760:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13763:	83 e0 0f             	and    $0xf,%eax
   13766:	89 c1                	mov    %eax,%ecx
   13768:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1376c:	83 e0 f0             	and    $0xfffffff0,%eax
   1376f:	09 c8                	or     %ecx,%eax
   13771:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++) {
   13774:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13778:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   1377c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1377f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   13782:	7c a7                	jl     1372b <clear_display+0x29>
    }
}
   13784:	90                   	nop
   13785:	90                   	nop
   13786:	c9                   	leave  
   13787:	c3                   	ret    

00013788 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t * console) {
   13788:	55                   	push   %ebp
   13789:	89 e5                	mov    %esp,%ebp
   1378b:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   1378e:	8b 45 08             	mov    0x8(%ebp),%eax
   13791:	8b 40 0c             	mov    0xc(%eax),%eax
   13794:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8;		// 下一显示位置
   13797:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1379a:	83 c0 07             	add    $0x7,%eax
   1379d:	8d 50 07             	lea    0x7(%eax),%edx
   137a0:	85 c0                	test   %eax,%eax
   137a2:	0f 48 c2             	cmovs  %edx,%eax
   137a5:	c1 f8 03             	sar    $0x3,%eax
   137a8:	c1 e0 03             	shl    $0x3,%eax
   137ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols) {
   137ae:	8b 45 08             	mov    0x8(%ebp),%eax
   137b1:	8b 40 14             	mov    0x14(%eax),%eax
   137b4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   137b7:	7c 36                	jl     137ef <move_next_tab+0x67>
        col = 0;
   137b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   137c0:	8b 45 08             	mov    0x8(%ebp),%eax
   137c3:	8b 40 08             	mov    0x8(%eax),%eax
   137c6:	8d 50 01             	lea    0x1(%eax),%edx
   137c9:	8b 45 08             	mov    0x8(%ebp),%eax
   137cc:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows) {
   137cf:	8b 45 08             	mov    0x8(%ebp),%eax
   137d2:	8b 50 08             	mov    0x8(%eax),%edx
   137d5:	8b 45 08             	mov    0x8(%ebp),%eax
   137d8:	8b 40 10             	mov    0x10(%eax),%eax
   137db:	39 c2                	cmp    %eax,%edx
   137dd:	7c 10                	jl     137ef <move_next_tab+0x67>
            // 超出末端，上移
            scroll_up(console, 1);
   137df:	83 ec 08             	sub    $0x8,%esp
   137e2:	6a 01                	push   $0x1
   137e4:	ff 75 08             	push   0x8(%ebp)
   137e7:	e8 c3 fc ff ff       	call   134af <scroll_up>
   137ec:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   137ef:	8b 45 08             	mov    0x8(%ebp),%eax
   137f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
   137f5:	89 50 0c             	mov    %edx,0xc(%eax)
}
   137f8:	90                   	nop
   137f9:	c9                   	leave  
   137fa:	c3                   	ret    

000137fb <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t * console) {
   137fb:	55                   	push   %ebp
   137fc:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   137fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13801:	8b 50 0c             	mov    0xc(%eax),%edx
   13804:	8b 45 08             	mov    0x8(%ebp),%eax
   13807:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   1380a:	8b 45 08             	mov    0x8(%ebp),%eax
   1380d:	8b 50 08             	mov    0x8(%eax),%edx
   13810:	8b 45 08             	mov    0x8(%ebp),%eax
   13813:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   13816:	90                   	nop
   13817:	5d                   	pop    %ebp
   13818:	c3                   	ret    

00013819 <restore_cursor>:

void restore_cursor(console_t * console) {
   13819:	55                   	push   %ebp
   1381a:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   1381c:	8b 45 08             	mov    0x8(%ebp),%eax
   1381f:	8b 50 18             	mov    0x18(%eax),%edx
   13822:	8b 45 08             	mov    0x8(%ebp),%eax
   13825:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13828:	8b 45 08             	mov    0x8(%ebp),%eax
   1382b:	8b 50 1c             	mov    0x1c(%eax),%edx
   1382e:	8b 45 08             	mov    0x8(%ebp),%eax
   13831:	89 50 08             	mov    %edx,0x8(%eax)
}
   13834:	90                   	nop
   13835:	5d                   	pop    %ebp
   13836:	c3                   	ret    

00013837 <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init (int idx) {
   13837:	55                   	push   %ebp
   13838:	89 e5                	mov    %esp,%ebp
   1383a:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   1383d:	8b 45 08             	mov    0x8(%ebp),%eax
   13840:	6b c0 68             	imul   $0x68,%eax,%eax
   13843:	05 00 56 03 00       	add    $0x35600,%eax
   13848:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   1384b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1384e:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   13855:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13858:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *) CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   1385f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13862:	8b 40 14             	mov    0x14(%eax),%eax
   13865:	0f af 45 08          	imul   0x8(%ebp),%eax
   13869:	89 c2                	mov    %eax,%edx
   1386b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1386e:	8b 40 10             	mov    0x10(%eax),%eax
   13871:	0f af c2             	imul   %edx,%eax
   13874:	01 c0                	add    %eax,%eax
   13876:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   1387c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1387f:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   13881:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13884:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   1388b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1388e:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0) {
   13895:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13899:	75 30                	jne    138cb <console_init+0x94>
        int cursor_pos = read_cursor_pos();
   1389b:	e8 cb f8 ff ff       	call   1316b <read_cursor_pos>
   138a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   138a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138a6:	8b 48 14             	mov    0x14(%eax),%ecx
   138a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138ac:	99                   	cltd   
   138ad:	f7 f9                	idiv   %ecx
   138af:	89 c2                	mov    %eax,%edx
   138b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138b4:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   138b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138ba:	8b 48 14             	mov    0x14(%eax),%ecx
   138bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138c0:	99                   	cltd   
   138c1:	f7 f9                	idiv   %ecx
   138c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138c6:	89 50 0c             	mov    %edx,0xc(%eax)
   138c9:	eb 22                	jmp    138ed <console_init+0xb6>
    } else {
        console->cursor_row = 0;
   138cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138ce:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   138d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   138df:	83 ec 0c             	sub    $0xc,%esp
   138e2:	ff 75 f4             	push   -0xc(%ebp)
   138e5:	e8 18 fe ff ff       	call   13702 <clear_display>
   138ea:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   138ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138f0:	8b 50 08             	mov    0x8(%eax),%edx
   138f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138f6:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   138f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138fc:	8b 50 0c             	mov    0xc(%eax),%edx
   138ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13902:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   13905:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13908:	83 c0 54             	add    $0x54,%eax
   1390b:	83 ec 0c             	sub    $0xc,%esp
   1390e:	50                   	push   %eax
   1390f:	e8 20 44 00 00       	call   17d34 <mutex_init>
   13914:	83 c4 10             	add    $0x10,%esp
	return 0;
   13917:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1391c:	c9                   	leave  
   1391d:	c3                   	ret    

0001391e <erase_backword>:

/**
 * 擦除前一字符
 * @param console
 */
static void erase_backword (console_t * console) {
   1391e:	55                   	push   %ebp
   1391f:	89 e5                	mov    %esp,%ebp
   13921:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0) {
   13924:	6a 01                	push   $0x1
   13926:	ff 75 08             	push   0x8(%ebp)
   13929:	e8 5c fd ff ff       	call   1368a <move_backword>
   1392e:	83 c4 08             	add    $0x8,%esp
   13931:	85 c0                	test   %eax,%eax
   13933:	75 20                	jne    13955 <erase_backword+0x37>
        show_char(console, ' ');
   13935:	83 ec 08             	sub    $0x8,%esp
   13938:	6a 20                	push   $0x20
   1393a:	ff 75 08             	push   0x8(%ebp)
   1393d:	e8 b4 fc ff ff       	call   135f6 <show_char>
   13942:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   13945:	83 ec 08             	sub    $0x8,%esp
   13948:	6a 01                	push   $0x1
   1394a:	ff 75 08             	push   0x8(%ebp)
   1394d:	e8 38 fd ff ff       	call   1368a <move_backword>
   13952:	83 c4 10             	add    $0x10,%esp
    }
}
   13955:	90                   	nop
   13956:	c9                   	leave  
   13957:	c3                   	ret    

00013958 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal (console_t * console, char c) {
   13958:	55                   	push   %ebp
   13959:	89 e5                	mov    %esp,%ebp
   1395b:	83 ec 18             	sub    $0x18,%esp
   1395e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13961:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c) {
   13964:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13968:	83 f8 1b             	cmp    $0x1b,%eax
   1396b:	7f 16                	jg     13983 <write_normal+0x2b>
   1396d:	83 f8 08             	cmp    $0x8,%eax
   13970:	7c 76                	jl     139e8 <write_normal+0x90>
   13972:	83 e8 08             	sub    $0x8,%eax
   13975:	83 f8 13             	cmp    $0x13,%eax
   13978:	77 6e                	ja     139e8 <write_normal+0x90>
   1397a:	8b 04 85 00 95 01 00 	mov    0x19500(,%eax,4),%eax
   13981:	ff e0                	jmp    *%eax
   13983:	83 f8 7f             	cmp    $0x7f,%eax
   13986:	74 0e                	je     13996 <write_normal+0x3e>
   13988:	eb 5e                	jmp    139e8 <write_normal+0x90>
        case ASCII_ESC:
            console->write_state = CONSOLE_WRITE_ESC;
   1398a:	8b 45 08             	mov    0x8(%ebp),%eax
   1398d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
            break;
   13994:	eb 72                	jmp    13a08 <write_normal+0xb0>
        case 0x7F:
            erase_backword(console);
   13996:	83 ec 0c             	sub    $0xc,%esp
   13999:	ff 75 08             	push   0x8(%ebp)
   1399c:	e8 7d ff ff ff       	call   1391e <erase_backword>
   139a1:	83 c4 10             	add    $0x10,%esp
            break;
   139a4:	eb 62                	jmp    13a08 <write_normal+0xb0>
        case '\b':		// 左移一个字符
            move_backword(console, 1);
   139a6:	83 ec 08             	sub    $0x8,%esp
   139a9:	6a 01                	push   $0x1
   139ab:	ff 75 08             	push   0x8(%ebp)
   139ae:	e8 d7 fc ff ff       	call   1368a <move_backword>
   139b3:	83 c4 10             	add    $0x10,%esp
            break;
   139b6:	eb 50                	jmp    13a08 <write_normal+0xb0>
            // 换行处理
        case '\t':		// 对齐的下一制表符
            move_next_tab(console);
   139b8:	83 ec 0c             	sub    $0xc,%esp
   139bb:	ff 75 08             	push   0x8(%ebp)
   139be:	e8 c5 fd ff ff       	call   13788 <move_next_tab>
   139c3:	83 c4 10             	add    $0x10,%esp
            break;
   139c6:	eb 40                	jmp    13a08 <write_normal+0xb0>
        case '\r':
            move_to_col0(console);
   139c8:	83 ec 0c             	sub    $0xc,%esp
   139cb:	ff 75 08             	push   0x8(%ebp)
   139ce:	e8 64 fb ff ff       	call   13537 <move_to_col0>
   139d3:	83 c4 10             	add    $0x10,%esp
            break;
   139d6:	eb 30                	jmp    13a08 <write_normal+0xb0>
        case '\n':  // 暂时这样处理
            //move_to_col0(console);
            move_next_line(console);
   139d8:	83 ec 0c             	sub    $0xc,%esp
   139db:	ff 75 08             	push   0x8(%ebp)
   139de:	e8 64 fb ff ff       	call   13547 <move_next_line>
   139e3:	83 c4 10             	add    $0x10,%esp
            break;
   139e6:	eb 20                	jmp    13a08 <write_normal+0xb0>
            // 普通字符显示
        default: {
            if ((c >= ' ') && (c <= '~')) {
   139e8:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   139ec:	7e 19                	jle    13a07 <write_normal+0xaf>
   139ee:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   139f2:	74 13                	je     13a07 <write_normal+0xaf>
                show_char(console, c);
   139f4:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   139f8:	83 ec 08             	sub    $0x8,%esp
   139fb:	50                   	push   %eax
   139fc:	ff 75 08             	push   0x8(%ebp)
   139ff:	e8 f2 fb ff ff       	call   135f6 <show_char>
   13a04:	83 c4 10             	add    $0x10,%esp
            }
            break;
   13a07:	90                   	nop
        }
    }
}
   13a08:	90                   	nop
   13a09:	c9                   	leave  
   13a0a:	c3                   	ret    

00013a0b <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param (console_t * console) {
   13a0b:	55                   	push   %ebp
   13a0c:	89 e5                	mov    %esp,%ebp
   13a0e:	83 ec 08             	sub    $0x8,%esp
	kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13a11:	8b 45 08             	mov    0x8(%ebp),%eax
   13a14:	83 c0 28             	add    $0x28,%eax
   13a17:	83 ec 04             	sub    $0x4,%esp
   13a1a:	6a 28                	push   $0x28
   13a1c:	6a 00                	push   $0x0
   13a1e:	50                   	push   %eax
   13a1f:	e8 41 4a 00 00       	call   18465 <kernel_memset>
   13a24:	83 c4 10             	add    $0x10,%esp
	console->curr_param_index = 0;
   13a27:	8b 45 08             	mov    0x8(%ebp),%eax
   13a2a:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13a31:	90                   	nop
   13a32:	c9                   	leave  
   13a33:	c3                   	ret    

00013a34 <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc (console_t * console, char c) {
   13a34:	55                   	push   %ebp
   13a35:	89 e5                	mov    %esp,%ebp
   13a37:	83 ec 18             	sub    $0x18,%esp
   13a3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a3d:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c) {
   13a40:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a44:	83 f8 5b             	cmp    $0x5b,%eax
   13a47:	74 3f                	je     13a88 <write_esc+0x54>
   13a49:	83 f8 5b             	cmp    $0x5b,%eax
   13a4c:	7f 54                	jg     13aa2 <write_esc+0x6e>
   13a4e:	83 f8 37             	cmp    $0x37,%eax
   13a51:	74 07                	je     13a5a <write_esc+0x26>
   13a53:	83 f8 38             	cmp    $0x38,%eax
   13a56:	74 19                	je     13a71 <write_esc+0x3d>
   13a58:	eb 48                	jmp    13aa2 <write_esc+0x6e>
        case '7':		// ESC 7 保存光标
            save_cursor(console);
   13a5a:	ff 75 08             	push   0x8(%ebp)
   13a5d:	e8 99 fd ff ff       	call   137fb <save_cursor>
   13a62:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13a65:	8b 45 08             	mov    0x8(%ebp),%eax
   13a68:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13a6f:	eb 3c                	jmp    13aad <write_esc+0x79>
        case '8':		// ESC 8 恢复光标
            restore_cursor(console);
   13a71:	ff 75 08             	push   0x8(%ebp)
   13a74:	e8 a0 fd ff ff       	call   13819 <restore_cursor>
   13a79:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13a7c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a7f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13a86:	eb 25                	jmp    13aad <write_esc+0x79>
        case '[':
            clear_esc_param(console);
   13a88:	83 ec 0c             	sub    $0xc,%esp
   13a8b:	ff 75 08             	push   0x8(%ebp)
   13a8e:	e8 78 ff ff ff       	call   13a0b <clear_esc_param>
   13a93:	83 c4 10             	add    $0x10,%esp
            console->write_state = CONSOLE_WRITE_SQUARE;
   13a96:	8b 45 08             	mov    0x8(%ebp),%eax
   13a99:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
            break;
   13aa0:	eb 0b                	jmp    13aad <write_esc+0x79>
        default:
            console->write_state = CONSOLE_WRITE_NORMAL;
   13aa2:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13aac:	90                   	nop
    }
}
   13aad:	90                   	nop
   13aae:	c9                   	leave  
   13aaf:	c3                   	ret    

00013ab0 <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style (console_t * console) {
   13ab0:	55                   	push   %ebp
   13ab1:	89 e5                	mov    %esp,%ebp
   13ab3:	83 ec 10             	sub    $0x10,%esp
	static const cclor_t color_table[] = {
			COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow, // 0-3
			COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
	};

	for (int i = 0; i < console->curr_param_index; i++) {
   13ab6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13abd:	eb 78                	jmp    13b37 <set_font_style+0x87>
		int param = console->esc_param[i];
   13abf:	8b 45 08             	mov    0x8(%ebp),%eax
   13ac2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13ac5:	83 c2 08             	add    $0x8,%edx
   13ac8:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13acc:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if ((param >= 30) && (param <= 37)) {  // 前景色：30-37
   13acf:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13ad3:	7e 1b                	jle    13af0 <set_font_style+0x40>
   13ad5:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13ad9:	7f 15                	jg     13af0 <set_font_style+0x40>
			console->foreground = color_table[param - 30];
   13adb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ade:	83 e8 1e             	sub    $0x1e,%eax
   13ae1:	8b 14 85 00 96 01 00 	mov    0x19600(,%eax,4),%edx
   13ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   13aeb:	89 50 20             	mov    %edx,0x20(%eax)
   13aee:	eb 43                	jmp    13b33 <set_font_style+0x83>
		} else if ((param >= 40) && (param <= 47)) {
   13af0:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13af4:	7e 1b                	jle    13b11 <set_font_style+0x61>
   13af6:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13afa:	7f 15                	jg     13b11 <set_font_style+0x61>
			console->background = color_table[param - 40];
   13afc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13aff:	83 e8 28             	sub    $0x28,%eax
   13b02:	8b 14 85 00 96 01 00 	mov    0x19600(,%eax,4),%edx
   13b09:	8b 45 08             	mov    0x8(%ebp),%eax
   13b0c:	89 50 24             	mov    %edx,0x24(%eax)
   13b0f:	eb 22                	jmp    13b33 <set_font_style+0x83>
		} else if (param == 39) { // 39=默认前景色
   13b11:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13b15:	75 0c                	jne    13b23 <set_font_style+0x73>
			console->foreground = COLOR_White;
   13b17:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1a:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13b21:	eb 10                	jmp    13b33 <set_font_style+0x83>
		} else if (param == 49) { // 49=默认背景色
   13b23:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13b27:	75 0a                	jne    13b33 <set_font_style+0x83>
			console->background = COLOR_Black;
   13b29:	8b 45 08             	mov    0x8(%ebp),%eax
   13b2c:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
	for (int i = 0; i < console->curr_param_index; i++) {
   13b33:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13b37:	8b 45 08             	mov    0x8(%ebp),%eax
   13b3a:	8b 40 50             	mov    0x50(%eax),%eax
   13b3d:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13b40:	0f 8c 79 ff ff ff    	jl     13abf <set_font_style+0xf>
		}
	}
}
   13b46:	90                   	nop
   13b47:	90                   	nop
   13b48:	c9                   	leave  
   13b49:	c3                   	ret    

00013b4a <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left (console_t * console, int n) {
   13b4a:	55                   	push   %ebp
   13b4b:	89 e5                	mov    %esp,%ebp
   13b4d:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13b50:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b54:	75 07                	jne    13b5d <move_left+0x13>
        n = 1;
   13b56:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13b5d:	8b 45 08             	mov    0x8(%ebp),%eax
   13b60:	8b 40 0c             	mov    0xc(%eax),%eax
   13b63:	2b 45 0c             	sub    0xc(%ebp),%eax
   13b66:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   13b69:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13b6c:	ba 00 00 00 00       	mov    $0x0,%edx
   13b71:	85 c0                	test   %eax,%eax
   13b73:	0f 49 d0             	cmovns %eax,%edx
   13b76:	8b 45 08             	mov    0x8(%ebp),%eax
   13b79:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13b7c:	90                   	nop
   13b7d:	c9                   	leave  
   13b7e:	c3                   	ret    

00013b7f <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right (console_t * console, int n) {
   13b7f:	55                   	push   %ebp
   13b80:	89 e5                	mov    %esp,%ebp
   13b82:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0) {
   13b85:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b89:	75 07                	jne    13b92 <move_right+0x13>
        n = 1;
   13b8b:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   13b92:	8b 45 08             	mov    0x8(%ebp),%eax
   13b95:	8b 50 0c             	mov    0xc(%eax),%edx
   13b98:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b9b:	01 d0                	add    %edx,%eax
   13b9d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols) {
   13ba0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba3:	8b 40 14             	mov    0x14(%eax),%eax
   13ba6:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13ba9:	7c 11                	jl     13bbc <move_right+0x3d>
        console->cursor_col = console->display_cols - 1;
   13bab:	8b 45 08             	mov    0x8(%ebp),%eax
   13bae:	8b 40 14             	mov    0x14(%eax),%eax
   13bb1:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb7:	89 50 0c             	mov    %edx,0xc(%eax)
    } else {
        console->cursor_col = col;
    }
}
   13bba:	eb 09                	jmp    13bc5 <move_right+0x46>
        console->cursor_col = col;
   13bbc:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbf:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13bc2:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13bc5:	90                   	nop
   13bc6:	c9                   	leave  
   13bc7:	c3                   	ret    

00013bc8 <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t * console) {
   13bc8:	55                   	push   %ebp
   13bc9:	89 e5                	mov    %esp,%ebp
	if (console->curr_param_index >= 1) {
   13bcb:	8b 45 08             	mov    0x8(%ebp),%eax
   13bce:	8b 40 50             	mov    0x50(%eax),%eax
   13bd1:	85 c0                	test   %eax,%eax
   13bd3:	7e 0c                	jle    13be1 <move_cursor+0x19>
		console->cursor_row = console->esc_param[0];
   13bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   13bd8:	8b 50 28             	mov    0x28(%eax),%edx
   13bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   13bde:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if (console->curr_param_index >= 2) {
   13be1:	8b 45 08             	mov    0x8(%ebp),%eax
   13be4:	8b 40 50             	mov    0x50(%eax),%eax
   13be7:	83 f8 01             	cmp    $0x1,%eax
   13bea:	7e 0c                	jle    13bf8 <move_cursor+0x30>
		console->cursor_col = console->esc_param[1];
   13bec:	8b 45 08             	mov    0x8(%ebp),%eax
   13bef:	8b 50 2c             	mov    0x2c(%eax),%edx
   13bf2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf5:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
   13bf8:	90                   	nop
   13bf9:	5d                   	pop    %ebp
   13bfa:	c3                   	ret    

00013bfb <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t * console) {
   13bfb:	55                   	push   %ebp
   13bfc:	89 e5                	mov    %esp,%ebp
   13bfe:	83 ec 10             	sub    $0x10,%esp
	if (console->curr_param_index <= 0) {
   13c01:	8b 45 08             	mov    0x8(%ebp),%eax
   13c04:	8b 40 50             	mov    0x50(%eax),%eax
   13c07:	85 c0                	test   %eax,%eax
   13c09:	7e 3e                	jle    13c49 <erase_in_display+0x4e>
		return;
	}

	int param = console->esc_param[0];
   13c0b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c0e:	8b 40 28             	mov    0x28(%eax),%eax
   13c11:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (param == 2) {
   13c14:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13c18:	75 30                	jne    13c4a <erase_in_display+0x4f>
		// 擦除整个屏幕
		erase_rows(console, 0, console->display_rows - 1);
   13c1a:	8b 45 08             	mov    0x8(%ebp),%eax
   13c1d:	8b 40 10             	mov    0x10(%eax),%eax
   13c20:	83 e8 01             	sub    $0x1,%eax
   13c23:	50                   	push   %eax
   13c24:	6a 00                	push   $0x0
   13c26:	ff 75 08             	push   0x8(%ebp)
   13c29:	e8 ef f7 ff ff       	call   1341d <erase_rows>
   13c2e:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   13c31:	8b 45 08             	mov    0x8(%ebp),%eax
   13c34:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   13c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3e:	8b 50 08             	mov    0x8(%eax),%edx
   13c41:	8b 45 08             	mov    0x8(%ebp),%eax
   13c44:	89 50 0c             	mov    %edx,0xc(%eax)
   13c47:	eb 01                	jmp    13c4a <erase_in_display+0x4f>
		return;
   13c49:	90                   	nop
	}
}
   13c4a:	c9                   	leave  
   13c4b:	c3                   	ret    

00013c4c <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square (console_t * console, char c) {
   13c4c:	55                   	push   %ebp
   13c4d:	89 e5                	mov    %esp,%ebp
   13c4f:	83 ec 14             	sub    $0x14,%esp
   13c52:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c55:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9')) {
   13c58:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13c5c:	7e 44                	jle    13ca2 <write_esc_square+0x56>
   13c5e:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13c62:	7f 3e                	jg     13ca2 <write_esc_square+0x56>
        // 解析当前参数
        int * param = &console->esc_param[console->curr_param_index];
   13c64:	8b 45 08             	mov    0x8(%ebp),%eax
   13c67:	8b 40 50             	mov    0x50(%eax),%eax
   13c6a:	83 c0 08             	add    $0x8,%eax
   13c6d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13c74:	8b 45 08             	mov    0x8(%ebp),%eax
   13c77:	01 d0                	add    %edx,%eax
   13c79:	83 c0 08             	add    $0x8,%eax
   13c7c:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13c7f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c82:	8b 10                	mov    (%eax),%edx
   13c84:	89 d0                	mov    %edx,%eax
   13c86:	c1 e0 02             	shl    $0x2,%eax
   13c89:	01 d0                	add    %edx,%eax
   13c8b:	01 c0                	add    %eax,%eax
   13c8d:	89 c2                	mov    %eax,%edx
   13c8f:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13c93:	01 d0                	add    %edx,%eax
   13c95:	8d 50 d0             	lea    -0x30(%eax),%edx
   13c98:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c9b:	89 10                	mov    %edx,(%eax)
    if ((c >= '0') && (c <= '9')) {
   13c9d:	e9 9f 00 00 00       	jmp    13d41 <write_esc_square+0xf5>
    } else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX) {
   13ca2:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13ca6:	75 1c                	jne    13cc4 <write_esc_square+0x78>
   13ca8:	8b 45 08             	mov    0x8(%ebp),%eax
   13cab:	8b 40 50             	mov    0x50(%eax),%eax
   13cae:	83 f8 09             	cmp    $0x9,%eax
   13cb1:	7f 11                	jg     13cc4 <write_esc_square+0x78>
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13cb3:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb6:	8b 40 50             	mov    0x50(%eax),%eax
   13cb9:	8d 50 01             	lea    0x1(%eax),%edx
   13cbc:	8b 45 08             	mov    0x8(%ebp),%eax
   13cbf:	89 50 50             	mov    %edx,0x50(%eax)
   13cc2:	eb 7d                	jmp    13d41 <write_esc_square+0xf5>
    } else {
        // 结束上一字符的处理
        console->curr_param_index++;
   13cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc7:	8b 40 50             	mov    0x50(%eax),%eax
   13cca:	8d 50 01             	lea    0x1(%eax),%edx
   13ccd:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd0:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c) {
   13cd3:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13cd7:	83 e8 43             	sub    $0x43,%eax
   13cda:	83 f8 2a             	cmp    $0x2a,%eax
   13cdd:	77 57                	ja     13d36 <write_esc_square+0xea>
   13cdf:	8b 04 85 50 95 01 00 	mov    0x19550(,%eax,4),%eax
   13ce6:	ff e0                	jmp    *%eax
        case 'm': // 设置字符属性
            set_font_style(console);
   13ce8:	ff 75 08             	push   0x8(%ebp)
   13ceb:	e8 c0 fd ff ff       	call   13ab0 <set_font_style>
   13cf0:	83 c4 04             	add    $0x4,%esp
            break;
   13cf3:	eb 41                	jmp    13d36 <write_esc_square+0xea>
        case 'D':	// 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13cf5:	8b 45 08             	mov    0x8(%ebp),%eax
   13cf8:	8b 40 28             	mov    0x28(%eax),%eax
   13cfb:	50                   	push   %eax
   13cfc:	ff 75 08             	push   0x8(%ebp)
   13cff:	e8 46 fe ff ff       	call   13b4a <move_left>
   13d04:	83 c4 08             	add    $0x8,%esp
            break;
   13d07:	eb 2d                	jmp    13d36 <write_esc_square+0xea>
        case 'C':
            move_right(console, console->esc_param[0]);
   13d09:	8b 45 08             	mov    0x8(%ebp),%eax
   13d0c:	8b 40 28             	mov    0x28(%eax),%eax
   13d0f:	50                   	push   %eax
   13d10:	ff 75 08             	push   0x8(%ebp)
   13d13:	e8 67 fe ff ff       	call   13b7f <move_right>
   13d18:	83 c4 08             	add    $0x8,%esp
            break;
   13d1b:	eb 19                	jmp    13d36 <write_esc_square+0xea>
        case 'H':
        case 'f':
            move_cursor(console);
   13d1d:	ff 75 08             	push   0x8(%ebp)
   13d20:	e8 a3 fe ff ff       	call   13bc8 <move_cursor>
   13d25:	83 c4 04             	add    $0x4,%esp
            break;
   13d28:	eb 0c                	jmp    13d36 <write_esc_square+0xea>
        case 'J':
            erase_in_display(console);
   13d2a:	ff 75 08             	push   0x8(%ebp)
   13d2d:	e8 c9 fe ff ff       	call   13bfb <erase_in_display>
   13d32:	83 c4 04             	add    $0x4,%esp
            break;
   13d35:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13d36:	8b 45 08             	mov    0x8(%ebp),%eax
   13d39:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13d40:	90                   	nop
   13d41:	90                   	nop
   13d42:	c9                   	leave  
   13d43:	c3                   	ret    

00013d44 <console_write>:

/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write (tty_t * tty) {
   13d44:	55                   	push   %ebp
   13d45:	89 e5                	mov    %esp,%ebp
   13d47:	83 ec 18             	sub    $0x18,%esp
	console_t * console = console_buf + tty->console_idx;
   13d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d4d:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13d53:	6b c0 68             	imul   $0x68,%eax,%eax
   13d56:	05 00 56 03 00       	add    $0x35600,%eax
   13d5b:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13d5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d61:	83 c0 54             	add    $0x54,%eax
   13d64:	83 ec 0c             	sub    $0xc,%esp
   13d67:	50                   	push   %eax
   13d68:	e8 f5 3f 00 00       	call   17d62 <mutex_lock>
   13d6d:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13d70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13d77:	8b 45 08             	mov    0x8(%ebp),%eax
   13d7a:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13d80:	83 ec 08             	sub    $0x8,%esp
   13d83:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13d86:	50                   	push   %eax
   13d87:	52                   	push   %edx
   13d88:	e8 26 14 00 00       	call   151b3 <tty_fifo_get>
   13d8d:	83 c4 10             	add    $0x10,%esp
   13d90:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0) {
   13d93:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13d97:	79 25                	jns    13dbe <console_write+0x7a>
                break;
        }
        len++;
    }while (1);

    mutex_unlock(&console->mutex);
   13d99:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d9c:	83 c0 54             	add    $0x54,%eax
   13d9f:	83 ec 0c             	sub    $0xc,%esp
   13da2:	50                   	push   %eax
   13da3:	e8 51 40 00 00       	call   17df9 <mutex_unlock>
   13da8:	83 c4 10             	add    $0x10,%esp

    update_cursor_pos(console);
   13dab:	83 ec 0c             	sub    $0xc,%esp
   13dae:	ff 75 f0             	push   -0x10(%ebp)
   13db1:	e8 29 f4 ff ff       	call   131df <update_cursor_pos>
   13db6:	83 c4 10             	add    $0x10,%esp
    return len;
   13db9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dbc:	eb 7f                	jmp    13e3d <console_write+0xf9>
        sem_notify(&tty->osem);
   13dbe:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc1:	05 14 02 00 00       	add    $0x214,%eax
   13dc6:	83 ec 0c             	sub    $0xc,%esp
   13dc9:	50                   	push   %eax
   13dca:	e8 85 41 00 00       	call   17f54 <sem_notify>
   13dcf:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state) {
   13dd2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13dd5:	8b 40 04             	mov    0x4(%eax),%eax
   13dd8:	83 f8 02             	cmp    $0x2,%eax
   13ddb:	74 40                	je     13e1d <console_write+0xd9>
   13ddd:	83 f8 02             	cmp    $0x2,%eax
   13de0:	77 52                	ja     13e34 <console_write+0xf0>
   13de2:	85 c0                	test   %eax,%eax
   13de4:	74 07                	je     13ded <console_write+0xa9>
   13de6:	83 f8 01             	cmp    $0x1,%eax
   13de9:	74 1a                	je     13e05 <console_write+0xc1>
   13deb:	eb 47                	jmp    13e34 <console_write+0xf0>
                write_normal(console, c);
   13ded:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13df1:	0f be c0             	movsbl %al,%eax
   13df4:	83 ec 08             	sub    $0x8,%esp
   13df7:	50                   	push   %eax
   13df8:	ff 75 f0             	push   -0x10(%ebp)
   13dfb:	e8 58 fb ff ff       	call   13958 <write_normal>
   13e00:	83 c4 10             	add    $0x10,%esp
                break;
   13e03:	eb 2f                	jmp    13e34 <console_write+0xf0>
                write_esc(console, c);
   13e05:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e09:	0f be c0             	movsbl %al,%eax
   13e0c:	83 ec 08             	sub    $0x8,%esp
   13e0f:	50                   	push   %eax
   13e10:	ff 75 f0             	push   -0x10(%ebp)
   13e13:	e8 1c fc ff ff       	call   13a34 <write_esc>
   13e18:	83 c4 10             	add    $0x10,%esp
                break;
   13e1b:	eb 17                	jmp    13e34 <console_write+0xf0>
                write_esc_square(console, c);
   13e1d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e21:	0f be c0             	movsbl %al,%eax
   13e24:	83 ec 08             	sub    $0x8,%esp
   13e27:	50                   	push   %eax
   13e28:	ff 75 f0             	push   -0x10(%ebp)
   13e2b:	e8 1c fe ff ff       	call   13c4c <write_esc_square>
   13e30:	83 c4 10             	add    $0x10,%esp
                break;
   13e33:	90                   	nop
        len++;
   13e34:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    do {
   13e38:	e9 3a ff ff ff       	jmp    13d77 <console_write+0x33>
}
   13e3d:	c9                   	leave  
   13e3e:	c3                   	ret    

00013e3f <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close (int dev) {
   13e3f:	55                   	push   %ebp
   13e40:	89 e5                	mov    %esp,%ebp
	// 似乎不太需要做点什么
}
   13e42:	90                   	nop
   13e43:	5d                   	pop    %ebp
   13e44:	c3                   	ret    

00013e45 <is_devid_bad>:
};

// 设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad (int dev_id) {
   13e45:	55                   	push   %ebp
   13e46:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >=  sizeof(dev_tbl) / sizeof(dev_tbl[0]))) {
   13e48:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e4c:	78 08                	js     13e56 <is_devid_bad+0x11>
   13e4e:	8b 45 08             	mov    0x8(%ebp),%eax
   13e51:	83 f8 7f             	cmp    $0x7f,%eax
   13e54:	76 07                	jbe    13e5d <is_devid_bad+0x18>
        return 1;
   13e56:	b8 01 00 00 00       	mov    $0x1,%eax
   13e5b:	eb 24                	jmp    13e81 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0) {
   13e5d:	8b 55 08             	mov    0x8(%ebp),%edx
   13e60:	89 d0                	mov    %edx,%eax
   13e62:	c1 e0 02             	shl    $0x2,%eax
   13e65:	01 d0                	add    %edx,%eax
   13e67:	c1 e0 02             	shl    $0x2,%eax
   13e6a:	05 40 59 03 00       	add    $0x35940,%eax
   13e6f:	8b 00                	mov    (%eax),%eax
   13e71:	85 c0                	test   %eax,%eax
   13e73:	75 07                	jne    13e7c <is_devid_bad+0x37>
        return 1;
   13e75:	b8 01 00 00 00       	mov    $0x1,%eax
   13e7a:	eb 05                	jmp    13e81 <is_devid_bad+0x3c>
    }

    return 0;
   13e7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13e81:	5d                   	pop    %ebp
   13e82:	c3                   	ret    

00013e83 <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open (int major, int minor, void * data) {
   13e83:	55                   	push   %ebp
   13e84:	89 e5                	mov    %esp,%ebp
   13e86:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13e89:	e8 76 f2 ff ff       	call   13104 <irq_enter_protection>
   13e8e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t * free_dev = (device_t *)0;
   13e91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13e98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13e9f:	eb 68                	jmp    13f09 <dev_open+0x86>
        device_t * dev = dev_tbl + i;
   13ea1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13ea4:	89 d0                	mov    %edx,%eax
   13ea6:	c1 e0 02             	shl    $0x2,%eax
   13ea9:	01 d0                	add    %edx,%eax
   13eab:	c1 e0 02             	shl    $0x2,%eax
   13eae:	05 40 59 03 00       	add    $0x35940,%eax
   13eb3:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0) {
   13eb6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13eb9:	8b 40 10             	mov    0x10(%eax),%eax
   13ebc:	85 c0                	test   %eax,%eax
   13ebe:	75 08                	jne    13ec8 <dev_open+0x45>
            // 纪录空闲值
            free_dev = dev;
   13ec0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ec3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13ec6:	eb 3d                	jmp    13f05 <dev_open+0x82>
        } else if ((dev->desc->major == major) && (dev->minor == minor)) {
   13ec8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ecb:	8b 00                	mov    (%eax),%eax
   13ecd:	8b 40 20             	mov    0x20(%eax),%eax
   13ed0:	39 45 08             	cmp    %eax,0x8(%ebp)
   13ed3:	75 30                	jne    13f05 <dev_open+0x82>
   13ed5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ed8:	8b 40 08             	mov    0x8(%eax),%eax
   13edb:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13ede:	75 25                	jne    13f05 <dev_open+0x82>
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13ee0:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ee3:	8b 40 10             	mov    0x10(%eax),%eax
   13ee6:	8d 50 01             	lea    0x1(%eax),%edx
   13ee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13eec:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13eef:	83 ec 0c             	sub    $0xc,%esp
   13ef2:	ff 75 e4             	push   -0x1c(%ebp)
   13ef5:	e8 22 f2 ff ff       	call   1311c <irq_leave_protection>
   13efa:	83 c4 10             	add    $0x10,%esp
            return i;
   13efd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f00:	e9 c6 00 00 00       	jmp    13fcb <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13f05:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13f09:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f0c:	83 f8 7f             	cmp    $0x7f,%eax
   13f0f:	76 90                	jbe    13ea1 <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t * desc = (dev_desc_t *)0;
   13f11:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13f18:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13f1f:	eb 24                	jmp    13f45 <dev_open+0xc2>
        dev_desc_t * d = dev_desc_tbl[i];
   13f21:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f24:	8b 04 85 50 a0 01 00 	mov    0x1a050(,%eax,4),%eax
   13f2b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major) {
   13f2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f31:	8b 40 20             	mov    0x20(%eax),%eax
   13f34:	39 45 08             	cmp    %eax,0x8(%ebp)
   13f37:	75 08                	jne    13f41 <dev_open+0xbe>
            desc = d;
   13f39:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f3c:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13f3f:	eb 0c                	jmp    13f4d <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13f41:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13f45:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f48:	83 f8 01             	cmp    $0x1,%eax
   13f4b:	76 d4                	jbe    13f21 <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev) {
   13f4d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f51:	74 65                	je     13fb8 <dev_open+0x135>
   13f53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13f57:	74 5f                	je     13fb8 <dev_open+0x135>
        free_dev->minor = minor;
   13f59:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f5c:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f5f:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13f62:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f65:	8b 55 10             	mov    0x10(%ebp),%edx
   13f68:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13f6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13f71:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13f73:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13f76:	8b 40 24             	mov    0x24(%eax),%eax
   13f79:	83 ec 0c             	sub    $0xc,%esp
   13f7c:	ff 75 f4             	push   -0xc(%ebp)
   13f7f:	ff d0                	call   *%eax
   13f81:	83 c4 10             	add    $0x10,%esp
   13f84:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0) {
   13f87:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13f8b:	75 2b                	jne    13fb8 <dev_open+0x135>
            free_dev->open_count = 1;
   13f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f90:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13f97:	83 ec 0c             	sub    $0xc,%esp
   13f9a:	ff 75 e4             	push   -0x1c(%ebp)
   13f9d:	e8 7a f1 ff ff       	call   1311c <irq_leave_protection>
   13fa2:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13fa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fa8:	2d 40 59 03 00       	sub    $0x35940,%eax
   13fad:	c1 f8 02             	sar    $0x2,%eax
   13fb0:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13fb6:	eb 13                	jmp    13fcb <dev_open+0x148>
        }
    }

    irq_leave_protection(state);
   13fb8:	83 ec 0c             	sub    $0xc,%esp
   13fbb:	ff 75 e4             	push   -0x1c(%ebp)
   13fbe:	e8 59 f1 ff ff       	call   1311c <irq_leave_protection>
   13fc3:	83 c4 10             	add    $0x10,%esp
    return -1;
   13fc6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13fcb:	c9                   	leave  
   13fcc:	c3                   	ret    

00013fcd <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read (int dev_id, int addr, char * buf, int size) {
   13fcd:	55                   	push   %ebp
   13fce:	89 e5                	mov    %esp,%ebp
   13fd0:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13fd3:	ff 75 08             	push   0x8(%ebp)
   13fd6:	e8 6a fe ff ff       	call   13e45 <is_devid_bad>
   13fdb:	83 c4 04             	add    $0x4,%esp
   13fde:	85 c0                	test   %eax,%eax
   13fe0:	74 07                	je     13fe9 <dev_read+0x1c>
        return -1;
   13fe2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13fe7:	eb 2e                	jmp    14017 <dev_read+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13fe9:	8b 55 08             	mov    0x8(%ebp),%edx
   13fec:	89 d0                	mov    %edx,%eax
   13fee:	c1 e0 02             	shl    $0x2,%eax
   13ff1:	01 d0                	add    %edx,%eax
   13ff3:	c1 e0 02             	shl    $0x2,%eax
   13ff6:	05 40 59 03 00       	add    $0x35940,%eax
   13ffb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13ffe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14001:	8b 00                	mov    (%eax),%eax
   14003:	8b 40 28             	mov    0x28(%eax),%eax
   14006:	ff 75 14             	push   0x14(%ebp)
   14009:	ff 75 10             	push   0x10(%ebp)
   1400c:	ff 75 0c             	push   0xc(%ebp)
   1400f:	ff 75 f4             	push   -0xc(%ebp)
   14012:	ff d0                	call   *%eax
   14014:	83 c4 10             	add    $0x10,%esp
}
   14017:	c9                   	leave  
   14018:	c3                   	ret    

00014019 <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write (int dev_id, int addr, char * buf, int size) {
   14019:	55                   	push   %ebp
   1401a:	89 e5                	mov    %esp,%ebp
   1401c:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   1401f:	ff 75 08             	push   0x8(%ebp)
   14022:	e8 1e fe ff ff       	call   13e45 <is_devid_bad>
   14027:	83 c4 04             	add    $0x4,%esp
   1402a:	85 c0                	test   %eax,%eax
   1402c:	74 07                	je     14035 <dev_write+0x1c>
        return -1;
   1402e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14033:	eb 2e                	jmp    14063 <dev_write+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   14035:	8b 55 08             	mov    0x8(%ebp),%edx
   14038:	89 d0                	mov    %edx,%eax
   1403a:	c1 e0 02             	shl    $0x2,%eax
   1403d:	01 d0                	add    %edx,%eax
   1403f:	c1 e0 02             	shl    $0x2,%eax
   14042:	05 40 59 03 00       	add    $0x35940,%eax
   14047:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   1404a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1404d:	8b 00                	mov    (%eax),%eax
   1404f:	8b 40 2c             	mov    0x2c(%eax),%eax
   14052:	ff 75 14             	push   0x14(%ebp)
   14055:	ff 75 10             	push   0x10(%ebp)
   14058:	ff 75 0c             	push   0xc(%ebp)
   1405b:	ff 75 f4             	push   -0xc(%ebp)
   1405e:	ff d0                	call   *%eax
   14060:	83 c4 10             	add    $0x10,%esp
}
   14063:	c9                   	leave  
   14064:	c3                   	ret    

00014065 <dev_control>:

/**
 * @brief 发送控制命令
 */

int dev_control (int dev_id, int cmd, int arg0, int arg1) {
   14065:	55                   	push   %ebp
   14066:	89 e5                	mov    %esp,%ebp
   14068:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   1406b:	ff 75 08             	push   0x8(%ebp)
   1406e:	e8 d2 fd ff ff       	call   13e45 <is_devid_bad>
   14073:	83 c4 04             	add    $0x4,%esp
   14076:	85 c0                	test   %eax,%eax
   14078:	74 07                	je     14081 <dev_control+0x1c>
        return -1;
   1407a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1407f:	eb 2e                	jmp    140af <dev_control+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   14081:	8b 55 08             	mov    0x8(%ebp),%edx
   14084:	89 d0                	mov    %edx,%eax
   14086:	c1 e0 02             	shl    $0x2,%eax
   14089:	01 d0                	add    %edx,%eax
   1408b:	c1 e0 02             	shl    $0x2,%eax
   1408e:	05 40 59 03 00       	add    $0x35940,%eax
   14093:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   14096:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14099:	8b 00                	mov    (%eax),%eax
   1409b:	8b 40 30             	mov    0x30(%eax),%eax
   1409e:	ff 75 14             	push   0x14(%ebp)
   140a1:	ff 75 10             	push   0x10(%ebp)
   140a4:	ff 75 0c             	push   0xc(%ebp)
   140a7:	ff 75 f4             	push   -0xc(%ebp)
   140aa:	ff d0                	call   *%eax
   140ac:	83 c4 10             	add    $0x10,%esp
}
   140af:	c9                   	leave  
   140b0:	c3                   	ret    

000140b1 <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close (int dev_id) {
   140b1:	55                   	push   %ebp
   140b2:	89 e5                	mov    %esp,%ebp
   140b4:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   140b7:	ff 75 08             	push   0x8(%ebp)
   140ba:	e8 86 fd ff ff       	call   13e45 <is_devid_bad>
   140bf:	83 c4 04             	add    $0x4,%esp
   140c2:	85 c0                	test   %eax,%eax
   140c4:	75 6b                	jne    14131 <dev_close+0x80>
        return;
    }

    device_t * dev = dev_tbl + dev_id;
   140c6:	8b 55 08             	mov    0x8(%ebp),%edx
   140c9:	89 d0                	mov    %edx,%eax
   140cb:	c1 e0 02             	shl    $0x2,%eax
   140ce:	01 d0                	add    %edx,%eax
   140d0:	c1 e0 02             	shl    $0x2,%eax
   140d3:	05 40 59 03 00       	add    $0x35940,%eax
   140d8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   140db:	e8 24 f0 ff ff       	call   13104 <irq_enter_protection>
   140e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {
   140e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140e6:	8b 40 10             	mov    0x10(%eax),%eax
   140e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   140ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140ef:	89 50 10             	mov    %edx,0x10(%eax)
   140f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140f5:	8b 40 10             	mov    0x10(%eax),%eax
   140f8:	85 c0                	test   %eax,%eax
   140fa:	75 25                	jne    14121 <dev_close+0x70>
        dev->desc->close(dev);
   140fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140ff:	8b 00                	mov    (%eax),%eax
   14101:	8b 40 34             	mov    0x34(%eax),%eax
   14104:	83 ec 0c             	sub    $0xc,%esp
   14107:	ff 75 f4             	push   -0xc(%ebp)
   1410a:	ff d0                	call   *%eax
   1410c:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   1410f:	83 ec 04             	sub    $0x4,%esp
   14112:	6a 14                	push   $0x14
   14114:	6a 00                	push   $0x0
   14116:	ff 75 f4             	push   -0xc(%ebp)
   14119:	e8 47 43 00 00       	call   18465 <kernel_memset>
   1411e:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   14121:	83 ec 0c             	sub    $0xc,%esp
   14124:	ff 75 f0             	push   -0x10(%ebp)
   14127:	e8 f0 ef ff ff       	call   1311c <irq_leave_protection>
   1412c:	83 c4 10             	add    $0x10,%esp
   1412f:	eb 01                	jmp    14132 <dev_close+0x81>
        return;
   14131:	90                   	nop
   14132:	c9                   	leave  
   14133:	c3                   	ret    

00014134 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14134:	55                   	push   %ebp
   14135:	89 e5                	mov    %esp,%ebp
   14137:	83 ec 14             	sub    $0x14,%esp
   1413a:	8b 45 08             	mov    0x8(%ebp),%eax
   1413d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14141:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14145:	89 c2                	mov    %eax,%edx
   14147:	ec                   	in     (%dx),%al
   14148:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1414b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1414f:	c9                   	leave  
   14150:	c3                   	ret    

00014151 <inw>:
static inline uint16_t inw(uint16_t  port) {
   14151:	55                   	push   %ebp
   14152:	89 e5                	mov    %esp,%ebp
   14154:	83 ec 14             	sub    $0x14,%esp
   14157:	8b 45 08             	mov    0x8(%ebp),%eax
   1415a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
   1415e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14162:	89 c2                	mov    %eax,%edx
   14164:	66 ed                	in     (%dx),%ax
   14166:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	return rv;
   1416a:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   1416e:	c9                   	leave  
   1416f:	c3                   	ret    

00014170 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14170:	55                   	push   %ebp
   14171:	89 e5                	mov    %esp,%ebp
   14173:	83 ec 08             	sub    $0x8,%esp
   14176:	8b 45 08             	mov    0x8(%ebp),%eax
   14179:	8b 55 0c             	mov    0xc(%ebp),%edx
   1417c:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14180:	89 d0                	mov    %edx,%eax
   14182:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14185:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14189:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1418d:	ee                   	out    %al,(%dx)
}
   1418e:	90                   	nop
   1418f:	c9                   	leave  
   14190:	c3                   	ret    

00014191 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   14191:	55                   	push   %ebp
   14192:	89 e5                	mov    %esp,%ebp
   14194:	83 ec 08             	sub    $0x8,%esp
   14197:	8b 55 08             	mov    0x8(%ebp),%edx
   1419a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1419d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   141a1:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("out %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   141a5:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   141a9:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   141ad:	66 ef                	out    %ax,(%dx)
}
   141af:	90                   	nop
   141b0:	c9                   	leave  
   141b1:	c3                   	ret    

000141b2 <ata_send_cmd>:
static int task_on_op;

/**
 * 发送ata命令，支持多达16位的扇区，对我们目前的程序来书够用了。
 */
static void ata_send_cmd (disk_t * disk, uint32_t start_sector, uint32_t sector_count, int cmd) {
   141b2:	55                   	push   %ebp
   141b3:	89 e5                	mov    %esp,%ebp
    outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);		// 使用LBA寻址，并设置驱动器
   141b5:	8b 45 08             	mov    0x8(%ebp),%eax
   141b8:	8b 40 20             	mov    0x20(%eax),%eax
   141bb:	83 c8 e0             	or     $0xffffffe0,%eax
   141be:	0f b6 d0             	movzbl %al,%edx
   141c1:	8b 45 08             	mov    0x8(%ebp),%eax
   141c4:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141c8:	83 c0 06             	add    $0x6,%eax
   141cb:	0f b7 c0             	movzwl %ax,%eax
   141ce:	52                   	push   %edx
   141cf:	50                   	push   %eax
   141d0:	e8 9b ff ff ff       	call   14170 <outb>
   141d5:	83 c4 08             	add    $0x8,%esp

	// 必须先写高字节
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count >> 8));	// 扇区数高8位
   141d8:	8b 45 10             	mov    0x10(%ebp),%eax
   141db:	c1 e8 08             	shr    $0x8,%eax
   141de:	0f b6 d0             	movzbl %al,%edx
   141e1:	8b 45 08             	mov    0x8(%ebp),%eax
   141e4:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141e8:	83 c0 02             	add    $0x2,%eax
   141eb:	0f b7 c0             	movzwl %ax,%eax
   141ee:	52                   	push   %edx
   141ef:	50                   	push   %eax
   141f0:	e8 7b ff ff ff       	call   14170 <outb>
   141f5:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 24));		// LBA参数的24~31位
   141f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   141fb:	c1 e8 18             	shr    $0x18,%eax
   141fe:	0f b6 d0             	movzbl %al,%edx
   14201:	8b 45 08             	mov    0x8(%ebp),%eax
   14204:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14208:	83 c0 03             	add    $0x3,%eax
   1420b:	0f b7 c0             	movzwl %ax,%eax
   1420e:	52                   	push   %edx
   1420f:	50                   	push   %eax
   14210:	e8 5b ff ff ff       	call   14170 <outb>
   14215:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), 0);									// 高于32位不支持
   14218:	8b 45 08             	mov    0x8(%ebp),%eax
   1421b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1421f:	83 c0 04             	add    $0x4,%eax
   14222:	0f b7 c0             	movzwl %ax,%eax
   14225:	6a 00                	push   $0x0
   14227:	50                   	push   %eax
   14228:	e8 43 ff ff ff       	call   14170 <outb>
   1422d:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), 0);										// 高于32位不支持
   14230:	8b 45 08             	mov    0x8(%ebp),%eax
   14233:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14237:	83 c0 05             	add    $0x5,%eax
   1423a:	0f b7 c0             	movzwl %ax,%eax
   1423d:	6a 00                	push   $0x0
   1423f:	50                   	push   %eax
   14240:	e8 2b ff ff ff       	call   14170 <outb>
   14245:	83 c4 08             	add    $0x8,%esp
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count));		// 扇区数量低8位
   14248:	8b 45 10             	mov    0x10(%ebp),%eax
   1424b:	0f b6 d0             	movzbl %al,%edx
   1424e:	8b 45 08             	mov    0x8(%ebp),%eax
   14251:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14255:	83 c0 02             	add    $0x2,%eax
   14258:	0f b7 c0             	movzwl %ax,%eax
   1425b:	52                   	push   %edx
   1425c:	50                   	push   %eax
   1425d:	e8 0e ff ff ff       	call   14170 <outb>
   14262:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 0));			// LBA参数的0-7
   14265:	8b 45 0c             	mov    0xc(%ebp),%eax
   14268:	0f b6 d0             	movzbl %al,%edx
   1426b:	8b 45 08             	mov    0x8(%ebp),%eax
   1426e:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14272:	83 c0 03             	add    $0x3,%eax
   14275:	0f b7 c0             	movzwl %ax,%eax
   14278:	52                   	push   %edx
   14279:	50                   	push   %eax
   1427a:	e8 f1 fe ff ff       	call   14170 <outb>
   1427f:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), (uint8_t) (start_sector >> 8));		// LBA参数的8-15位
   14282:	8b 45 0c             	mov    0xc(%ebp),%eax
   14285:	c1 e8 08             	shr    $0x8,%eax
   14288:	0f b6 d0             	movzbl %al,%edx
   1428b:	8b 45 08             	mov    0x8(%ebp),%eax
   1428e:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14292:	83 c0 04             	add    $0x4,%eax
   14295:	0f b7 c0             	movzwl %ax,%eax
   14298:	52                   	push   %edx
   14299:	50                   	push   %eax
   1429a:	e8 d1 fe ff ff       	call   14170 <outb>
   1429f:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), (uint8_t) (start_sector >> 16));		// LBA参数的16-23位
   142a2:	8b 45 0c             	mov    0xc(%ebp),%eax
   142a5:	c1 e8 10             	shr    $0x10,%eax
   142a8:	0f b6 d0             	movzbl %al,%edx
   142ab:	8b 45 08             	mov    0x8(%ebp),%eax
   142ae:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142b2:	83 c0 05             	add    $0x5,%eax
   142b5:	0f b7 c0             	movzwl %ax,%eax
   142b8:	52                   	push   %edx
   142b9:	50                   	push   %eax
   142ba:	e8 b1 fe ff ff       	call   14170 <outb>
   142bf:	83 c4 08             	add    $0x8,%esp

	// 选择对应的主-从磁盘
	outb(DISK_CMD(disk), (uint8_t)cmd);
   142c2:	8b 45 14             	mov    0x14(%ebp),%eax
   142c5:	0f b6 d0             	movzbl %al,%edx
   142c8:	8b 45 08             	mov    0x8(%ebp),%eax
   142cb:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142cf:	83 c0 07             	add    $0x7,%eax
   142d2:	0f b7 c0             	movzwl %ax,%eax
   142d5:	52                   	push   %edx
   142d6:	50                   	push   %eax
   142d7:	e8 94 fe ff ff       	call   14170 <outb>
   142dc:	83 c4 08             	add    $0x8,%esp
}
   142df:	90                   	nop
   142e0:	c9                   	leave  
   142e1:	c3                   	ret    

000142e2 <ata_read_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_read_data (disk_t * disk, void * buf, int size) {
   142e2:	55                   	push   %ebp
   142e3:	89 e5                	mov    %esp,%ebp
   142e5:	53                   	push   %ebx
   142e6:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   142e9:	8b 45 0c             	mov    0xc(%ebp),%eax
   142ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int i = 0; i < size / 2; i++) {
   142ef:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   142f6:	eb 23                	jmp    1431b <ata_read_data+0x39>
        *c++ = inw(DISK_DATA(disk));
   142f8:	8b 45 08             	mov    0x8(%ebp),%eax
   142fb:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142ff:	0f b7 c0             	movzwl %ax,%eax
   14302:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14305:	8d 53 02             	lea    0x2(%ebx),%edx
   14308:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1430b:	50                   	push   %eax
   1430c:	e8 40 fe ff ff       	call   14151 <inw>
   14311:	83 c4 04             	add    $0x4,%esp
   14314:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < size / 2; i++) {
   14317:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1431b:	8b 45 10             	mov    0x10(%ebp),%eax
   1431e:	89 c2                	mov    %eax,%edx
   14320:	c1 ea 1f             	shr    $0x1f,%edx
   14323:	01 d0                	add    %edx,%eax
   14325:	d1 f8                	sar    %eax
   14327:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1432a:	7c cc                	jl     142f8 <ata_read_data+0x16>
    }
}
   1432c:	90                   	nop
   1432d:	90                   	nop
   1432e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14331:	c9                   	leave  
   14332:	c3                   	ret    

00014333 <ata_write_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_write_data (disk_t * disk, void * buf, int size) {
   14333:	55                   	push   %ebp
   14334:	89 e5                	mov    %esp,%ebp
   14336:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   14339:	8b 45 0c             	mov    0xc(%ebp),%eax
   1433c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size / 2; i++) {
   1433f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   14346:	eb 27                	jmp    1436f <ata_write_data+0x3c>
        outw(DISK_DATA(disk), *c++);
   14348:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1434b:	8d 50 02             	lea    0x2(%eax),%edx
   1434e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14351:	0f b7 00             	movzwl (%eax),%eax
   14354:	0f b7 d0             	movzwl %ax,%edx
   14357:	8b 45 08             	mov    0x8(%ebp),%eax
   1435a:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1435e:	0f b7 c0             	movzwl %ax,%eax
   14361:	52                   	push   %edx
   14362:	50                   	push   %eax
   14363:	e8 29 fe ff ff       	call   14191 <outw>
   14368:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < size / 2; i++) {
   1436b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1436f:	8b 45 10             	mov    0x10(%ebp),%eax
   14372:	89 c2                	mov    %eax,%edx
   14374:	c1 ea 1f             	shr    $0x1f,%edx
   14377:	01 d0                	add    %edx,%eax
   14379:	d1 f8                	sar    %eax
   1437b:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1437e:	7c c8                	jl     14348 <ata_write_data+0x15>
    }
}
   14380:	90                   	nop
   14381:	90                   	nop
   14382:	c9                   	leave  
   14383:	c3                   	ret    

00014384 <ata_wait_data>:

/**
 * @brief 等待磁盘有数据到达
 */
static inline int ata_wait_data (disk_t * disk) {
   14384:	55                   	push   %ebp
   14385:	89 e5                	mov    %esp,%ebp
   14387:	83 ec 10             	sub    $0x10,%esp
    uint8_t status;
	do {
        // 等待数据或者有错误
        status = inb(DISK_STATUS(disk));
   1438a:	8b 45 08             	mov    0x8(%ebp),%eax
   1438d:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14391:	83 c0 07             	add    $0x7,%eax
   14394:	0f b7 c0             	movzwl %ax,%eax
   14397:	50                   	push   %eax
   14398:	e8 97 fd ff ff       	call   14134 <inb>
   1439d:	83 c4 04             	add    $0x4,%esp
   143a0:	88 45 ff             	mov    %al,-0x1(%ebp)
        if ((status & (DISK_STATUS_BUSY | DISK_STATUS_DRQ | DISK_STATUS_ERR))
   143a3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   143a7:	25 89 00 00 00       	and    $0x89,%eax
   143ac:	3d 80 00 00 00       	cmp    $0x80,%eax
   143b1:	75 02                	jne    143b5 <ata_wait_data+0x31>
        status = inb(DISK_STATUS(disk));
   143b3:	eb d5                	jmp    1438a <ata_wait_data+0x6>
                        != DISK_STATUS_BUSY) {
            break;
   143b5:	90                   	nop
        }
    }while (1);

    // 检查是否有错误
    return (status & DISK_STATUS_ERR) ? -1 : 0;
   143b6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   143ba:	83 e0 01             	and    $0x1,%eax
   143bd:	85 c0                	test   %eax,%eax
   143bf:	74 07                	je     143c8 <ata_wait_data+0x44>
   143c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   143c6:	eb 05                	jmp    143cd <ata_wait_data+0x49>
   143c8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   143cd:	c9                   	leave  
   143ce:	c3                   	ret    

000143cf <print_disk_info>:

/**
 * @brief 打印磁盘信息
 */
static void print_disk_info (disk_t * disk) {
   143cf:	55                   	push   %ebp
   143d0:	89 e5                	mov    %esp,%ebp
   143d2:	53                   	push   %ebx
   143d3:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s:", disk->name);
   143d6:	8b 45 08             	mov    0x8(%ebp),%eax
   143d9:	83 ec 08             	sub    $0x8,%esp
   143dc:	50                   	push   %eax
   143dd:	68 20 96 01 00       	push   $0x19620
   143e2:	e8 28 46 00 00       	call   18a0f <log_printf>
   143e7:	83 c4 10             	add    $0x10,%esp
    log_printf("  port_base: %x", disk->port_base);
   143ea:	8b 45 08             	mov    0x8(%ebp),%eax
   143ed:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143f1:	0f b7 c0             	movzwl %ax,%eax
   143f4:	83 ec 08             	sub    $0x8,%esp
   143f7:	50                   	push   %eax
   143f8:	68 24 96 01 00       	push   $0x19624
   143fd:	e8 0d 46 00 00       	call   18a0f <log_printf>
   14402:	83 c4 10             	add    $0x10,%esp
    log_printf("  total_size: %d m", disk->sector_count * disk->sector_size / 1024 /1024);
   14405:	8b 45 08             	mov    0x8(%ebp),%eax
   14408:	8b 50 2c             	mov    0x2c(%eax),%edx
   1440b:	8b 45 08             	mov    0x8(%ebp),%eax
   1440e:	8b 40 28             	mov    0x28(%eax),%eax
   14411:	0f af c2             	imul   %edx,%eax
   14414:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   1441a:	85 c0                	test   %eax,%eax
   1441c:	0f 48 c2             	cmovs  %edx,%eax
   1441f:	c1 f8 14             	sar    $0x14,%eax
   14422:	83 ec 08             	sub    $0x8,%esp
   14425:	50                   	push   %eax
   14426:	68 34 96 01 00       	push   $0x19634
   1442b:	e8 df 45 00 00       	call   18a0f <log_printf>
   14430:	83 c4 10             	add    $0x10,%esp
    log_printf("  drive: %s", disk->drive == DISK_DISK_MASTER ? "Master" : "Slave");
   14433:	8b 45 08             	mov    0x8(%ebp),%eax
   14436:	8b 40 20             	mov    0x20(%eax),%eax
   14439:	85 c0                	test   %eax,%eax
   1443b:	75 07                	jne    14444 <print_disk_info+0x75>
   1443d:	b8 47 96 01 00       	mov    $0x19647,%eax
   14442:	eb 05                	jmp    14449 <print_disk_info+0x7a>
   14444:	b8 4e 96 01 00       	mov    $0x1964e,%eax
   14449:	83 ec 08             	sub    $0x8,%esp
   1444c:	50                   	push   %eax
   1444d:	68 54 96 01 00       	push   $0x19654
   14452:	e8 b8 45 00 00       	call   18a0f <log_printf>
   14457:	83 c4 10             	add    $0x10,%esp

    // 显示分区信息
    log_printf("  Part info:");
   1445a:	83 ec 0c             	sub    $0xc,%esp
   1445d:	68 60 96 01 00       	push   $0x19660
   14462:	e8 a8 45 00 00       	call   18a0f <log_printf>
   14467:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   1446a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14471:	eb 4e                	jmp    144c1 <print_disk_info+0xf2>
        partinfo_t * part_info = disk->partinfo + i;
   14473:	8b 45 08             	mov    0x8(%ebp),%eax
   14476:	8d 48 30             	lea    0x30(%eax),%ecx
   14479:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1447c:	89 d0                	mov    %edx,%eax
   1447e:	01 c0                	add    %eax,%eax
   14480:	01 d0                	add    %edx,%eax
   14482:	c1 e0 04             	shl    $0x4,%eax
   14485:	01 c8                	add    %ecx,%eax
   14487:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (part_info->type != FS_INVALID) {
   1448a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1448d:	8b 40 24             	mov    0x24(%eax),%eax
   14490:	85 c0                	test   %eax,%eax
   14492:	74 29                	je     144bd <print_disk_info+0xee>
            log_printf("    %s: type: %x, start sector: %d, count %d",
   14494:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14497:	8b 58 2c             	mov    0x2c(%eax),%ebx
   1449a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1449d:	8b 48 28             	mov    0x28(%eax),%ecx
                    part_info->name, part_info->type,
   144a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144a3:	8b 50 24             	mov    0x24(%eax),%edx
   144a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
            log_printf("    %s: type: %x, start sector: %d, count %d",
   144a9:	83 ec 0c             	sub    $0xc,%esp
   144ac:	53                   	push   %ebx
   144ad:	51                   	push   %ecx
   144ae:	52                   	push   %edx
   144af:	50                   	push   %eax
   144b0:	68 70 96 01 00       	push   $0x19670
   144b5:	e8 55 45 00 00       	call   18a0f <log_printf>
   144ba:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   144bd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   144c1:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   144c5:	7e ac                	jle    14473 <print_disk_info+0xa4>
                    part_info->start_sector, part_info->total_sector);
        }
    }
}
   144c7:	90                   	nop
   144c8:	90                   	nop
   144c9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   144cc:	c9                   	leave  
   144cd:	c3                   	ret    

000144ce <detect_part_info>:

/**
 * 获取指定序号的分区信息
 * 注意，该操作依赖物理分区分配，如果设备的分区结构有变化，则序号也会改变，得到的结果不同
 */
static int detect_part_info(disk_t * disk) {
   144ce:	55                   	push   %ebp
   144cf:	89 e5                	mov    %esp,%ebp
   144d1:	81 ec 18 02 00 00    	sub    $0x218,%esp
    mbr_t mbr;

    // 读取mbr区
    ata_send_cmd(disk, 0, 1, DISK_CMD_READ);
   144d7:	6a 24                	push   $0x24
   144d9:	6a 01                	push   $0x1
   144db:	6a 00                	push   $0x0
   144dd:	ff 75 08             	push   0x8(%ebp)
   144e0:	e8 cd fc ff ff       	call   141b2 <ata_send_cmd>
   144e5:	83 c4 10             	add    $0x10,%esp
    int err = ata_wait_data(disk);
   144e8:	ff 75 08             	push   0x8(%ebp)
   144eb:	e8 94 fe ff ff       	call   14384 <ata_wait_data>
   144f0:	83 c4 04             	add    $0x4,%esp
   144f3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   144f6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   144fa:	79 18                	jns    14514 <detect_part_info+0x46>
        log_printf("read mbr failed");
   144fc:	83 ec 0c             	sub    $0xc,%esp
   144ff:	68 9d 96 01 00       	push   $0x1969d
   14504:	e8 06 45 00 00       	call   18a0f <log_printf>
   14509:	83 c4 10             	add    $0x10,%esp
        return err;
   1450c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1450f:	e9 d1 00 00 00       	jmp    145e5 <detect_part_info+0x117>
    }
    ata_read_data(disk, &mbr, sizeof(mbr));
   14514:	83 ec 04             	sub    $0x4,%esp
   14517:	68 00 02 00 00       	push   $0x200
   1451c:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14522:	50                   	push   %eax
   14523:	ff 75 08             	push   0x8(%ebp)
   14526:	e8 b7 fd ff ff       	call   142e2 <ata_read_data>
   1452b:	83 c4 10             	add    $0x10,%esp

	// 遍历4个主分区描述，不考虑支持扩展分区
	part_item_t * item = mbr.part_item;
   1452e:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14534:	05 be 01 00 00       	add    $0x1be,%eax
   14539:	89 45 f4             	mov    %eax,-0xc(%ebp)
    partinfo_t * part_info = disk->partinfo + 1;
   1453c:	8b 45 08             	mov    0x8(%ebp),%eax
   1453f:	83 c0 30             	add    $0x30,%eax
   14542:	83 c0 30             	add    $0x30,%eax
   14545:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   14548:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1454f:	e9 87 00 00 00       	jmp    145db <detect_part_info+0x10d>
		part_info->type = item->system_id;
   14554:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14557:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1455b:	0f b6 d0             	movzbl %al,%edx
   1455e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14561:	89 50 24             	mov    %edx,0x24(%eax)

        // 没有分区，清空part_info
		if (part_info->type == FS_INVALID) {
   14564:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14567:	8b 40 24             	mov    0x24(%eax),%eax
   1456a:	85 c0                	test   %eax,%eax
   1456c:	75 20                	jne    1458e <detect_part_info+0xc0>
			part_info->total_sector = 0;
   1456e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14571:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            part_info->start_sector = 0;
   14578:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1457b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            part_info->disk = (disk_t *)0;
   14582:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14585:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   1458c:	eb 41                	jmp    145cf <detect_part_info+0x101>
        } else {
            // 在主分区中找到，复制信息
            kernel_sprintf(part_info->name, "%s%d", disk->name, i + 1);
   1458e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14591:	8d 48 01             	lea    0x1(%eax),%ecx
   14594:	8b 55 08             	mov    0x8(%ebp),%edx
   14597:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1459a:	51                   	push   %ecx
   1459b:	52                   	push   %edx
   1459c:	68 ad 96 01 00       	push   $0x196ad
   145a1:	50                   	push   %eax
   145a2:	e8 9b 40 00 00       	call   18642 <kernel_sprintf>
   145a7:	83 c4 10             	add    $0x10,%esp
            part_info->start_sector = item->relative_sectors;
   145aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145ad:	8b 40 08             	mov    0x8(%eax),%eax
   145b0:	89 c2                	mov    %eax,%edx
   145b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145b5:	89 50 28             	mov    %edx,0x28(%eax)
            part_info->total_sector = item->total_sectors;
   145b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145bb:	8b 40 0c             	mov    0xc(%eax),%eax
   145be:	89 c2                	mov    %eax,%edx
   145c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145c3:	89 50 2c             	mov    %edx,0x2c(%eax)
            part_info->disk = disk;
   145c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145c9:	8b 55 08             	mov    0x8(%ebp),%edx
   145cc:	89 50 20             	mov    %edx,0x20(%eax)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   145cf:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   145d3:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   145d7:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   145db:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   145df:	0f 8e 6f ff ff ff    	jle    14554 <detect_part_info+0x86>
        }
	}
}
   145e5:	c9                   	leave  
   145e6:	c3                   	ret    

000145e7 <identify_disk>:

/**
 * @brief 检测磁盘相关的信息
 */
static int identify_disk (disk_t * disk) {
   145e7:	55                   	push   %ebp
   145e8:	89 e5                	mov    %esp,%ebp
   145ea:	81 ec 18 02 00 00    	sub    $0x218,%esp
    ata_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   145f0:	68 ec 00 00 00       	push   $0xec
   145f5:	6a 00                	push   $0x0
   145f7:	6a 00                	push   $0x0
   145f9:	ff 75 08             	push   0x8(%ebp)
   145fc:	e8 b1 fb ff ff       	call   141b2 <ata_send_cmd>
   14601:	83 c4 10             	add    $0x10,%esp

    // 检测状态，如果为0，则控制器不存在
    int err = inb(DISK_STATUS(disk));
   14604:	8b 45 08             	mov    0x8(%ebp),%eax
   14607:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1460b:	83 c0 07             	add    $0x7,%eax
   1460e:	0f b7 c0             	movzwl %ax,%eax
   14611:	50                   	push   %eax
   14612:	e8 1d fb ff ff       	call   14134 <inb>
   14617:	83 c4 04             	add    $0x4,%esp
   1461a:	0f b6 c0             	movzbl %al,%eax
   1461d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   14620:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14624:	75 1e                	jne    14644 <identify_disk+0x5d>
        log_printf("%s doesn't exist\n", disk->name);
   14626:	8b 45 08             	mov    0x8(%ebp),%eax
   14629:	83 ec 08             	sub    $0x8,%esp
   1462c:	50                   	push   %eax
   1462d:	68 b2 96 01 00       	push   $0x196b2
   14632:	e8 d8 43 00 00       	call   18a0f <log_printf>
   14637:	83 c4 10             	add    $0x10,%esp
        return -1;
   1463a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1463f:	e9 c8 00 00 00       	jmp    1470c <identify_disk+0x125>
    }

    // 等待数据就绪, 此时中断还未开启，因此暂时可以使用查询模式
    err = ata_wait_data(disk);
   14644:	83 ec 0c             	sub    $0xc,%esp
   14647:	ff 75 08             	push   0x8(%ebp)
   1464a:	e8 35 fd ff ff       	call   14384 <ata_wait_data>
   1464f:	83 c4 10             	add    $0x10,%esp
   14652:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   14655:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14659:	79 1c                	jns    14677 <identify_disk+0x90>
        log_printf("disk[%s]: read failed!\n", disk->name);
   1465b:	8b 45 08             	mov    0x8(%ebp),%eax
   1465e:	83 ec 08             	sub    $0x8,%esp
   14661:	50                   	push   %eax
   14662:	68 c4 96 01 00       	push   $0x196c4
   14667:	e8 a3 43 00 00       	call   18a0f <log_printf>
   1466c:	83 c4 10             	add    $0x10,%esp
        return err;
   1466f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14672:	e9 95 00 00 00       	jmp    1470c <identify_disk+0x125>
    }

    // 读取返回的数据，特别是uint16_t 100 through 103
    // 测试用的盘： 总共102400 = 0x19000， 实测会多一个扇区，为vhd磁盘格式增加的一个扇区
    uint16_t buf[256];
    ata_read_data(disk, buf, sizeof(buf));
   14677:	83 ec 04             	sub    $0x4,%esp
   1467a:	68 00 02 00 00       	push   $0x200
   1467f:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14685:	50                   	push   %eax
   14686:	ff 75 08             	push   0x8(%ebp)
   14689:	e8 54 fc ff ff       	call   142e2 <ata_read_data>
   1468e:	83 c4 10             	add    $0x10,%esp
    disk->sector_count = *(uint32_t *)(buf + 100);
   14691:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14697:	05 c8 00 00 00       	add    $0xc8,%eax
   1469c:	8b 00                	mov    (%eax),%eax
   1469e:	89 c2                	mov    %eax,%edx
   146a0:	8b 45 08             	mov    0x8(%ebp),%eax
   146a3:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;            // 固定为512字节大小
   146a6:	8b 45 08             	mov    0x8(%ebp),%eax
   146a9:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    // 分区0保存了整个磁盘的信息
    partinfo_t * part = disk->partinfo + 0;
   146b0:	8b 45 08             	mov    0x8(%ebp),%eax
   146b3:	83 c0 30             	add    $0x30,%eax
   146b6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part->disk = disk;
   146b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146bc:	8b 55 08             	mov    0x8(%ebp),%edx
   146bf:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part->name, "%s%d", disk->name, 0);
   146c2:	8b 55 08             	mov    0x8(%ebp),%edx
   146c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146c8:	6a 00                	push   $0x0
   146ca:	52                   	push   %edx
   146cb:	68 ad 96 01 00       	push   $0x196ad
   146d0:	50                   	push   %eax
   146d1:	e8 6c 3f 00 00       	call   18642 <kernel_sprintf>
   146d6:	83 c4 10             	add    $0x10,%esp
    part->start_sector = 0;
   146d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146dc:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part->total_sector = disk->sector_count;
   146e3:	8b 45 08             	mov    0x8(%ebp),%eax
   146e6:	8b 50 2c             	mov    0x2c(%eax),%edx
   146e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ec:	89 50 2c             	mov    %edx,0x2c(%eax)
    part->type = FS_INVALID;
   146ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f2:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    // 接下来识别硬盘上的分区信息
    detect_part_info(disk);
   146f9:	83 ec 0c             	sub    $0xc,%esp
   146fc:	ff 75 08             	push   0x8(%ebp)
   146ff:	e8 ca fd ff ff       	call   144ce <detect_part_info>
   14704:	83 c4 10             	add    $0x10,%esp
    return 0;
   14707:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1470c:	c9                   	leave  
   1470d:	c3                   	ret    

0001470e <disk_init>:

/**
 * @brief 磁盘初始化及检测
 * 以下只是将相关磁盘相关的信息给读取到内存中
 */
void disk_init (void) {
   1470e:	55                   	push   %ebp
   1470f:	89 e5                	mov    %esp,%ebp
   14711:	83 ec 18             	sub    $0x18,%esp
    log_printf("Checking disk...");
   14714:	83 ec 0c             	sub    $0xc,%esp
   14717:	68 dc 96 01 00       	push   $0x196dc
   1471c:	e8 ee 42 00 00       	call   18a0f <log_printf>
   14721:	83 c4 10             	add    $0x10,%esp

    // 清空所有disk，以免数据错乱。不过引导程序应该有清0的，这里为安全再清一遍
    kernel_memset(disk_buf, 0, sizeof(disk_buf));
   14724:	83 ec 04             	sub    $0x4,%esp
   14727:	68 50 02 00 00       	push   $0x250
   1472c:	6a 00                	push   $0x0
   1472e:	68 40 63 03 00       	push   $0x36340
   14733:	e8 2d 3d 00 00       	call   18465 <kernel_memset>
   14738:	83 c4 10             	add    $0x10,%esp

    // 信号量和锁
    mutex_init(&mutex);
   1473b:	83 ec 0c             	sub    $0xc,%esp
   1473e:	68 90 65 03 00       	push   $0x36590
   14743:	e8 ec 35 00 00       	call   17d34 <mutex_init>
   14748:	83 c4 10             	add    $0x10,%esp
    sem_init(&op_sem, 0);       // 没有操作完成
   1474b:	83 ec 08             	sub    $0x8,%esp
   1474e:	6a 00                	push   $0x0
   14750:	68 a4 65 03 00       	push   $0x365a4
   14755:	e8 69 37 00 00       	call   17ec3 <sem_init>
   1475a:	83 c4 10             	add    $0x10,%esp

    // 检测各个硬盘, 读取硬件是否存在，有其相关信息
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   1475d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14764:	e9 90 00 00 00       	jmp    147f9 <disk_init+0xeb>
        disk_t * disk = disk_buf + i;
   14769:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1476c:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14772:	05 40 63 03 00       	add    $0x36340,%eax
   14777:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 先初始化各字段
        kernel_sprintf(disk->name, "sd%c", i + 'a');
   1477a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1477d:	8d 50 61             	lea    0x61(%eax),%edx
   14780:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14783:	83 ec 04             	sub    $0x4,%esp
   14786:	52                   	push   %edx
   14787:	68 ed 96 01 00       	push   $0x196ed
   1478c:	50                   	push   %eax
   1478d:	e8 b0 3e 00 00       	call   18642 <kernel_sprintf>
   14792:	83 c4 10             	add    $0x10,%esp
        disk->drive = (i == 0) ? DISK_DISK_MASTER : DISK_DISK_SLAVE;
   14795:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14799:	75 07                	jne    147a2 <disk_init+0x94>
   1479b:	ba 00 00 00 00       	mov    $0x0,%edx
   147a0:	eb 05                	jmp    147a7 <disk_init+0x99>
   147a2:	ba 10 00 00 00       	mov    $0x10,%edx
   147a7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147aa:	89 50 20             	mov    %edx,0x20(%eax)
        disk->port_base = IOBASE_PRIMARY;
   147ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147b0:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
        disk->mutex = &mutex;
   147b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147b9:	c7 80 20 01 00 00 90 	movl   $0x36590,0x120(%eax)
   147c0:	65 03 00 
        disk->op_sem = &op_sem;
   147c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147c6:	c7 80 24 01 00 00 a4 	movl   $0x365a4,0x124(%eax)
   147cd:	65 03 00 

        // 识别磁盘，有错不处理，直接跳过
        int err = identify_disk(disk);
   147d0:	83 ec 0c             	sub    $0xc,%esp
   147d3:	ff 75 f0             	push   -0x10(%ebp)
   147d6:	e8 0c fe ff ff       	call   145e7 <identify_disk>
   147db:	83 c4 10             	add    $0x10,%esp
   147de:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err == 0) {
   147e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   147e5:	75 0e                	jne    147f5 <disk_init+0xe7>
            print_disk_info(disk);
   147e7:	83 ec 0c             	sub    $0xc,%esp
   147ea:	ff 75 f0             	push   -0x10(%ebp)
   147ed:	e8 dd fb ff ff       	call   143cf <print_disk_info>
   147f2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   147f5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   147f9:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   147fd:	0f 8e 66 ff ff ff    	jle    14769 <disk_init+0x5b>
        }
    }
}
   14803:	90                   	nop
   14804:	90                   	nop
   14805:	c9                   	leave  
   14806:	c3                   	ret    

00014807 <disk_open>:


/**
 * @brief 打开磁盘设备
 */
int disk_open (device_t * dev) {
   14807:	55                   	push   %ebp
   14808:	89 e5                	mov    %esp,%ebp
   1480a:	83 ec 18             	sub    $0x18,%esp
    int disk_idx = (dev->minor >> 4) - 0xa;
   1480d:	8b 45 08             	mov    0x8(%ebp),%eax
   14810:	8b 40 08             	mov    0x8(%eax),%eax
   14813:	c1 f8 04             	sar    $0x4,%eax
   14816:	83 e8 0a             	sub    $0xa,%eax
   14819:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int part_idx = dev->minor & 0xF;
   1481c:	8b 45 08             	mov    0x8(%ebp),%eax
   1481f:	8b 40 08             	mov    0x8(%eax),%eax
   14822:	83 e0 0f             	and    $0xf,%eax
   14825:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if ((disk_idx >= DISK_CNT) || (part_idx >= DISK_PRIMARY_PART_CNT)) {
   14828:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   1482c:	7f 06                	jg     14834 <disk_open+0x2d>
   1482e:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   14832:	7e 21                	jle    14855 <disk_open+0x4e>
        log_printf("device minor error: %d", dev->minor);
   14834:	8b 45 08             	mov    0x8(%ebp),%eax
   14837:	8b 40 08             	mov    0x8(%eax),%eax
   1483a:	83 ec 08             	sub    $0x8,%esp
   1483d:	50                   	push   %eax
   1483e:	68 f2 96 01 00       	push   $0x196f2
   14843:	e8 c7 41 00 00       	call   18a0f <log_printf>
   14848:	83 c4 10             	add    $0x10,%esp
        return -1;
   1484b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14850:	e9 a5 00 00 00       	jmp    148fa <disk_open+0xf3>
    }

    disk_t * disk = disk_buf + disk_idx;
   14855:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14858:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   1485e:	05 40 63 03 00       	add    $0x36340,%eax
   14863:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk->sector_size == 0) {
   14866:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14869:	8b 40 28             	mov    0x28(%eax),%eax
   1486c:	85 c0                	test   %eax,%eax
   1486e:	75 1e                	jne    1488e <disk_open+0x87>
        log_printf("disk not exist. device:sd%x", dev->minor);
   14870:	8b 45 08             	mov    0x8(%ebp),%eax
   14873:	8b 40 08             	mov    0x8(%eax),%eax
   14876:	83 ec 08             	sub    $0x8,%esp
   14879:	50                   	push   %eax
   1487a:	68 09 97 01 00       	push   $0x19709
   1487f:	e8 8b 41 00 00       	call   18a0f <log_printf>
   14884:	83 c4 10             	add    $0x10,%esp
        return -1;
   14887:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1488c:	eb 6c                	jmp    148fa <disk_open+0xf3>
    }

    partinfo_t * part_info = disk->partinfo + part_idx;
   1488e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14891:	8d 48 30             	lea    0x30(%eax),%ecx
   14894:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14897:	89 d0                	mov    %edx,%eax
   14899:	01 c0                	add    %eax,%eax
   1489b:	01 d0                	add    %edx,%eax
   1489d:	c1 e0 04             	shl    $0x4,%eax
   148a0:	01 c8                	add    %ecx,%eax
   148a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (part_info->total_sector == 0) {
   148a5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   148a8:	8b 40 2c             	mov    0x2c(%eax),%eax
   148ab:	85 c0                	test   %eax,%eax
   148ad:	75 1e                	jne    148cd <disk_open+0xc6>
        log_printf("part not exist. device:sd%x", dev->minor);
   148af:	8b 45 08             	mov    0x8(%ebp),%eax
   148b2:	8b 40 08             	mov    0x8(%eax),%eax
   148b5:	83 ec 08             	sub    $0x8,%esp
   148b8:	50                   	push   %eax
   148b9:	68 25 97 01 00       	push   $0x19725
   148be:	e8 4c 41 00 00       	call   18a0f <log_printf>
   148c3:	83 c4 10             	add    $0x10,%esp
        return -1;
   148c6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148cb:	eb 2d                	jmp    148fa <disk_open+0xf3>
    }

    // 磁盘存在，建立关联
    dev->data = part_info;
   148cd:	8b 45 08             	mov    0x8(%ebp),%eax
   148d0:	8b 55 e8             	mov    -0x18(%ebp),%edx
   148d3:	89 50 0c             	mov    %edx,0xc(%eax)
    irq_install(IRQ14_HARDDISK_PRIMARY, exception_handler_ide_primary);
   148d6:	83 ec 08             	sub    $0x8,%esp
   148d9:	68 c4 02 01 00       	push   $0x102c4
   148de:	6a 2e                	push   $0x2e
   148e0:	e8 bd e6 ff ff       	call   12fa2 <irq_install>
   148e5:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ14_HARDDISK_PRIMARY);
   148e8:	83 ec 0c             	sub    $0xc,%esp
   148eb:	6a 2e                	push   $0x2e
   148ed:	e8 ea e6 ff ff       	call   12fdc <irq_enable>
   148f2:	83 c4 10             	add    $0x10,%esp
    return 0;
   148f5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   148fa:	c9                   	leave  
   148fb:	c3                   	ret    

000148fc <disk_read>:

/**
 * @brief 读磁盘
 */
int disk_read (device_t * dev, int start_sector, char * buf, int count) {
   148fc:	55                   	push   %ebp
   148fd:	89 e5                	mov    %esp,%ebp
   148ff:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14902:	8b 45 08             	mov    0x8(%ebp),%eax
   14905:	8b 40 0c             	mov    0xc(%eax),%eax
   14908:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   1490b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1490f:	75 21                	jne    14932 <disk_read+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14911:	8b 45 08             	mov    0x8(%ebp),%eax
   14914:	8b 40 08             	mov    0x8(%eax),%eax
   14917:	83 ec 08             	sub    $0x8,%esp
   1491a:	50                   	push   %eax
   1491b:	68 44 97 01 00       	push   $0x19744
   14920:	e8 ea 40 00 00       	call   18a0f <log_printf>
   14925:	83 c4 10             	add    $0x10,%esp
        return -1;
   14928:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1492d:	e9 08 01 00 00       	jmp    14a3a <disk_read+0x13e>
    }

    disk_t * disk = part_info->disk;
   14932:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14935:	8b 40 20             	mov    0x20(%eax),%eax
   14938:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   1493b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1493f:	75 21                	jne    14962 <disk_read+0x66>
        log_printf("No disk for device %d", dev->minor);
   14941:	8b 45 08             	mov    0x8(%ebp),%eax
   14944:	8b 40 08             	mov    0x8(%eax),%eax
   14947:	83 ec 08             	sub    $0x8,%esp
   1494a:	50                   	push   %eax
   1494b:	68 66 97 01 00       	push   $0x19766
   14950:	e8 ba 40 00 00       	call   18a0f <log_printf>
   14955:	83 c4 10             	add    $0x10,%esp
        return -1;
   14958:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1495d:	e9 d8 00 00 00       	jmp    14a3a <disk_read+0x13e>
    }

    mutex_lock(disk->mutex);
   14962:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14965:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   1496b:	83 ec 0c             	sub    $0xc,%esp
   1496e:	50                   	push   %eax
   1496f:	e8 ee 33 00 00       	call   17d62 <mutex_lock>
   14974:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14977:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   1497e:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_READ);
   14981:	8b 45 14             	mov    0x14(%ebp),%eax
   14984:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14987:	8b 4a 28             	mov    0x28(%edx),%ecx
   1498a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1498d:	01 ca                	add    %ecx,%edx
   1498f:	6a 24                	push   $0x24
   14991:	50                   	push   %eax
   14992:	52                   	push   %edx
   14993:	ff 75 ec             	push   -0x14(%ebp)
   14996:	e8 17 f8 ff ff       	call   141b2 <ata_send_cmd>
   1499b:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   1499e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149a5:	eb 73                	jmp    14a1a <disk_read+0x11e>
        // 利用信号量等待中断通知，然后再读取数据
        if (task_current()) {
   149a7:	e8 5b cd ff ff       	call   11707 <task_current>
   149ac:	85 c0                	test   %eax,%eax
   149ae:	74 15                	je     149c5 <disk_read+0xc9>
            sem_wait(disk->op_sem);
   149b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149b3:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   149b9:	83 ec 0c             	sub    $0xc,%esp
   149bc:	50                   	push   %eax
   149bd:	e8 24 35 00 00       	call   17ee6 <sem_wait>
   149c2:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   149c5:	83 ec 0c             	sub    $0xc,%esp
   149c8:	ff 75 ec             	push   -0x14(%ebp)
   149cb:	e8 b4 f9 ff ff       	call   14384 <ata_wait_data>
   149d0:	83 c4 10             	add    $0x10,%esp
   149d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   149d6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   149da:	79 19                	jns    149f5 <disk_read+0xf9>
            log_printf("disk(%s) read error: start sect %d, count %d", disk->name, start_sector, count);
   149dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149df:	ff 75 14             	push   0x14(%ebp)
   149e2:	ff 75 0c             	push   0xc(%ebp)
   149e5:	50                   	push   %eax
   149e6:	68 7c 97 01 00       	push   $0x1977c
   149eb:	e8 1f 40 00 00       	call   18a0f <log_printf>
   149f0:	83 c4 10             	add    $0x10,%esp
            break;
   149f3:	eb 2d                	jmp    14a22 <disk_read+0x126>
        }

        // 此处再读取数据
        ata_read_data(disk, buf, disk->sector_size);
   149f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149f8:	8b 40 28             	mov    0x28(%eax),%eax
   149fb:	83 ec 04             	sub    $0x4,%esp
   149fe:	50                   	push   %eax
   149ff:	ff 75 10             	push   0x10(%ebp)
   14a02:	ff 75 ec             	push   -0x14(%ebp)
   14a05:	e8 d8 f8 ff ff       	call   142e2 <ata_read_data>
   14a0a:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14a0d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a14:	8b 40 28             	mov    0x28(%eax),%eax
   14a17:	01 45 10             	add    %eax,0x10(%ebp)
   14a1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a1d:	3b 45 14             	cmp    0x14(%ebp),%eax
   14a20:	7c 85                	jl     149a7 <disk_read+0xab>
    }

    mutex_unlock(disk->mutex);
   14a22:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a25:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14a2b:	83 ec 0c             	sub    $0xc,%esp
   14a2e:	50                   	push   %eax
   14a2f:	e8 c5 33 00 00       	call   17df9 <mutex_unlock>
   14a34:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14a37:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14a3a:	c9                   	leave  
   14a3b:	c3                   	ret    

00014a3c <disk_write>:

/**
 * @brief 写扇区
 */
int disk_write (device_t * dev, int start_sector, char * buf, int count) {
   14a3c:	55                   	push   %ebp
   14a3d:	89 e5                	mov    %esp,%ebp
   14a3f:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14a42:	8b 45 08             	mov    0x8(%ebp),%eax
   14a45:	8b 40 0c             	mov    0xc(%eax),%eax
   14a48:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   14a4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14a4f:	75 21                	jne    14a72 <disk_write+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14a51:	8b 45 08             	mov    0x8(%ebp),%eax
   14a54:	8b 40 08             	mov    0x8(%eax),%eax
   14a57:	83 ec 08             	sub    $0x8,%esp
   14a5a:	50                   	push   %eax
   14a5b:	68 44 97 01 00       	push   $0x19744
   14a60:	e8 aa 3f 00 00       	call   18a0f <log_printf>
   14a65:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a68:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a6d:	e9 08 01 00 00       	jmp    14b7a <disk_write+0x13e>
    }

    disk_t * disk = part_info->disk;
   14a72:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a75:	8b 40 20             	mov    0x20(%eax),%eax
   14a78:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   14a7b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14a7f:	75 21                	jne    14aa2 <disk_write+0x66>
        log_printf("No disk for device %d", dev->minor);
   14a81:	8b 45 08             	mov    0x8(%ebp),%eax
   14a84:	8b 40 08             	mov    0x8(%eax),%eax
   14a87:	83 ec 08             	sub    $0x8,%esp
   14a8a:	50                   	push   %eax
   14a8b:	68 66 97 01 00       	push   $0x19766
   14a90:	e8 7a 3f 00 00       	call   18a0f <log_printf>
   14a95:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a9d:	e9 d8 00 00 00       	jmp    14b7a <disk_write+0x13e>
    }

    mutex_lock(disk->mutex);
   14aa2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aa5:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14aab:	83 ec 0c             	sub    $0xc,%esp
   14aae:	50                   	push   %eax
   14aaf:	e8 ae 32 00 00       	call   17d62 <mutex_lock>
   14ab4:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14ab7:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   14abe:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_WRITE);
   14ac1:	8b 45 14             	mov    0x14(%ebp),%eax
   14ac4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14ac7:	8b 4a 28             	mov    0x28(%edx),%ecx
   14aca:	8b 55 0c             	mov    0xc(%ebp),%edx
   14acd:	01 ca                	add    %ecx,%edx
   14acf:	6a 34                	push   $0x34
   14ad1:	50                   	push   %eax
   14ad2:	52                   	push   %edx
   14ad3:	ff 75 ec             	push   -0x14(%ebp)
   14ad6:	e8 d7 f6 ff ff       	call   141b2 <ata_send_cmd>
   14adb:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14ade:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14ae5:	eb 73                	jmp    14b5a <disk_write+0x11e>
        // 先写数据
        ata_write_data(disk, buf, disk->sector_size);
   14ae7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aea:	8b 40 28             	mov    0x28(%eax),%eax
   14aed:	83 ec 04             	sub    $0x4,%esp
   14af0:	50                   	push   %eax
   14af1:	ff 75 10             	push   0x10(%ebp)
   14af4:	ff 75 ec             	push   -0x14(%ebp)
   14af7:	e8 37 f8 ff ff       	call   14333 <ata_write_data>
   14afc:	83 c4 10             	add    $0x10,%esp

        // 利用信号量等待中断通知，等待写完成
        if (task_current()) {
   14aff:	e8 03 cc ff ff       	call   11707 <task_current>
   14b04:	85 c0                	test   %eax,%eax
   14b06:	74 15                	je     14b1d <disk_write+0xe1>
            sem_wait(disk->op_sem);
   14b08:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b0b:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14b11:	83 ec 0c             	sub    $0xc,%esp
   14b14:	50                   	push   %eax
   14b15:	e8 cc 33 00 00       	call   17ee6 <sem_wait>
   14b1a:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   14b1d:	83 ec 0c             	sub    $0xc,%esp
   14b20:	ff 75 ec             	push   -0x14(%ebp)
   14b23:	e8 5c f8 ff ff       	call   14384 <ata_wait_data>
   14b28:	83 c4 10             	add    $0x10,%esp
   14b2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14b2e:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14b32:	79 19                	jns    14b4d <disk_write+0x111>
            log_printf("disk(%s) write error: start sect %d, count %d", disk->name, start_sector, count);
   14b34:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b37:	ff 75 14             	push   0x14(%ebp)
   14b3a:	ff 75 0c             	push   0xc(%ebp)
   14b3d:	50                   	push   %eax
   14b3e:	68 ac 97 01 00       	push   $0x197ac
   14b43:	e8 c7 3e 00 00       	call   18a0f <log_printf>
   14b48:	83 c4 10             	add    $0x10,%esp
            break;
   14b4b:	eb 15                	jmp    14b62 <disk_write+0x126>
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14b4d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b54:	8b 40 28             	mov    0x28(%eax),%eax
   14b57:	01 45 10             	add    %eax,0x10(%ebp)
   14b5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b5d:	3b 45 14             	cmp    0x14(%ebp),%eax
   14b60:	7c 85                	jl     14ae7 <disk_write+0xab>
        }
    }

    mutex_unlock(disk->mutex);
   14b62:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b65:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14b6b:	83 ec 0c             	sub    $0xc,%esp
   14b6e:	50                   	push   %eax
   14b6f:	e8 85 32 00 00       	call   17df9 <mutex_unlock>
   14b74:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14b77:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14b7a:	c9                   	leave  
   14b7b:	c3                   	ret    

00014b7c <disk_control>:

/**
 * @brief 向磁盘发命令
 *
 */
int disk_control (device_t * dev, int cmd, int arg0, int arg1) {
   14b7c:	55                   	push   %ebp
   14b7d:	89 e5                	mov    %esp,%ebp
    return 0;
   14b7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b84:	5d                   	pop    %ebp
   14b85:	c3                   	ret    

00014b86 <disk_close>:

/**
 * @brief 关闭磁盘
 *
 */
void disk_close (device_t * dev) {
   14b86:	55                   	push   %ebp
   14b87:	89 e5                	mov    %esp,%ebp
}
   14b89:	90                   	nop
   14b8a:	5d                   	pop    %ebp
   14b8b:	c3                   	ret    

00014b8c <do_handler_ide_primary>:

/**
 * @brief 磁盘主通道中断处理
 */
void do_handler_ide_primary (exception_frame_t *frame)  {
   14b8c:	55                   	push   %ebp
   14b8d:	89 e5                	mov    %esp,%ebp
   14b8f:	83 ec 08             	sub    $0x8,%esp
    pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14b92:	83 ec 0c             	sub    $0xc,%esp
   14b95:	6a 2e                	push   $0x2e
   14b97:	e8 2d e2 ff ff       	call   12dc9 <pic_send_eoi>
   14b9c:	83 c4 10             	add    $0x10,%esp
    if (task_on_op && task_current()) {
   14b9f:	a1 b4 65 03 00       	mov    0x365b4,%eax
   14ba4:	85 c0                	test   %eax,%eax
   14ba6:	74 19                	je     14bc1 <do_handler_ide_primary+0x35>
   14ba8:	e8 5a cb ff ff       	call   11707 <task_current>
   14bad:	85 c0                	test   %eax,%eax
   14baf:	74 10                	je     14bc1 <do_handler_ide_primary+0x35>
        sem_notify(&op_sem);
   14bb1:	83 ec 0c             	sub    $0xc,%esp
   14bb4:	68 a4 65 03 00       	push   $0x365a4
   14bb9:	e8 96 33 00 00       	call   17f54 <sem_notify>
   14bbe:	83 c4 10             	add    $0x10,%esp
    }
}
   14bc1:	90                   	nop
   14bc2:	c9                   	leave  
   14bc3:	c3                   	ret    

00014bc4 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14bc4:	55                   	push   %ebp
   14bc5:	89 e5                	mov    %esp,%ebp
   14bc7:	83 ec 14             	sub    $0x14,%esp
   14bca:	8b 45 08             	mov    0x8(%ebp),%eax
   14bcd:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14bd1:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14bd5:	89 c2                	mov    %eax,%edx
   14bd7:	ec                   	in     (%dx),%al
   14bd8:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14bdb:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14bdf:	c9                   	leave  
   14be0:	c3                   	ret    

00014be1 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14be1:	55                   	push   %ebp
   14be2:	89 e5                	mov    %esp,%ebp
   14be4:	83 ec 08             	sub    $0x8,%esp
   14be7:	8b 45 08             	mov    0x8(%ebp),%eax
   14bea:	8b 55 0c             	mov    0xc(%ebp),%edx
   14bed:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   14bf1:	89 d0                	mov    %edx,%eax
   14bf3:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14bf6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14bfa:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14bfe:	ee                   	out    %al,(%dx)
}
   14bff:	90                   	nop
   14c00:	c9                   	leave  
   14c01:	c3                   	ret    

00014c02 <get_key>:
        [0x34] = {'.', '>'},
        [0x35] = {'/', '?'},
        [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code) {
   14c02:	55                   	push   %ebp
   14c03:	89 e5                	mov    %esp,%ebp
   14c05:	83 ec 04             	sub    $0x4,%esp
   14c08:	8b 45 08             	mov    0x8(%ebp),%eax
   14c0b:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14c0e:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c12:	83 e0 7f             	and    $0x7f,%eax
}
   14c15:	c9                   	leave  
   14c16:	c3                   	ret    

00014c17 <is_make_code>:

static inline int is_make_code(uint8_t key_code) {
   14c17:	55                   	push   %ebp
   14c18:	89 e5                	mov    %esp,%ebp
   14c1a:	83 ec 04             	sub    $0x4,%esp
   14c1d:	8b 45 08             	mov    0x8(%ebp),%eax
   14c20:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   14c23:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c27:	f7 d0                	not    %eax
   14c29:	c0 e8 07             	shr    $0x7,%al
   14c2c:	0f b6 c0             	movzbl %al,%eax
}
   14c2f:	c9                   	leave  
   14c30:	c3                   	ret    

00014c31 <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void) {
   14c31:	55                   	push   %ebp
   14c32:	89 e5                	mov    %esp,%ebp
   14c34:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000; 
   14c37:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14c3e:	eb 14                	jmp    14c54 <kbd_wait_send_ready+0x23>
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0) {
   14c40:	6a 64                	push   $0x64
   14c42:	e8 7d ff ff ff       	call   14bc4 <inb>
   14c47:	83 c4 04             	add    $0x4,%esp
   14c4a:	0f b6 c0             	movzbl %al,%eax
   14c4d:	83 e0 02             	and    $0x2,%eax
   14c50:	85 c0                	test   %eax,%eax
   14c52:	74 0f                	je     14c63 <kbd_wait_send_ready+0x32>
    while (time_out--) {
   14c54:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14c57:	8d 50 ff             	lea    -0x1(%eax),%edx
   14c5a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14c5d:	85 c0                	test   %eax,%eax
   14c5f:	75 df                	jne    14c40 <kbd_wait_send_ready+0xf>
   14c61:	eb 01                	jmp    14c64 <kbd_wait_send_ready+0x33>
            return;
   14c63:	90                   	nop
        }
    }
}
   14c64:	c9                   	leave  
   14c65:	c3                   	ret    

00014c66 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data) {
   14c66:	55                   	push   %ebp
   14c67:	89 e5                	mov    %esp,%ebp
   14c69:	83 ec 08             	sub    $0x8,%esp
   14c6c:	8b 55 08             	mov    0x8(%ebp),%edx
   14c6f:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c72:	88 55 fc             	mov    %dl,-0x4(%ebp)
   14c75:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   14c78:	e8 b4 ff ff ff       	call   14c31 <kbd_wait_send_ready>
    outb(port, data);
   14c7d:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   14c81:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c85:	52                   	push   %edx
   14c86:	50                   	push   %eax
   14c87:	e8 55 ff ff ff       	call   14be1 <outb>
   14c8c:	83 c4 08             	add    $0x8,%esp
}
   14c8f:	90                   	nop
   14c90:	c9                   	leave  
   14c91:	c3                   	ret    

00014c92 <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void) {
   14c92:	55                   	push   %ebp
   14c93:	89 e5                	mov    %esp,%ebp
   14c95:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14c98:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14c9f:	eb 14                	jmp    14cb5 <kbd_wait_recv_ready+0x23>
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY) {
   14ca1:	6a 64                	push   $0x64
   14ca3:	e8 1c ff ff ff       	call   14bc4 <inb>
   14ca8:	83 c4 04             	add    $0x4,%esp
   14cab:	0f b6 c0             	movzbl %al,%eax
   14cae:	83 e0 01             	and    $0x1,%eax
   14cb1:	85 c0                	test   %eax,%eax
   14cb3:	75 0f                	jne    14cc4 <kbd_wait_recv_ready+0x32>
    while (time_out--) {
   14cb5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14cb8:	8d 50 ff             	lea    -0x1(%eax),%edx
   14cbb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14cbe:	85 c0                	test   %eax,%eax
   14cc0:	75 df                	jne    14ca1 <kbd_wait_recv_ready+0xf>
   14cc2:	eb 01                	jmp    14cc5 <kbd_wait_recv_ready+0x33>
            return;
   14cc4:	90                   	nop
        }
    }
}
   14cc5:	c9                   	leave  
   14cc6:	c3                   	ret    

00014cc7 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void) {
   14cc7:	55                   	push   %ebp
   14cc8:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14cca:	e8 c3 ff ff ff       	call   14c92 <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   14ccf:	6a 60                	push   $0x60
   14cd1:	e8 ee fe ff ff       	call   14bc4 <inb>
   14cd6:	83 c4 04             	add    $0x4,%esp
}
   14cd9:	c9                   	leave  
   14cda:	c3                   	ret    

00014cdb <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status (void) {
   14cdb:	55                   	push   %ebp
   14cdc:	89 e5                	mov    %esp,%ebp
   14cde:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   14ce1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14ce8:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14cef:	0f b6 c0             	movzbl %al,%eax
   14cf2:	83 e0 01             	and    $0x1,%eax
   14cf5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14cf8:	68 ed 00 00 00       	push   $0xed
   14cfd:	6a 60                	push   $0x60
   14cff:	e8 62 ff ff ff       	call   14c66 <kbd_write>
   14d04:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14d07:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d0a:	0f b6 c0             	movzbl %al,%eax
   14d0d:	50                   	push   %eax
   14d0e:	6a 60                	push   $0x60
   14d10:	e8 51 ff ff ff       	call   14c66 <kbd_write>
   14d15:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14d18:	e8 aa ff ff ff       	call   14cc7 <kbd_read>
}
   14d1d:	90                   	nop
   14d1e:	c9                   	leave  
   14d1f:	c3                   	ret    

00014d20 <do_fx_key>:

static void do_fx_key (int key) {
   14d20:	55                   	push   %ebp
   14d21:	89 e5                	mov    %esp,%ebp
   14d23:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14d26:	8b 45 08             	mov    0x8(%ebp),%eax
   14d29:	83 e8 3b             	sub    $0x3b,%eax
   14d2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14d2f:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d36:	83 e0 20             	and    $0x20,%eax
   14d39:	84 c0                	test   %al,%al
   14d3b:	75 0e                	jne    14d4b <do_fx_key+0x2b>
   14d3d:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d44:	83 e0 40             	and    $0x40,%eax
   14d47:	84 c0                	test   %al,%al
   14d49:	74 0e                	je     14d59 <do_fx_key+0x39>
        tty_select(index);
   14d4b:	83 ec 0c             	sub    $0xc,%esp
   14d4e:	ff 75 f4             	push   -0xc(%ebp)
   14d51:	e8 e8 09 00 00       	call   1573e <tty_select>
   14d56:	83 c4 10             	add    $0x10,%esp
    }
}
   14d59:	90                   	nop
   14d5a:	c9                   	leave  
   14d5b:	c3                   	ret    

00014d5c <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key (uint8_t raw_code) {
   14d5c:	55                   	push   %ebp
   14d5d:	89 e5                	mov    %esp,%ebp
   14d5f:	83 ec 28             	sub    $0x28,%esp
   14d62:	8b 45 08             	mov    0x8(%ebp),%eax
   14d65:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);		// 去掉最高位
   14d68:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14d6c:	50                   	push   %eax
   14d6d:	e8 90 fe ff ff       	call   14c02 <get_key>
   14d72:	83 c4 04             	add    $0x4,%esp
   14d75:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code);
   14d78:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14d7c:	50                   	push   %eax
   14d7d:	e8 95 fe ff ff       	call   14c17 <is_make_code>
   14d82:	83 c4 04             	add    $0x4,%esp
   14d85:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
	switch (key) {
   14d88:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14d8c:	83 e8 1d             	sub    $0x1d,%eax
   14d8f:	83 f8 25             	cmp    $0x25,%eax
   14d92:	0f 87 f9 00 00 00    	ja     14e91 <do_normal_key+0x135>
   14d98:	8b 04 85 e0 99 01 00 	mov    0x199e0(,%eax,4),%eax
   14d9f:	ff e0                	jmp    *%eax
	    // shift, alt, ctrl键，记录标志位
	case KEY_RSHIFT:
		kbd_state.rshift_press = is_make;  // 仅设置标志位
   14da1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14da4:	c1 e0 07             	shl    $0x7,%eax
   14da7:	c0 f8 07             	sar    $0x7,%al
   14daa:	83 e0 01             	and    $0x1,%eax
   14dad:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14db4:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dbb:	83 e0 fb             	and    $0xfffffffb,%eax
   14dbe:	09 d0                	or     %edx,%eax
   14dc0:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14dc5:	e9 5f 01 00 00       	jmp    14f29 <do_normal_key+0x1cd>
	case KEY_LSHIFT:
		kbd_state.lshift_press = is_make;  // 仅设置标志位
   14dca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14dcd:	c1 e0 07             	shl    $0x7,%eax
   14dd0:	c0 f8 07             	sar    $0x7,%al
   14dd3:	83 e0 01             	and    $0x1,%eax
   14dd6:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14dd9:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14de0:	83 e0 fd             	and    $0xfffffffd,%eax
   14de3:	09 d0                	or     %edx,%eax
   14de5:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14dea:	e9 3a 01 00 00       	jmp    14f29 <do_normal_key+0x1cd>
    case KEY_CAPS:  // 大小写键，设置大小写状态
		if (is_make) {
   14def:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14df3:	0f 84 2c 01 00 00    	je     14f25 <do_normal_key+0x1c9>
			kbd_state.caps_lock = ~kbd_state.caps_lock;
   14df9:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e00:	c1 e0 07             	shl    $0x7,%eax
   14e03:	c0 f8 07             	sar    $0x7,%al
   14e06:	f7 d0                	not    %eax
   14e08:	c1 e0 07             	shl    $0x7,%eax
   14e0b:	c0 f8 07             	sar    $0x7,%al
   14e0e:	83 e0 01             	and    $0x1,%eax
   14e11:	89 c2                	mov    %eax,%edx
   14e13:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e1a:	83 e0 fe             	and    $0xfffffffe,%eax
   14e1d:	09 d0                	or     %edx,%eax
   14e1f:	a2 b8 65 03 00       	mov    %al,0x365b8
			update_led_status();
   14e24:	e8 b2 fe ff ff       	call   14cdb <update_led_status>
		}
		break;
   14e29:	e9 f7 00 00 00       	jmp    14f25 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make;  // 仅设置标志位
   14e2e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e31:	c1 e0 07             	shl    $0x7,%eax
   14e34:	c0 f8 07             	sar    $0x7,%al
   14e37:	83 e0 01             	and    $0x1,%eax
   14e3a:	c1 e0 04             	shl    $0x4,%eax
   14e3d:	89 c2                	mov    %eax,%edx
   14e3f:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e46:	83 e0 ef             	and    $0xffffffef,%eax
   14e49:	09 d0                	or     %edx,%eax
   14e4b:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14e50:	e9 d4 00 00 00       	jmp    14f29 <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make;  // 仅设置标志位
   14e55:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e58:	c1 e0 07             	shl    $0x7,%eax
   14e5b:	c0 f8 07             	sar    $0x7,%al
   14e5e:	83 e0 01             	and    $0x1,%eax
   14e61:	c1 e0 05             	shl    $0x5,%eax
   14e64:	89 c2                	mov    %eax,%edx
   14e66:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e6d:	83 e0 df             	and    $0xffffffdf,%eax
   14e70:	09 d0                	or     %edx,%eax
   14e72:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14e77:	e9 ad 00 00 00       	jmp    14f29 <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
         do_fx_key(key);
   14e7c:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14e80:	83 ec 0c             	sub    $0xc,%esp
   14e83:	50                   	push   %eax
   14e84:	e8 97 fe ff ff       	call   14d20 <do_fx_key>
   14e89:	83 c4 10             	add    $0x10,%esp
        break;
   14e8c:	e9 98 00 00 00       	jmp    14f29 <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make) {
   14e91:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14e95:	0f 84 8d 00 00 00    	je     14f28 <do_normal_key+0x1cc>
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14e9b:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ea2:	83 e0 04             	and    $0x4,%eax
   14ea5:	84 c0                	test   %al,%al
   14ea7:	75 0e                	jne    14eb7 <do_normal_key+0x15b>
   14ea9:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14eb0:	83 e0 02             	and    $0x2,%eax
   14eb3:	84 c0                	test   %al,%al
   14eb5:	74 11                	je     14ec8 <do_normal_key+0x16c>
                key = map_table[key].func;  // 第2功能
   14eb7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ebb:	0f b6 84 00 e1 97 01 	movzbl 0x197e1(%eax,%eax,1),%eax
   14ec2:	00 
   14ec3:	88 45 f7             	mov    %al,-0x9(%ebp)
   14ec6:	eb 0f                	jmp    14ed7 <do_normal_key+0x17b>
            }else {
                key = map_table[key].normal;  // 第1功能
   14ec8:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ecc:	0f b6 84 00 e0 97 01 	movzbl 0x197e0(%eax,%eax,1),%eax
   14ed3:	00 
   14ed4:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock) {
   14ed7:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ede:	83 e0 01             	and    $0x1,%eax
   14ee1:	84 c0                	test   %al,%al
   14ee3:	74 2e                	je     14f13 <do_normal_key+0x1b7>
                if ((key >= 'A') && (key <= 'Z')) {
   14ee5:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14ee9:	7e 12                	jle    14efd <do_normal_key+0x1a1>
   14eeb:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14eef:	7f 0c                	jg     14efd <do_normal_key+0x1a1>
                    // 大写转小写
                    key = key - 'A' + 'a';
   14ef1:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14ef5:	83 c0 20             	add    $0x20,%eax
   14ef8:	88 45 f7             	mov    %al,-0x9(%ebp)
   14efb:	eb 16                	jmp    14f13 <do_normal_key+0x1b7>
                } else if ((key >= 'a') && (key <= 'z')) {
   14efd:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14f01:	7e 10                	jle    14f13 <do_normal_key+0x1b7>
   14f03:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14f07:	7f 0a                	jg     14f13 <do_normal_key+0x1b7>
                    // 小写转大小
                    key = key - 'a' + 'A';
   14f09:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14f0d:	83 e8 20             	sub    $0x20,%eax
   14f10:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            //log_printf("key=%c", key);
            tty_in(key);
   14f13:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f17:	83 ec 0c             	sub    $0xc,%esp
   14f1a:	50                   	push   %eax
   14f1b:	e8 b1 07 00 00       	call   156d1 <tty_in>
   14f20:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14f23:	eb 03                	jmp    14f28 <do_normal_key+0x1cc>
		break;
   14f25:	90                   	nop
   14f26:	eb 01                	jmp    14f29 <do_normal_key+0x1cd>
        break;
   14f28:	90                   	nop
    }
}
   14f29:	90                   	nop
   14f2a:	c9                   	leave  
   14f2b:	c3                   	ret    

00014f2c <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key (uint8_t raw_code) {
   14f2c:	55                   	push   %ebp
   14f2d:	89 e5                	mov    %esp,%ebp
   14f2f:	83 ec 14             	sub    $0x14,%esp
   14f32:	8b 45 08             	mov    0x8(%ebp),%eax
   14f35:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);			// 去掉最高位
   14f38:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f3c:	50                   	push   %eax
   14f3d:	e8 c0 fc ff ff       	call   14c02 <get_key>
   14f42:	83 c4 04             	add    $0x4,%esp
   14f45:	0f be c0             	movsbl %al,%eax
   14f48:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code);	// 按下或释放
   14f4b:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f4f:	50                   	push   %eax
   14f50:	e8 c2 fc ff ff       	call   14c17 <is_make_code>
   14f55:	83 c4 04             	add    $0x4,%esp
   14f58:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key) {
   14f5b:	83 7d fc 1d          	cmpl   $0x1d,-0x4(%ebp)
   14f5f:	74 08                	je     14f69 <do_e0_key+0x3d>
   14f61:	83 7d fc 38          	cmpl   $0x38,-0x4(%ebp)
   14f65:	74 26                	je     14f8d <do_e0_key+0x61>
            break;
        case KEY_ALT:
            kbd_state.ralt_press = is_make;  // 仅设置标志位
            break;
    }
}
   14f67:	eb 49                	jmp    14fb2 <do_e0_key+0x86>
            kbd_state.rctrl_press = is_make;  // 仅设置标志位
   14f69:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14f6c:	c1 e0 07             	shl    $0x7,%eax
   14f6f:	c0 f8 07             	sar    $0x7,%al
   14f72:	83 e0 01             	and    $0x1,%eax
   14f75:	c1 e0 06             	shl    $0x6,%eax
   14f78:	89 c2                	mov    %eax,%edx
   14f7a:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14f81:	83 e0 bf             	and    $0xffffffbf,%eax
   14f84:	09 d0                	or     %edx,%eax
   14f86:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14f8b:	eb 25                	jmp    14fb2 <do_e0_key+0x86>
            kbd_state.ralt_press = is_make;  // 仅设置标志位
   14f8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14f90:	c1 e0 07             	shl    $0x7,%eax
   14f93:	c0 f8 07             	sar    $0x7,%al
   14f96:	83 e0 01             	and    $0x1,%eax
   14f99:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14fa0:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14fa7:	83 e0 f7             	and    $0xfffffff7,%eax
   14faa:	09 d0                	or     %edx,%eax
   14fac:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14fb1:	90                   	nop
}
   14fb2:	90                   	nop
   14fb3:	c9                   	leave  
   14fb4:	c3                   	ret    

00014fb5 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame) {
   14fb5:	55                   	push   %ebp
   14fb6:	89 e5                	mov    %esp,%ebp
   14fb8:	83 ec 18             	sub    $0x18,%esp
		BEGIN_E0,			// 收到e0字符
		BEGIN_E1,			// 收到e1字符
    }recv_state = NORMAL;

	// 检查是否有数据，无数据则退出
	uint8_t status = inb(KBD_PORT_STAT);
   14fbb:	6a 64                	push   $0x64
   14fbd:	e8 02 fc ff ff       	call   14bc4 <inb>
   14fc2:	83 c4 04             	add    $0x4,%esp
   14fc5:	88 45 f7             	mov    %al,-0x9(%ebp)
	if (!(status & KBD_STAT_RECV_READY)) {
   14fc8:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14fcc:	83 e0 01             	and    $0x1,%eax
   14fcf:	85 c0                	test   %eax,%eax
   14fd1:	75 12                	jne    14fe5 <do_handler_kbd+0x30>
        pic_send_eoi(IRQ1_KEYBOARD);
   14fd3:	83 ec 0c             	sub    $0xc,%esp
   14fd6:	6a 21                	push   $0x21
   14fd8:	e8 ec dd ff ff       	call   12dc9 <pic_send_eoi>
   14fdd:	83 c4 10             	add    $0x10,%esp
		return;
   14fe0:	e9 94 00 00 00       	jmp    15079 <do_handler_kbd+0xc4>
	}

	// 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   14fe5:	83 ec 0c             	sub    $0xc,%esp
   14fe8:	6a 60                	push   $0x60
   14fea:	e8 d5 fb ff ff       	call   14bc4 <inb>
   14fef:	83 c4 10             	add    $0x10,%esp
   14ff2:	88 45 f6             	mov    %al,-0xa(%ebp)

	// 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
	// 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   14ff5:	83 ec 0c             	sub    $0xc,%esp
   14ff8:	6a 21                	push   $0x21
   14ffa:	e8 ca dd ff ff       	call   12dc9 <pic_send_eoi>
   14fff:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
	if (raw_code == KEY_E0) {
   15002:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   15006:	75 0c                	jne    15014 <do_handler_kbd+0x5f>
		// E0字符
		recv_state = BEGIN_E0;
   15008:	c7 05 bc 65 03 00 01 	movl   $0x1,0x365bc
   1500f:	00 00 00 
   15012:	eb 65                	jmp    15079 <do_handler_kbd+0xc4>
	} else if (raw_code == KEY_E1) {
   15014:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   15018:	75 0c                	jne    15026 <do_handler_kbd+0x71>
		// E1字符，不处理
		recv_state = BEGIN_E1;
   1501a:	c7 05 bc 65 03 00 02 	movl   $0x2,0x365bc
   15021:	00 00 00 
   15024:	eb 53                	jmp    15079 <do_handler_kbd+0xc4>
	} else {
		switch (recv_state) {
   15026:	a1 bc 65 03 00       	mov    0x365bc,%eax
   1502b:	83 f8 02             	cmp    $0x2,%eax
   1502e:	74 3e                	je     1506e <do_handler_kbd+0xb9>
   15030:	83 f8 02             	cmp    $0x2,%eax
   15033:	77 44                	ja     15079 <do_handler_kbd+0xc4>
   15035:	85 c0                	test   %eax,%eax
   15037:	74 07                	je     15040 <do_handler_kbd+0x8b>
   15039:	83 f8 01             	cmp    $0x1,%eax
   1503c:	74 14                	je     15052 <do_handler_kbd+0x9d>
   1503e:	eb 39                	jmp    15079 <do_handler_kbd+0xc4>
		case NORMAL:
			do_normal_key(raw_code);
   15040:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   15044:	83 ec 0c             	sub    $0xc,%esp
   15047:	50                   	push   %eax
   15048:	e8 0f fd ff ff       	call   14d5c <do_normal_key>
   1504d:	83 c4 10             	add    $0x10,%esp
			break;
   15050:	eb 27                	jmp    15079 <do_handler_kbd+0xc4>
		case BEGIN_E0: // 不处理print scr
			do_e0_key(raw_code);
   15052:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   15056:	83 ec 0c             	sub    $0xc,%esp
   15059:	50                   	push   %eax
   1505a:	e8 cd fe ff ff       	call   14f2c <do_e0_key>
   1505f:	83 c4 10             	add    $0x10,%esp
			recv_state = NORMAL;
   15062:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   15069:	00 00 00 
			break;
   1506c:	eb 0b                	jmp    15079 <do_handler_kbd+0xc4>
		case BEGIN_E1:  // 不处理pause
			recv_state = NORMAL;
   1506e:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   15075:	00 00 00 
			break;
   15078:	90                   	nop
		}
	}
}
   15079:	c9                   	leave  
   1507a:	c3                   	ret    

0001507b <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void) {
   1507b:	55                   	push   %ebp
   1507c:	89 e5                	mov    %esp,%ebp
   1507e:	83 ec 08             	sub    $0x8,%esp
    static int inited = 0;

    if (!inited) {
   15081:	a1 c0 65 03 00       	mov    0x365c0,%eax
   15086:	85 c0                	test   %eax,%eax
   15088:	75 2e                	jne    150b8 <kbd_init+0x3d>
        update_led_status();
   1508a:	e8 4c fc ff ff       	call   14cdb <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   1508f:	83 ec 08             	sub    $0x8,%esp
   15092:	68 a5 02 01 00       	push   $0x102a5
   15097:	6a 21                	push   $0x21
   15099:	e8 04 df ff ff       	call   12fa2 <irq_install>
   1509e:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   150a1:	83 ec 0c             	sub    $0xc,%esp
   150a4:	6a 21                	push   $0x21
   150a6:	e8 31 df ff ff       	call   12fdc <irq_enable>
   150ab:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   150ae:	c7 05 c0 65 03 00 01 	movl   $0x1,0x365c0
   150b5:	00 00 00 
    }
}
   150b8:	90                   	nop
   150b9:	c9                   	leave  
   150ba:	c3                   	ret    

000150bb <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   150bb:	55                   	push   %ebp
   150bc:	89 e5                	mov    %esp,%ebp
   150be:	83 ec 08             	sub    $0x8,%esp
   150c1:	8b 45 08             	mov    0x8(%ebp),%eax
   150c4:	8b 55 0c             	mov    0xc(%ebp),%edx
   150c7:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
   150cb:	89 d0                	mov    %edx,%eax
   150cd:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   150d0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   150d4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   150d8:	ee                   	out    %al,(%dx)
}
   150d9:	90                   	nop
   150da:	c9                   	leave  
   150db:	c3                   	ret    

000150dc <do_handler_timer>:
static uint32_t sys_tick;						// 系统启动后的tick数量

/**
 * 定时器中断处理函数
 */
void do_handler_timer (exception_frame_t *frame) {
   150dc:	55                   	push   %ebp
   150dd:	89 e5                	mov    %esp,%ebp
   150df:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   150e2:	a1 c4 65 03 00       	mov    0x365c4,%eax
   150e7:	83 c0 01             	add    $0x1,%eax
   150ea:	a3 c4 65 03 00       	mov    %eax,0x365c4

    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续噢应
    pic_send_eoi(IRQ0_TIMER);
   150ef:	83 ec 0c             	sub    $0xc,%esp
   150f2:	6a 20                	push   $0x20
   150f4:	e8 d0 dc ff ff       	call   12dc9 <pic_send_eoi>
   150f9:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   150fc:	e8 55 c7 ff ff       	call   11856 <task_time_tick>
}
   15101:	90                   	nop
   15102:	c9                   	leave  
   15103:	c3                   	ret    

00015104 <init_pit>:

/**
 * 初始化硬件定时器
 */
static void init_pit (void) {
   15104:	55                   	push   %ebp
   15105:	89 e5                	mov    %esp,%ebp
   15107:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   1510a:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    // 2023-3-18 写错了，应该是模式3或者模式2
    //outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   15111:	6a 36                	push   $0x36
   15113:	6a 43                	push   $0x43
   15115:	e8 a1 ff ff ff       	call   150bb <outb>
   1511a:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);   // 加载低8位
   1511d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15120:	0f b6 c0             	movzbl %al,%eax
   15123:	50                   	push   %eax
   15124:	6a 40                	push   $0x40
   15126:	e8 90 ff ff ff       	call   150bb <outb>
   1512b:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   1512e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15131:	c1 e8 08             	shr    $0x8,%eax
   15134:	0f b6 c0             	movzbl %al,%eax
   15137:	50                   	push   %eax
   15138:	6a 40                	push   $0x40
   1513a:	e8 7c ff ff ff       	call   150bb <outb>
   1513f:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   15142:	83 ec 08             	sub    $0x8,%esp
   15145:	68 86 02 01 00       	push   $0x10286
   1514a:	6a 20                	push   $0x20
   1514c:	e8 51 de ff ff       	call   12fa2 <irq_install>
   15151:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   15154:	83 ec 0c             	sub    $0xc,%esp
   15157:	6a 20                	push   $0x20
   15159:	e8 7e de ff ff       	call   12fdc <irq_enable>
   1515e:	83 c4 10             	add    $0x10,%esp
}
   15161:	90                   	nop
   15162:	c9                   	leave  
   15163:	c3                   	ret    

00015164 <time_init>:

/**
 * 定时器初始化
 */
void time_init (void) {
   15164:	55                   	push   %ebp
   15165:	89 e5                	mov    %esp,%ebp
   15167:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   1516a:	c7 05 c4 65 03 00 00 	movl   $0x0,0x365c4
   15171:	00 00 00 

    init_pit();
   15174:	e8 8b ff ff ff       	call   15104 <init_pit>
}
   15179:	90                   	nop
   1517a:	c9                   	leave  
   1517b:	c3                   	ret    

0001517c <tty_fifo_init>:
static int curr_tty = 0;

/**
 * @brief FIFO初始化
 */
void tty_fifo_init (tty_fifo_t * fifo, char * buf, int size) {
   1517c:	55                   	push   %ebp
   1517d:	89 e5                	mov    %esp,%ebp
	fifo->buf = buf;
   1517f:	8b 45 08             	mov    0x8(%ebp),%eax
   15182:	8b 55 0c             	mov    0xc(%ebp),%edx
   15185:	89 10                	mov    %edx,(%eax)
	fifo->count = 0;
   15187:	8b 45 08             	mov    0x8(%ebp),%eax
   1518a:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	fifo->size = size;
   15191:	8b 45 08             	mov    0x8(%ebp),%eax
   15194:	8b 55 10             	mov    0x10(%ebp),%edx
   15197:	89 50 04             	mov    %edx,0x4(%eax)
	fifo->read = fifo->write = 0;
   1519a:	8b 45 08             	mov    0x8(%ebp),%eax
   1519d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   151a4:	8b 45 08             	mov    0x8(%ebp),%eax
   151a7:	8b 50 0c             	mov    0xc(%eax),%edx
   151aa:	8b 45 08             	mov    0x8(%ebp),%eax
   151ad:	89 50 08             	mov    %edx,0x8(%eax)
}
   151b0:	90                   	nop
   151b1:	5d                   	pop    %ebp
   151b2:	c3                   	ret    

000151b3 <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get (tty_fifo_t * fifo, char * c) {
   151b3:	55                   	push   %ebp
   151b4:	89 e5                	mov    %esp,%ebp
   151b6:	53                   	push   %ebx
   151b7:	83 ec 14             	sub    $0x14,%esp
	if (fifo->count <= 0) {
   151ba:	8b 45 08             	mov    0x8(%ebp),%eax
   151bd:	8b 40 10             	mov    0x10(%eax),%eax
   151c0:	85 c0                	test   %eax,%eax
   151c2:	7f 07                	jg     151cb <tty_fifo_get+0x18>
		return -1;
   151c4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   151c9:	eb 62                	jmp    1522d <tty_fifo_get+0x7a>
	}

	irq_state_t state = irq_enter_protection();
   151cb:	e8 34 df ff ff       	call   13104 <irq_enter_protection>
   151d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*c = fifo->buf[fifo->read++];
   151d3:	8b 45 08             	mov    0x8(%ebp),%eax
   151d6:	8b 18                	mov    (%eax),%ebx
   151d8:	8b 45 08             	mov    0x8(%ebp),%eax
   151db:	8b 40 08             	mov    0x8(%eax),%eax
   151de:	8d 48 01             	lea    0x1(%eax),%ecx
   151e1:	8b 55 08             	mov    0x8(%ebp),%edx
   151e4:	89 4a 08             	mov    %ecx,0x8(%edx)
   151e7:	01 d8                	add    %ebx,%eax
   151e9:	0f b6 10             	movzbl (%eax),%edx
   151ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   151ef:	88 10                	mov    %dl,(%eax)
	if (fifo->read >= fifo->size) {
   151f1:	8b 45 08             	mov    0x8(%ebp),%eax
   151f4:	8b 50 08             	mov    0x8(%eax),%edx
   151f7:	8b 45 08             	mov    0x8(%ebp),%eax
   151fa:	8b 40 04             	mov    0x4(%eax),%eax
   151fd:	39 c2                	cmp    %eax,%edx
   151ff:	7c 0a                	jl     1520b <tty_fifo_get+0x58>
		fifo->read = 0;
   15201:	8b 45 08             	mov    0x8(%ebp),%eax
   15204:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	}
	fifo->count--;
   1520b:	8b 45 08             	mov    0x8(%ebp),%eax
   1520e:	8b 40 10             	mov    0x10(%eax),%eax
   15211:	8d 50 ff             	lea    -0x1(%eax),%edx
   15214:	8b 45 08             	mov    0x8(%ebp),%eax
   15217:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   1521a:	83 ec 0c             	sub    $0xc,%esp
   1521d:	ff 75 f4             	push   -0xc(%ebp)
   15220:	e8 f7 de ff ff       	call   1311c <irq_leave_protection>
   15225:	83 c4 10             	add    $0x10,%esp
	return 0;
   15228:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1522d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15230:	c9                   	leave  
   15231:	c3                   	ret    

00015232 <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put (tty_fifo_t * fifo, char c) {
   15232:	55                   	push   %ebp
   15233:	89 e5                	mov    %esp,%ebp
   15235:	53                   	push   %ebx
   15236:	83 ec 24             	sub    $0x24,%esp
   15239:	8b 45 0c             	mov    0xc(%ebp),%eax
   1523c:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (fifo->count >= fifo->size) {
   1523f:	8b 45 08             	mov    0x8(%ebp),%eax
   15242:	8b 50 10             	mov    0x10(%eax),%edx
   15245:	8b 45 08             	mov    0x8(%ebp),%eax
   15248:	8b 40 04             	mov    0x4(%eax),%eax
   1524b:	39 c2                	cmp    %eax,%edx
   1524d:	7c 07                	jl     15256 <tty_fifo_put+0x24>
		return -1;
   1524f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15254:	eb 61                	jmp    152b7 <tty_fifo_put+0x85>
	}

	irq_state_t state = irq_enter_protection();
   15256:	e8 a9 de ff ff       	call   13104 <irq_enter_protection>
   1525b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fifo->buf[fifo->write++] = c;
   1525e:	8b 45 08             	mov    0x8(%ebp),%eax
   15261:	8b 18                	mov    (%eax),%ebx
   15263:	8b 45 08             	mov    0x8(%ebp),%eax
   15266:	8b 40 0c             	mov    0xc(%eax),%eax
   15269:	8d 48 01             	lea    0x1(%eax),%ecx
   1526c:	8b 55 08             	mov    0x8(%ebp),%edx
   1526f:	89 4a 0c             	mov    %ecx,0xc(%edx)
   15272:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   15275:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   15279:	88 02                	mov    %al,(%edx)
	if (fifo->write >= fifo->size) {
   1527b:	8b 45 08             	mov    0x8(%ebp),%eax
   1527e:	8b 50 0c             	mov    0xc(%eax),%edx
   15281:	8b 45 08             	mov    0x8(%ebp),%eax
   15284:	8b 40 04             	mov    0x4(%eax),%eax
   15287:	39 c2                	cmp    %eax,%edx
   15289:	7c 0a                	jl     15295 <tty_fifo_put+0x63>
		fifo->write = 0;
   1528b:	8b 45 08             	mov    0x8(%ebp),%eax
   1528e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	fifo->count++;
   15295:	8b 45 08             	mov    0x8(%ebp),%eax
   15298:	8b 40 10             	mov    0x10(%eax),%eax
   1529b:	8d 50 01             	lea    0x1(%eax),%edx
   1529e:	8b 45 08             	mov    0x8(%ebp),%eax
   152a1:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   152a4:	83 ec 0c             	sub    $0xc,%esp
   152a7:	ff 75 f4             	push   -0xc(%ebp)
   152aa:	e8 6d de ff ff       	call   1311c <irq_leave_protection>
   152af:	83 c4 10             	add    $0x10,%esp

	return 0;
   152b2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   152b7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   152ba:	c9                   	leave  
   152bb:	c3                   	ret    

000152bc <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t * get_tty (device_t * dev) {
   152bc:	55                   	push   %ebp
   152bd:	89 e5                	mov    %esp,%ebp
   152bf:	83 ec 18             	sub    $0x18,%esp
	int tty = dev->minor;
   152c2:	8b 45 08             	mov    0x8(%ebp),%eax
   152c5:	8b 40 08             	mov    0x8(%eax),%eax
   152c8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count)) {
   152cb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   152cf:	78 10                	js     152e1 <get_tty+0x25>
   152d1:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   152d5:	7f 0a                	jg     152e1 <get_tty+0x25>
   152d7:	8b 45 08             	mov    0x8(%ebp),%eax
   152da:	8b 40 10             	mov    0x10(%eax),%eax
   152dd:	85 c0                	test   %eax,%eax
   152df:	75 1a                	jne    152fb <get_tty+0x3f>
		log_printf("tty is not opened. tty = %d", tty);
   152e1:	83 ec 08             	sub    $0x8,%esp
   152e4:	ff 75 f4             	push   -0xc(%ebp)
   152e7:	68 78 9a 01 00       	push   $0x19a78
   152ec:	e8 1e 37 00 00       	call   18a0f <log_printf>
   152f1:	83 c4 10             	add    $0x10,%esp
		return (tty_t *)0;
   152f4:	b8 00 00 00 00       	mov    $0x0,%eax
   152f9:	eb 0e                	jmp    15309 <get_tty+0x4d>
	}

	return tty_devs + tty;
   152fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   152fe:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15304:	05 e0 65 03 00       	add    $0x365e0,%eax
}
   15309:	c9                   	leave  
   1530a:	c3                   	ret    

0001530b <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open (device_t * dev)  {
   1530b:	55                   	push   %ebp
   1530c:	89 e5                	mov    %esp,%ebp
   1530e:	83 ec 18             	sub    $0x18,%esp
	int idx = dev->minor;
   15311:	8b 45 08             	mov    0x8(%ebp),%eax
   15314:	8b 40 08             	mov    0x8(%eax),%eax
   15317:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((idx < 0) || (idx >= TTY_NR)) {
   1531a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1531e:	78 06                	js     15326 <tty_open+0x1b>
   15320:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   15324:	7e 1d                	jle    15343 <tty_open+0x38>
		log_printf("open tty failed. incorrect tty num = %d", idx);
   15326:	83 ec 08             	sub    $0x8,%esp
   15329:	ff 75 f4             	push   -0xc(%ebp)
   1532c:	68 94 9a 01 00       	push   $0x19a94
   15331:	e8 d9 36 00 00       	call   18a0f <log_printf>
   15336:	83 c4 10             	add    $0x10,%esp
		return -1;
   15339:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1533e:	e9 bf 00 00 00       	jmp    15402 <tty_open+0xf7>
	}

	tty_t * tty = tty_devs + idx;
   15343:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15346:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1534c:	05 e0 65 03 00       	add    $0x365e0,%eax
   15351:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   15354:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15357:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1535a:	81 c2 00 02 00 00    	add    $0x200,%edx
   15360:	83 ec 04             	sub    $0x4,%esp
   15363:	68 00 02 00 00       	push   $0x200
   15368:	50                   	push   %eax
   15369:	52                   	push   %edx
   1536a:	e8 0d fe ff ff       	call   1517c <tty_fifo_init>
   1536f:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->osem, TTY_OBUF_SIZE);
   15372:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15375:	05 14 02 00 00       	add    $0x214,%eax
   1537a:	83 ec 08             	sub    $0x8,%esp
   1537d:	68 00 02 00 00       	push   $0x200
   15382:	50                   	push   %eax
   15383:	e8 3b 2b 00 00       	call   17ec3 <sem_init>
   15388:	83 c4 10             	add    $0x10,%esp
	tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   1538b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1538e:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   15394:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15397:	05 24 04 00 00       	add    $0x424,%eax
   1539c:	83 ec 04             	sub    $0x4,%esp
   1539f:	68 00 02 00 00       	push   $0x200
   153a4:	52                   	push   %edx
   153a5:	50                   	push   %eax
   153a6:	e8 d1 fd ff ff       	call   1517c <tty_fifo_init>
   153ab:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->isem, 0);
   153ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153b1:	05 38 04 00 00       	add    $0x438,%eax
   153b6:	83 ec 08             	sub    $0x8,%esp
   153b9:	6a 00                	push   $0x0
   153bb:	50                   	push   %eax
   153bc:	e8 02 2b 00 00       	call   17ec3 <sem_init>
   153c1:	83 c4 10             	add    $0x10,%esp

	tty->iflags = TTY_INLCR | TTY_IECHO;
   153c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153c7:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   153ce:	00 00 00 
	tty->oflags = TTY_OCRLF;
   153d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153d4:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   153db:	00 00 00 

	tty->console_idx = idx;
   153de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153e1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   153e4:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

	kbd_init();
   153ea:	e8 8c fc ff ff       	call   1507b <kbd_init>
	console_init(idx);
   153ef:	83 ec 0c             	sub    $0xc,%esp
   153f2:	ff 75 f4             	push   -0xc(%ebp)
   153f5:	e8 3d e4 ff ff       	call   13837 <console_init>
   153fa:	83 c4 10             	add    $0x10,%esp
	return 0;
   153fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15402:	c9                   	leave  
   15403:	c3                   	ret    

00015404 <tty_write>:


/**
 * @brief 向tty写入数据
 */
int tty_write (device_t * dev, int addr, char * buf, int size) {
   15404:	55                   	push   %ebp
   15405:	89 e5                	mov    %esp,%ebp
   15407:	83 ec 28             	sub    $0x28,%esp
	if (size < 0) {
   1540a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1540e:	79 0a                	jns    1541a <tty_write+0x16>
		return -1;
   15410:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15415:	e9 d5 00 00 00       	jmp    154ef <tty_write+0xeb>
	}

	tty_t * tty = get_tty(dev);
   1541a:	83 ec 0c             	sub    $0xc,%esp
   1541d:	ff 75 08             	push   0x8(%ebp)
   15420:	e8 97 fe ff ff       	call   152bc <get_tty>
   15425:	83 c4 10             	add    $0x10,%esp
   15428:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int len = 0;
   1542b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	// 先将所有数据写入缓存中
	while (size) {
   15432:	e9 a5 00 00 00       	jmp    154dc <tty_write+0xd8>
		char c = *buf++;
   15437:	8b 45 10             	mov    0x10(%ebp),%eax
   1543a:	8d 50 01             	lea    0x1(%eax),%edx
   1543d:	89 55 10             	mov    %edx,0x10(%ebp)
   15440:	0f b6 00             	movzbl (%eax),%eax
   15443:	88 45 ef             	mov    %al,-0x11(%ebp)

		// 如果遇到\n，根据配置决定是否转换成\r\n
		if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   15446:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   1544a:	75 43                	jne    1548f <tty_write+0x8b>
   1544c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1544f:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   15455:	83 e0 01             	and    $0x1,%eax
   15458:	85 c0                	test   %eax,%eax
   1545a:	74 33                	je     1548f <tty_write+0x8b>
			sem_wait(&tty->osem);
   1545c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1545f:	05 14 02 00 00       	add    $0x214,%eax
   15464:	83 ec 0c             	sub    $0xc,%esp
   15467:	50                   	push   %eax
   15468:	e8 79 2a 00 00       	call   17ee6 <sem_wait>
   1546d:	83 c4 10             	add    $0x10,%esp
			int err = tty_fifo_put(&tty->ofifo, '\r');
   15470:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15473:	05 00 02 00 00       	add    $0x200,%eax
   15478:	83 ec 08             	sub    $0x8,%esp
   1547b:	6a 0d                	push   $0xd
   1547d:	50                   	push   %eax
   1547e:	e8 af fd ff ff       	call   15232 <tty_fifo_put>
   15483:	83 c4 10             	add    $0x10,%esp
   15486:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (err < 0) {
   15489:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1548d:	78 59                	js     154e8 <tty_write+0xe4>
				break;
			}
		}

		// 写入当前字符
		sem_wait(&tty->osem);
   1548f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15492:	05 14 02 00 00       	add    $0x214,%eax
   15497:	83 ec 0c             	sub    $0xc,%esp
   1549a:	50                   	push   %eax
   1549b:	e8 46 2a 00 00       	call   17ee6 <sem_wait>
   154a0:	83 c4 10             	add    $0x10,%esp
		int err = tty_fifo_put(&tty->ofifo, c);
   154a3:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   154a7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   154aa:	81 c2 00 02 00 00    	add    $0x200,%edx
   154b0:	83 ec 08             	sub    $0x8,%esp
   154b3:	50                   	push   %eax
   154b4:	52                   	push   %edx
   154b5:	e8 78 fd ff ff       	call   15232 <tty_fifo_put>
   154ba:	83 c4 10             	add    $0x10,%esp
   154bd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (err < 0) {
   154c0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   154c4:	78 25                	js     154eb <tty_write+0xe7>
			break;
		}

		len++;
   154c6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		size--;
   154ca:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

		// 启动输出, 这里是直接由console直接输出，无需中断
		console_write(tty);
   154ce:	83 ec 0c             	sub    $0xc,%esp
   154d1:	ff 75 f0             	push   -0x10(%ebp)
   154d4:	e8 6b e8 ff ff       	call   13d44 <console_write>
   154d9:	83 c4 10             	add    $0x10,%esp
	while (size) {
   154dc:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   154e0:	0f 85 51 ff ff ff    	jne    15437 <tty_write+0x33>
   154e6:	eb 04                	jmp    154ec <tty_write+0xe8>
				break;
   154e8:	90                   	nop
   154e9:	eb 01                	jmp    154ec <tty_write+0xe8>
			break;
   154eb:	90                   	nop
	}

	return len;
   154ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   154ef:	c9                   	leave  
   154f0:	c3                   	ret    

000154f1 <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read (device_t * dev, int addr, char * buf, int size) {
   154f1:	55                   	push   %ebp
   154f2:	89 e5                	mov    %esp,%ebp
   154f4:	83 ec 18             	sub    $0x18,%esp
	if (size < 0) {
   154f7:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   154fb:	79 0a                	jns    15507 <tty_read+0x16>
		return -1;
   154fd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15502:	e9 09 01 00 00       	jmp    15610 <tty_read+0x11f>
	}

	tty_t * tty = get_tty(dev);
   15507:	83 ec 0c             	sub    $0xc,%esp
   1550a:	ff 75 08             	push   0x8(%ebp)
   1550d:	e8 aa fd ff ff       	call   152bc <get_tty>
   15512:	83 c4 10             	add    $0x10,%esp
   15515:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char * pbuf = buf;
   15518:	8b 45 10             	mov    0x10(%ebp),%eax
   1551b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len = 0;
   1551e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	// 不断读取，直到遇到文件结束符或者行结束符
	while (len < size) {
   15525:	e9 d7 00 00 00       	jmp    15601 <tty_read+0x110>
		// 等待可用的数据
		sem_wait(&tty->isem);
   1552a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1552d:	05 38 04 00 00       	add    $0x438,%eax
   15532:	83 ec 0c             	sub    $0xc,%esp
   15535:	50                   	push   %eax
   15536:	e8 ab 29 00 00       	call   17ee6 <sem_wait>
   1553b:	83 c4 10             	add    $0x10,%esp

		// 取出数据
		char ch;
		tty_fifo_get(&tty->ififo, &ch);
   1553e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15541:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   15547:	83 ec 08             	sub    $0x8,%esp
   1554a:	8d 45 eb             	lea    -0x15(%ebp),%eax
   1554d:	50                   	push   %eax
   1554e:	52                   	push   %edx
   1554f:	e8 5f fc ff ff       	call   151b3 <tty_fifo_get>
   15554:	83 c4 10             	add    $0x10,%esp
		switch (ch) {
   15557:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1555b:	0f be c0             	movsbl %al,%eax
   1555e:	83 f8 0a             	cmp    $0xa,%eax
   15561:	74 1a                	je     1557d <tty_read+0x8c>
   15563:	83 f8 7f             	cmp    $0x7f,%eax
   15566:	75 52                	jne    155ba <tty_read+0xc9>
			case ASCII_DEL:
				if (len == 0) {
   15568:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1556c:	75 05                	jne    15573 <tty_read+0x82>
   1556e:	e9 8e 00 00 00       	jmp    15601 <tty_read+0x110>
					continue;
				}
				len--;
   15573:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
				pbuf--;
   15577:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
				break;
   1557b:	eb 51                	jmp    155ce <tty_read+0xdd>
			case '\n':
				if ((tty->iflags & TTY_INLCR) && (len < size - 1)) {	// \n变成\r\n
   1557d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15580:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15586:	83 e0 01             	and    $0x1,%eax
   15589:	85 c0                	test   %eax,%eax
   1558b:	74 1b                	je     155a8 <tty_read+0xb7>
   1558d:	8b 45 14             	mov    0x14(%ebp),%eax
   15590:	83 e8 01             	sub    $0x1,%eax
   15593:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15596:	7d 10                	jge    155a8 <tty_read+0xb7>
					*pbuf++ = '\r';
   15598:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1559b:	8d 50 01             	lea    0x1(%eax),%edx
   1559e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155a1:	c6 00 0d             	movb   $0xd,(%eax)
					len++;
   155a4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				}
				*pbuf++ = '\n';
   155a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155ab:	8d 50 01             	lea    0x1(%eax),%edx
   155ae:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155b1:	c6 00 0a             	movb   $0xa,(%eax)
				len++;
   155b4:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   155b8:	eb 14                	jmp    155ce <tty_read+0xdd>
			default:
				*pbuf++ = ch;
   155ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155bd:	8d 50 01             	lea    0x1(%eax),%edx
   155c0:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155c3:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   155c7:	88 10                	mov    %dl,(%eax)
				len++;
   155c9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   155cd:	90                   	nop
		}

		if (tty->iflags & TTY_IECHO) {
   155ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
   155d1:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   155d7:	83 e0 04             	and    $0x4,%eax
   155da:	85 c0                	test   %eax,%eax
   155dc:	74 13                	je     155f1 <tty_read+0x100>
		    tty_write(dev, 0, &ch, 1);
   155de:	6a 01                	push   $0x1
   155e0:	8d 45 eb             	lea    -0x15(%ebp),%eax
   155e3:	50                   	push   %eax
   155e4:	6a 00                	push   $0x0
   155e6:	ff 75 08             	push   0x8(%ebp)
   155e9:	e8 16 fe ff ff       	call   15404 <tty_write>
   155ee:	83 c4 10             	add    $0x10,%esp
		}

		// 遇到一行结束，也直接跳出
		if ((ch == '\r') || (ch == '\n')) {
   155f1:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155f5:	3c 0d                	cmp    $0xd,%al
   155f7:	74 14                	je     1560d <tty_read+0x11c>
   155f9:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155fd:	3c 0a                	cmp    $0xa,%al
   155ff:	74 0c                	je     1560d <tty_read+0x11c>
	while (len < size) {
   15601:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15604:	3b 45 14             	cmp    0x14(%ebp),%eax
   15607:	0f 8c 1d ff ff ff    	jl     1552a <tty_read+0x39>
			break;
		}
	}

	return len;
   1560d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   15610:	c9                   	leave  
   15611:	c3                   	ret    

00015612 <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control (device_t * dev, int cmd, int arg0, int arg1) {
   15612:	55                   	push   %ebp
   15613:	89 e5                	mov    %esp,%ebp
   15615:	53                   	push   %ebx
   15616:	83 ec 14             	sub    $0x14,%esp
	tty_t * tty = get_tty(dev);
   15619:	83 ec 0c             	sub    $0xc,%esp
   1561c:	ff 75 08             	push   0x8(%ebp)
   1561f:	e8 98 fc ff ff       	call   152bc <get_tty>
   15624:	83 c4 10             	add    $0x10,%esp
   15627:	89 45 f4             	mov    %eax,-0xc(%ebp)

	switch (cmd) {
   1562a:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
   1562e:	74 0b                	je     1563b <tty_control+0x29>
   15630:	83 7d 0c 02          	cmpl   $0x2,0xc(%ebp)
   15634:	74 6b                	je     156a1 <tty_control+0x8f>
		if (arg0) {
			*(int *)arg0 = sem_count(&tty->isem);
		}
		break;
	default:
		break;
   15636:	e9 86 00 00 00       	jmp    156c1 <tty_control+0xaf>
		if (arg0) {
   1563b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1563f:	74 30                	je     15671 <tty_control+0x5f>
			tty->iflags |= TTY_IECHO;
   15641:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15644:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   1564a:	83 c8 04             	or     $0x4,%eax
   1564d:	89 c2                	mov    %eax,%edx
   1564f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15652:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
			console_set_cursor(tty->console_idx, 1);
   15658:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1565b:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   15661:	83 ec 08             	sub    $0x8,%esp
   15664:	6a 01                	push   $0x1
   15666:	50                   	push   %eax
   15667:	e8 32 dc ff ff       	call   1329e <console_set_cursor>
   1566c:	83 c4 10             	add    $0x10,%esp
		break;
   1566f:	eb 50                	jmp    156c1 <tty_control+0xaf>
			tty->iflags &= ~TTY_IECHO;
   15671:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15674:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   1567a:	83 e0 fb             	and    $0xfffffffb,%eax
   1567d:	89 c2                	mov    %eax,%edx
   1567f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15682:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
			console_set_cursor(tty->console_idx, 0);
   15688:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1568b:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   15691:	83 ec 08             	sub    $0x8,%esp
   15694:	6a 00                	push   $0x0
   15696:	50                   	push   %eax
   15697:	e8 02 dc ff ff       	call   1329e <console_set_cursor>
   1569c:	83 c4 10             	add    $0x10,%esp
		break;
   1569f:	eb 20                	jmp    156c1 <tty_control+0xaf>
		if (arg0) {
   156a1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   156a5:	74 19                	je     156c0 <tty_control+0xae>
			*(int *)arg0 = sem_count(&tty->isem);
   156a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156aa:	05 38 04 00 00       	add    $0x438,%eax
   156af:	8b 5d 10             	mov    0x10(%ebp),%ebx
   156b2:	83 ec 0c             	sub    $0xc,%esp
   156b5:	50                   	push   %eax
   156b6:	e8 1d 29 00 00       	call   17fd8 <sem_count>
   156bb:	83 c4 10             	add    $0x10,%esp
   156be:	89 03                	mov    %eax,(%ebx)
		break;
   156c0:	90                   	nop
	}
	return 0;
   156c1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   156c6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   156c9:	c9                   	leave  
   156ca:	c3                   	ret    

000156cb <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close (device_t * dev) {
   156cb:	55                   	push   %ebp
   156cc:	89 e5                	mov    %esp,%ebp

}
   156ce:	90                   	nop
   156cf:	5d                   	pop    %ebp
   156d0:	c3                   	ret    

000156d1 <tty_in>:

/**
 * @brief 输入tty字符
 */
void tty_in (char ch) {
   156d1:	55                   	push   %ebp
   156d2:	89 e5                	mov    %esp,%ebp
   156d4:	83 ec 28             	sub    $0x28,%esp
   156d7:	8b 45 08             	mov    0x8(%ebp),%eax
   156da:	88 45 e4             	mov    %al,-0x1c(%ebp)
	tty_t * tty = tty_devs + curr_tty;
   156dd:	a1 80 88 03 00       	mov    0x38880,%eax
   156e2:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   156e8:	05 e0 65 03 00       	add    $0x365e0,%eax
   156ed:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 辅助队列要有空闲空间可代写入
	if (sem_count(&tty->isem) >= TTY_IBUF_SIZE) {
   156f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156f3:	05 38 04 00 00       	add    $0x438,%eax
   156f8:	83 ec 0c             	sub    $0xc,%esp
   156fb:	50                   	push   %eax
   156fc:	e8 d7 28 00 00       	call   17fd8 <sem_count>
   15701:	83 c4 10             	add    $0x10,%esp
   15704:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15709:	7f 30                	jg     1573b <tty_in+0x6a>
		return;
	}

	// 写入辅助队列，通知数据到达
	tty_fifo_put(&tty->ififo, ch);
   1570b:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   1570f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15712:	81 c2 24 04 00 00    	add    $0x424,%edx
   15718:	83 ec 08             	sub    $0x8,%esp
   1571b:	50                   	push   %eax
   1571c:	52                   	push   %edx
   1571d:	e8 10 fb ff ff       	call   15232 <tty_fifo_put>
   15722:	83 c4 10             	add    $0x10,%esp
	sem_notify(&tty->isem);
   15725:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15728:	05 38 04 00 00       	add    $0x438,%eax
   1572d:	83 ec 0c             	sub    $0xc,%esp
   15730:	50                   	push   %eax
   15731:	e8 1e 28 00 00       	call   17f54 <sem_notify>
   15736:	83 c4 10             	add    $0x10,%esp
   15739:	eb 01                	jmp    1573c <tty_in+0x6b>
		return;
   1573b:	90                   	nop
}
   1573c:	c9                   	leave  
   1573d:	c3                   	ret    

0001573e <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select (int tty) {
   1573e:	55                   	push   %ebp
   1573f:	89 e5                	mov    %esp,%ebp
   15741:	83 ec 08             	sub    $0x8,%esp
	if (tty != curr_tty) {
   15744:	a1 80 88 03 00       	mov    0x38880,%eax
   15749:	39 45 08             	cmp    %eax,0x8(%ebp)
   1574c:	74 16                	je     15764 <tty_select+0x26>
		console_select(tty);
   1574e:	83 ec 0c             	sub    $0xc,%esp
   15751:	ff 75 08             	push   0x8(%ebp)
   15754:	e8 15 dc ff ff       	call   1336e <console_select>
   15759:	83 c4 10             	add    $0x10,%esp
		curr_tty = tty;
   1575c:	8b 45 08             	mov    0x8(%ebp),%eax
   1575f:	a3 80 88 03 00       	mov    %eax,0x38880
	}
}
   15764:	90                   	nop
   15765:	c9                   	leave  
   15766:	c3                   	ret    

00015767 <devfs_mount>:
};
/**
 * @brief 挂载指定设备
 * 设备文件系统，不需要考虑major和minor
 */
int devfs_mount (struct _fs_t * fs, int major, int minor) {
   15767:	55                   	push   %ebp
   15768:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   1576a:	8b 45 08             	mov    0x8(%ebp),%eax
   1576d:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   15774:	00 00 00 
    return 0;
   15777:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1577c:	5d                   	pop    %ebp
   1577d:	c3                   	ret    

0001577e <devfs_unmount>:

/**
 * @brief 卸载指定的设备
 * @param fs 
 */
void devfs_unmount (struct _fs_t * fs) {
   1577e:	55                   	push   %ebp
   1577f:	89 e5                	mov    %esp,%ebp
}
   15781:	90                   	nop
   15782:	5d                   	pop    %ebp
   15783:	c3                   	ret    

00015784 <devfs_open>:

/**
 * @brief 打开指定的设备以进行读写
 */
int devfs_open (struct _fs_t * fs, const char * path, file_t * file) {   
   15784:	55                   	push   %ebp
   15785:	89 e5                	mov    %esp,%ebp
   15787:	83 ec 28             	sub    $0x28,%esp
    // 遍历所有支持的设备类型列表，根据path中的路径，找到相应的设备类型
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   1578a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15791:	e9 00 01 00 00       	jmp    15896 <devfs_open+0x112>
        devfs_type_t * type = devfs_type_list + i;
   15796:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15799:	89 d0                	mov    %edx,%eax
   1579b:	01 c0                	add    %eax,%eax
   1579d:	01 d0                	add    %edx,%eax
   1579f:	c1 e0 02             	shl    $0x2,%eax
   157a2:	05 e0 a0 01 00       	add    $0x1a0e0,%eax
   157a7:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 查找相同的名称，然后从中提取后续部分，转换成字符串
        int type_name_len = kernel_strlen(type->name);
   157aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157ad:	8b 00                	mov    (%eax),%eax
   157af:	83 ec 0c             	sub    $0xc,%esp
   157b2:	50                   	push   %eax
   157b3:	e8 a5 2b 00 00       	call   1835d <kernel_strlen>
   157b8:	83 c4 10             	add    $0x10,%esp
   157bb:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 如果存在挂载点路径，则跳过该路径，取下级子目录
        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   157be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157c1:	8b 00                	mov    (%eax),%eax
   157c3:	83 ec 04             	sub    $0x4,%esp
   157c6:	ff 75 ec             	push   -0x14(%ebp)
   157c9:	50                   	push   %eax
   157ca:	ff 75 0c             	push   0xc(%ebp)
   157cd:	e8 c6 2b 00 00       	call   18398 <kernel_strncmp>
   157d2:	83 c4 10             	add    $0x10,%esp
   157d5:	85 c0                	test   %eax,%eax
   157d7:	0f 85 b5 00 00 00    	jne    15892 <devfs_open+0x10e>
            int minor;

            // 转换得到设备子序号
            if ((kernel_strlen(path) > type_name_len) && (path_to_num(path + type_name_len, &minor)) < 0) {
   157dd:	83 ec 0c             	sub    $0xc,%esp
   157e0:	ff 75 0c             	push   0xc(%ebp)
   157e3:	e8 75 2b 00 00       	call   1835d <kernel_strlen>
   157e8:	83 c4 10             	add    $0x10,%esp
   157eb:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   157ee:	7d 31                	jge    15821 <devfs_open+0x9d>
   157f0:	8b 55 ec             	mov    -0x14(%ebp),%edx
   157f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   157f6:	01 c2                	add    %eax,%edx
   157f8:	83 ec 08             	sub    $0x8,%esp
   157fb:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   157fe:	50                   	push   %eax
   157ff:	52                   	push   %edx
   15800:	e8 e9 1a 00 00       	call   172ee <path_to_num>
   15805:	83 c4 10             	add    $0x10,%esp
   15808:	85 c0                	test   %eax,%eax
   1580a:	79 15                	jns    15821 <devfs_open+0x9d>
                log_printf("Get device num failed. %s", path);
   1580c:	83 ec 08             	sub    $0x8,%esp
   1580f:	ff 75 0c             	push   0xc(%ebp)
   15812:	68 c0 9a 01 00       	push   $0x19ac0
   15817:	e8 f3 31 00 00       	call   18a0f <log_printf>
   1581c:	83 c4 10             	add    $0x10,%esp
                break;
   1581f:	eb 7f                	jmp    158a0 <devfs_open+0x11c>
            }

            // 打开设备
            int dev_id = dev_open(type->dev_type, minor, (void *)0);
   15821:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   15824:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15827:	8b 40 04             	mov    0x4(%eax),%eax
   1582a:	83 ec 04             	sub    $0x4,%esp
   1582d:	6a 00                	push   $0x0
   1582f:	52                   	push   %edx
   15830:	50                   	push   %eax
   15831:	e8 4d e6 ff ff       	call   13e83 <dev_open>
   15836:	83 c4 10             	add    $0x10,%esp
   15839:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   1583c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15840:	79 15                	jns    15857 <devfs_open+0xd3>
                log_printf("Open device failed:%s", path);
   15842:	83 ec 08             	sub    $0x8,%esp
   15845:	ff 75 0c             	push   0xc(%ebp)
   15848:	68 da 9a 01 00       	push   $0x19ada
   1584d:	e8 bd 31 00 00       	call   18a0f <log_printf>
   15852:	83 c4 10             	add    $0x10,%esp
                break;
   15855:	eb 49                	jmp    158a0 <devfs_open+0x11c>
            }

            // 纪录所在的设备号
            file->dev_id = dev_id;
   15857:	8b 45 10             	mov    0x10(%ebp),%eax
   1585a:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1585d:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->fs = fs;
   15860:	8b 45 10             	mov    0x10(%ebp),%eax
   15863:	8b 55 08             	mov    0x8(%ebp),%edx
   15866:	89 50 44             	mov    %edx,0x44(%eax)
            file->pos = 0;
   15869:	8b 45 10             	mov    0x10(%ebp),%eax
   1586c:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   15873:	8b 45 10             	mov    0x10(%ebp),%eax
   15876:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   1587d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15880:	8b 40 08             	mov    0x8(%eax),%eax
   15883:	89 c2                	mov    %eax,%edx
   15885:	8b 45 10             	mov    0x10(%ebp),%eax
   15888:	89 50 20             	mov    %edx,0x20(%eax)
            return 0;
   1588b:	b8 00 00 00 00       	mov    $0x0,%eax
   15890:	eb 13                	jmp    158a5 <devfs_open+0x121>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15892:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15896:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1589a:	0f 84 f6 fe ff ff    	je     15796 <devfs_open+0x12>
        }
    }

    return -1;
   158a0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   158a5:	c9                   	leave  
   158a6:	c3                   	ret    

000158a7 <devfs_read>:

/**
 * @brief 读写指定的文件系统
 */
int devfs_read (char * buf, int size, file_t * file) {
   158a7:	55                   	push   %ebp
   158a8:	89 e5                	mov    %esp,%ebp
   158aa:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   158ad:	8b 45 10             	mov    0x10(%ebp),%eax
   158b0:	8b 50 30             	mov    0x30(%eax),%edx
   158b3:	8b 45 10             	mov    0x10(%ebp),%eax
   158b6:	8b 40 2c             	mov    0x2c(%eax),%eax
   158b9:	ff 75 0c             	push   0xc(%ebp)
   158bc:	ff 75 08             	push   0x8(%ebp)
   158bf:	52                   	push   %edx
   158c0:	50                   	push   %eax
   158c1:	e8 07 e7 ff ff       	call   13fcd <dev_read>
   158c6:	83 c4 10             	add    $0x10,%esp
}
   158c9:	c9                   	leave  
   158ca:	c3                   	ret    

000158cb <devfs_write>:

/**
 * @brief 写设备文件系统
 */
int devfs_write (char * buf, int size, file_t * file) {
   158cb:	55                   	push   %ebp
   158cc:	89 e5                	mov    %esp,%ebp
   158ce:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   158d1:	8b 45 10             	mov    0x10(%ebp),%eax
   158d4:	8b 50 30             	mov    0x30(%eax),%edx
   158d7:	8b 45 10             	mov    0x10(%ebp),%eax
   158da:	8b 40 2c             	mov    0x2c(%eax),%eax
   158dd:	ff 75 0c             	push   0xc(%ebp)
   158e0:	ff 75 08             	push   0x8(%ebp)
   158e3:	52                   	push   %edx
   158e4:	50                   	push   %eax
   158e5:	e8 2f e7 ff ff       	call   14019 <dev_write>
   158ea:	83 c4 10             	add    $0x10,%esp
}
   158ed:	c9                   	leave  
   158ee:	c3                   	ret    

000158ef <devfs_close>:

/**
 * @brief 关闭设备文件
 */
void devfs_close (file_t * file) {
   158ef:	55                   	push   %ebp
   158f0:	89 e5                	mov    %esp,%ebp
   158f2:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   158f5:	8b 45 08             	mov    0x8(%ebp),%eax
   158f8:	8b 40 2c             	mov    0x2c(%eax),%eax
   158fb:	83 ec 0c             	sub    $0xc,%esp
   158fe:	50                   	push   %eax
   158ff:	e8 ad e7 ff ff       	call   140b1 <dev_close>
   15904:	83 c4 10             	add    $0x10,%esp
}
   15907:	90                   	nop
   15908:	c9                   	leave  
   15909:	c3                   	ret    

0001590a <devfs_seek>:

/**
 * @brief 文件读写定位
 */
int devfs_seek (file_t * file, uint32_t offset, int dir) {
   1590a:	55                   	push   %ebp
   1590b:	89 e5                	mov    %esp,%ebp
    return -1;  // 不支持定位
   1590d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15912:	5d                   	pop    %ebp
   15913:	c3                   	ret    

00015914 <devfs_stat>:

/**
 * @brief 获取文件信息
 */
int devfs_stat(file_t * file, struct stat *st) {
   15914:	55                   	push   %ebp
   15915:	89 e5                	mov    %esp,%ebp
    return -1;
   15917:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1591c:	5d                   	pop    %ebp
   1591d:	c3                   	ret    

0001591e <devfs_ioctl>:

/**
 * @brief IO设备控制
 */
int devfs_ioctl(file_t * file, int cmd, int arg0, int arg1) {
   1591e:	55                   	push   %ebp
   1591f:	89 e5                	mov    %esp,%ebp
   15921:	83 ec 08             	sub    $0x8,%esp
    return dev_control(file->dev_id, cmd, arg0, arg1);
   15924:	8b 45 08             	mov    0x8(%ebp),%eax
   15927:	8b 40 2c             	mov    0x2c(%eax),%eax
   1592a:	ff 75 14             	push   0x14(%ebp)
   1592d:	ff 75 10             	push   0x10(%ebp)
   15930:	ff 75 0c             	push   0xc(%ebp)
   15933:	50                   	push   %eax
   15934:	e8 2c e7 ff ff       	call   14065 <dev_control>
   15939:	83 c4 10             	add    $0x10,%esp
}
   1593c:	c9                   	leave  
   1593d:	c3                   	ret    

0001593e <up2>:
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   1593e:	55                   	push   %ebp
   1593f:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   15941:	8b 55 08             	mov    0x8(%ebp),%edx
   15944:	8b 45 0c             	mov    0xc(%ebp),%eax
   15947:	01 d0                	add    %edx,%eax
   15949:	8d 50 ff             	lea    -0x1(%eax),%edx
   1594c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1594f:	f7 d8                	neg    %eax
   15951:	21 d0                	and    %edx,%eax
}
   15953:	5d                   	pop    %ebp
   15954:	c3                   	ret    

00015955 <bread_sector>:
#include <sys/fcntl.h>

/**
 * @brief 缓存读取磁盘数据，用于目录的遍历等
 */
static int bread_sector (fat_t * fat, int sector) {
   15955:	55                   	push   %ebp
   15956:	89 e5                	mov    %esp,%ebp
   15958:	83 ec 18             	sub    $0x18,%esp
    if (sector == fat->curr_sector) {
   1595b:	8b 45 08             	mov    0x8(%ebp),%eax
   1595e:	8b 40 28             	mov    0x28(%eax),%eax
   15961:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15964:	75 07                	jne    1596d <bread_sector+0x18>
        return 0;
   15966:	b8 00 00 00 00       	mov    $0x0,%eax
   1596b:	eb 3f                	jmp    159ac <bread_sector+0x57>
    }

    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   1596d:	8b 45 08             	mov    0x8(%ebp),%eax
   15970:	8b 50 24             	mov    0x24(%eax),%edx
   15973:	8b 45 08             	mov    0x8(%ebp),%eax
   15976:	8b 40 2c             	mov    0x2c(%eax),%eax
   15979:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1597f:	6a 01                	push   $0x1
   15981:	52                   	push   %edx
   15982:	ff 75 0c             	push   0xc(%ebp)
   15985:	50                   	push   %eax
   15986:	e8 42 e6 ff ff       	call   13fcd <dev_read>
   1598b:	83 c4 10             	add    $0x10,%esp
   1598e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   15991:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15995:	75 10                	jne    159a7 <bread_sector+0x52>
        fat->curr_sector = sector;
   15997:	8b 45 08             	mov    0x8(%ebp),%eax
   1599a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1599d:	89 50 28             	mov    %edx,0x28(%eax)
        return 0;
   159a0:	b8 00 00 00 00       	mov    $0x0,%eax
   159a5:	eb 05                	jmp    159ac <bread_sector+0x57>
    }
    return -1;
   159a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159ac:	c9                   	leave  
   159ad:	c3                   	ret    

000159ae <bwrite_secotr>:

/**
 * @brief 写缓存
 */
static int bwrite_secotr (fat_t * fat, int sector) {
   159ae:	55                   	push   %ebp
   159af:	89 e5                	mov    %esp,%ebp
   159b1:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   159b4:	8b 45 08             	mov    0x8(%ebp),%eax
   159b7:	8b 50 24             	mov    0x24(%eax),%edx
   159ba:	8b 45 08             	mov    0x8(%ebp),%eax
   159bd:	8b 40 2c             	mov    0x2c(%eax),%eax
   159c0:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   159c6:	6a 01                	push   $0x1
   159c8:	52                   	push   %edx
   159c9:	ff 75 0c             	push   0xc(%ebp)
   159cc:	50                   	push   %eax
   159cd:	e8 47 e6 ff ff       	call   14019 <dev_write>
   159d2:	83 c4 10             	add    $0x10,%esp
   159d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return (cnt == 1) ? 0 : -1;
   159d8:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   159dc:	75 07                	jne    159e5 <bwrite_secotr+0x37>
   159de:	b8 00 00 00 00       	mov    $0x0,%eax
   159e3:	eb 05                	jmp    159ea <bwrite_secotr+0x3c>
   159e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159ea:	c9                   	leave  
   159eb:	c3                   	ret    

000159ec <cluster_is_valid>:

/**
 * 检查指定簇是否可用，非占用或坏簇
 */
int cluster_is_valid (cluster_t cluster) {
   159ec:	55                   	push   %ebp
   159ed:	89 e5                	mov    %esp,%ebp
   159ef:	83 ec 04             	sub    $0x4,%esp
   159f2:	8b 45 08             	mov    0x8(%ebp),%eax
   159f5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < 0xFFF8) && (cluster >= 0x2);     // 值是否正确
   159f9:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   159fe:	77 0e                	ja     15a0e <cluster_is_valid+0x22>
   15a00:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15a05:	76 07                	jbe    15a0e <cluster_is_valid+0x22>
   15a07:	b8 01 00 00 00       	mov    $0x1,%eax
   15a0c:	eb 05                	jmp    15a13 <cluster_is_valid+0x27>
   15a0e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15a13:	c9                   	leave  
   15a14:	c3                   	ret    

00015a15 <cluster_get_next>:

/**
 * 获取指定簇的下一个簇
 */
int cluster_get_next (fat_t * fat, cluster_t curr) {
   15a15:	55                   	push   %ebp
   15a16:	89 e5                	mov    %esp,%ebp
   15a18:	83 ec 28             	sub    $0x28,%esp
   15a1b:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a1e:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    if (!cluster_is_valid(curr)) {
   15a22:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a26:	50                   	push   %eax
   15a27:	e8 c0 ff ff ff       	call   159ec <cluster_is_valid>
   15a2c:	83 c4 04             	add    $0x4,%esp
   15a2f:	85 c0                	test   %eax,%eax
   15a31:	75 0a                	jne    15a3d <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15a33:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a38:	e9 94 00 00 00       	jmp    15ad1 <cluster_get_next+0xbc>
    }

    // 取fat表中的扇区号和在扇区中的偏移
    int offset = curr * sizeof(cluster_t);
   15a3d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a41:	01 c0                	add    %eax,%eax
   15a43:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15a46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a49:	8b 55 08             	mov    0x8(%ebp),%edx
   15a4c:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a4f:	ba 00 00 00 00       	mov    $0x0,%edx
   15a54:	f7 f1                	div    %ecx
   15a56:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15a59:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a5c:	8b 55 08             	mov    0x8(%ebp),%edx
   15a5f:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a62:	ba 00 00 00 00       	mov    $0x0,%edx
   15a67:	f7 f1                	div    %ecx
   15a69:	89 d0                	mov    %edx,%eax
   15a6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (sector >= fat->tbl_sectors) {
   15a6e:	8b 45 08             	mov    0x8(%ebp),%eax
   15a71:	8b 50 08             	mov    0x8(%eax),%edx
   15a74:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a77:	39 c2                	cmp    %eax,%edx
   15a79:	77 1c                	ja     15a97 <cluster_get_next+0x82>
        log_printf("cluster too big. %d", curr);
   15a7b:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a7f:	83 ec 08             	sub    $0x8,%esp
   15a82:	50                   	push   %eax
   15a83:	68 f0 9a 01 00       	push   $0x19af0
   15a88:	e8 82 2f 00 00       	call   18a0f <log_printf>
   15a8d:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15a90:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a95:	eb 3a                	jmp    15ad1 <cluster_get_next+0xbc>
    }

    // 读扇区，然后取其中簇数据
    int err = bread_sector(fat, fat->tbl_start + sector);
   15a97:	8b 45 08             	mov    0x8(%ebp),%eax
   15a9a:	8b 10                	mov    (%eax),%edx
   15a9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a9f:	01 d0                	add    %edx,%eax
   15aa1:	83 ec 08             	sub    $0x8,%esp
   15aa4:	50                   	push   %eax
   15aa5:	ff 75 08             	push   0x8(%ebp)
   15aa8:	e8 a8 fe ff ff       	call   15955 <bread_sector>
   15aad:	83 c4 10             	add    $0x10,%esp
   15ab0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15ab3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15ab7:	79 07                	jns    15ac0 <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15ab9:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15abe:	eb 11                	jmp    15ad1 <cluster_get_next+0xbc>
    }

    return *(cluster_t*)(fat->fat_buffer + off_sector);
   15ac0:	8b 45 08             	mov    0x8(%ebp),%eax
   15ac3:	8b 50 24             	mov    0x24(%eax),%edx
   15ac6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15ac9:	01 d0                	add    %edx,%eax
   15acb:	0f b7 00             	movzwl (%eax),%eax
   15ace:	0f b7 c0             	movzwl %ax,%eax
}
   15ad1:	c9                   	leave  
   15ad2:	c3                   	ret    

00015ad3 <cluster_set_next>:

/**
 * @brief 设置簇的下一簇
 */
int cluster_set_next (fat_t * fat, cluster_t curr, cluster_t next) {
   15ad3:	55                   	push   %ebp
   15ad4:	89 e5                	mov    %esp,%ebp
   15ad6:	83 ec 38             	sub    $0x38,%esp
   15ad9:	8b 55 0c             	mov    0xc(%ebp),%edx
   15adc:	8b 45 10             	mov    0x10(%ebp),%eax
   15adf:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   15ae3:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    if (!cluster_is_valid(curr)) {
   15ae7:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15aeb:	50                   	push   %eax
   15aec:	e8 fb fe ff ff       	call   159ec <cluster_is_valid>
   15af1:	83 c4 04             	add    $0x4,%esp
   15af4:	85 c0                	test   %eax,%eax
   15af6:	75 0a                	jne    15b02 <cluster_set_next+0x2f>
        return -1;
   15af8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15afd:	e9 fe 00 00 00       	jmp    15c00 <cluster_set_next+0x12d>
    }

    int offset = curr * sizeof(cluster_t);
   15b02:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b06:	01 c0                	add    %eax,%eax
   15b08:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15b0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b0e:	8b 55 08             	mov    0x8(%ebp),%edx
   15b11:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b14:	ba 00 00 00 00       	mov    $0x0,%edx
   15b19:	f7 f1                	div    %ecx
   15b1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15b1e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b21:	8b 55 08             	mov    0x8(%ebp),%edx
   15b24:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b27:	ba 00 00 00 00       	mov    $0x0,%edx
   15b2c:	f7 f1                	div    %ecx
   15b2e:	89 d0                	mov    %edx,%eax
   15b30:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sector >= fat->tbl_sectors) {
   15b33:	8b 45 08             	mov    0x8(%ebp),%eax
   15b36:	8b 50 08             	mov    0x8(%eax),%edx
   15b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b3c:	39 c2                	cmp    %eax,%edx
   15b3e:	77 1f                	ja     15b5f <cluster_set_next+0x8c>
        log_printf("cluster too big. %d", curr);
   15b40:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b44:	83 ec 08             	sub    $0x8,%esp
   15b47:	50                   	push   %eax
   15b48:	68 f0 9a 01 00       	push   $0x19af0
   15b4d:	e8 bd 2e 00 00       	call   18a0f <log_printf>
   15b52:	83 c4 10             	add    $0x10,%esp
        return -1;
   15b55:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b5a:	e9 a1 00 00 00       	jmp    15c00 <cluster_set_next+0x12d>
    }

    // 读缓存
    int err = bread_sector(fat, fat->tbl_start + sector);
   15b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   15b62:	8b 10                	mov    (%eax),%edx
   15b64:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b67:	01 d0                	add    %edx,%eax
   15b69:	83 ec 08             	sub    $0x8,%esp
   15b6c:	50                   	push   %eax
   15b6d:	ff 75 08             	push   0x8(%ebp)
   15b70:	e8 e0 fd ff ff       	call   15955 <bread_sector>
   15b75:	83 c4 10             	add    $0x10,%esp
   15b78:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   15b7b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15b7f:	79 07                	jns    15b88 <cluster_set_next+0xb5>
        return -1;
   15b81:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b86:	eb 78                	jmp    15c00 <cluster_set_next+0x12d>
    }

    // 改next
    *(cluster_t*)(fat->fat_buffer + off_sector) = next;
   15b88:	8b 45 08             	mov    0x8(%ebp),%eax
   15b8b:	8b 50 24             	mov    0x24(%eax),%edx
   15b8e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15b91:	01 c2                	add    %eax,%edx
   15b93:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15b97:	66 89 02             	mov    %ax,(%edx)

    // 回写到多个表中
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15b9a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15ba1:	eb 4b                	jmp    15bee <cluster_set_next+0x11b>
        err = bwrite_secotr(fat, fat->tbl_start + sector);
   15ba3:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba6:	8b 10                	mov    (%eax),%edx
   15ba8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15bab:	01 d0                	add    %edx,%eax
   15bad:	83 ec 08             	sub    $0x8,%esp
   15bb0:	50                   	push   %eax
   15bb1:	ff 75 08             	push   0x8(%ebp)
   15bb4:	e8 f5 fd ff ff       	call   159ae <bwrite_secotr>
   15bb9:	83 c4 10             	add    $0x10,%esp
   15bbc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15bbf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15bc3:	79 17                	jns    15bdc <cluster_set_next+0x109>
            log_printf("write cluster failed.");
   15bc5:	83 ec 0c             	sub    $0xc,%esp
   15bc8:	68 04 9b 01 00       	push   $0x19b04
   15bcd:	e8 3d 2e 00 00       	call   18a0f <log_printf>
   15bd2:	83 c4 10             	add    $0x10,%esp
            return -1;
   15bd5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15bda:	eb 24                	jmp    15c00 <cluster_set_next+0x12d>
        }
        sector += fat->tbl_sectors;
   15bdc:	8b 45 08             	mov    0x8(%ebp),%eax
   15bdf:	8b 50 08             	mov    0x8(%eax),%edx
   15be2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15be5:	01 d0                	add    %edx,%eax
   15be7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15bea:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15bee:	8b 45 08             	mov    0x8(%ebp),%eax
   15bf1:	8b 50 04             	mov    0x4(%eax),%edx
   15bf4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15bf7:	39 c2                	cmp    %eax,%edx
   15bf9:	77 a8                	ja     15ba3 <cluster_set_next+0xd0>
    }
    return 0;
   15bfb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15c00:	c9                   	leave  
   15c01:	c3                   	ret    

00015c02 <cluster_free_chain>:

/**
 * @brief 释放cluster链
 */
void cluster_free_chain(fat_t * fat, cluster_t start) {
   15c02:	55                   	push   %ebp
   15c03:	89 e5                	mov    %esp,%ebp
   15c05:	83 ec 28             	sub    $0x28,%esp
   15c08:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c0b:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15c0f:	eb 34                	jmp    15c45 <cluster_free_chain+0x43>
        cluster_t next = cluster_get_next(fat, start);
   15c11:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c15:	83 ec 08             	sub    $0x8,%esp
   15c18:	50                   	push   %eax
   15c19:	ff 75 08             	push   0x8(%ebp)
   15c1c:	e8 f4 fd ff ff       	call   15a15 <cluster_get_next>
   15c21:	83 c4 10             	add    $0x10,%esp
   15c24:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, FAT_CLUSTER_FREE);
   15c28:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c2c:	83 ec 04             	sub    $0x4,%esp
   15c2f:	6a 00                	push   $0x0
   15c31:	50                   	push   %eax
   15c32:	ff 75 08             	push   0x8(%ebp)
   15c35:	e8 99 fe ff ff       	call   15ad3 <cluster_set_next>
   15c3a:	83 c4 10             	add    $0x10,%esp
        start = next;
   15c3d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15c41:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15c45:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c49:	83 ec 0c             	sub    $0xc,%esp
   15c4c:	50                   	push   %eax
   15c4d:	e8 9a fd ff ff       	call   159ec <cluster_is_valid>
   15c52:	83 c4 10             	add    $0x10,%esp
   15c55:	85 c0                	test   %eax,%eax
   15c57:	75 b8                	jne    15c11 <cluster_free_chain+0xf>
    }
}
   15c59:	90                   	nop
   15c5a:	90                   	nop
   15c5b:	c9                   	leave  
   15c5c:	c3                   	ret    

00015c5d <cluster_alloc_free>:

/**
 * @brief 找一个空闲的cluster
 */
cluster_t cluster_alloc_free (fat_t * fat, int cnt) {
   15c5d:	55                   	push   %ebp
   15c5e:	89 e5                	mov    %esp,%ebp
   15c60:	83 ec 28             	sub    $0x28,%esp
    cluster_t pre, curr, start;
    int c_total = fat->tbl_sectors * fat->bytes_per_sec / sizeof(cluster_t);
   15c63:	8b 45 08             	mov    0x8(%ebp),%eax
   15c66:	8b 50 08             	mov    0x8(%eax),%edx
   15c69:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6c:	8b 40 0c             	mov    0xc(%eax),%eax
   15c6f:	0f af c2             	imul   %edx,%eax
   15c72:	d1 e8                	shr    %eax
   15c74:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pre = start = FAT_CLUSTER_INVALID;
   15c77:	66 c7 45 f2 f8 ff    	movw   $0xfff8,-0xe(%ebp)
   15c7d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15c81:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15c85:	66 c7 45 f4 02 00    	movw   $0x2,-0xc(%ebp)
   15c8b:	e9 a0 00 00 00       	jmp    15d30 <cluster_alloc_free+0xd3>
        cluster_t free = cluster_get_next(fat, curr);
   15c90:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15c94:	83 ec 08             	sub    $0x8,%esp
   15c97:	50                   	push   %eax
   15c98:	ff 75 08             	push   0x8(%ebp)
   15c9b:	e8 75 fd ff ff       	call   15a15 <cluster_get_next>
   15ca0:	83 c4 10             	add    $0x10,%esp
   15ca3:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        if (free == FAT_CLUSTER_FREE) {
   15ca7:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15cac:	75 77                	jne    15d25 <cluster_alloc_free+0xc8>
            // 记录首个簇
            if (!cluster_is_valid(start)) {
   15cae:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15cb2:	83 ec 0c             	sub    $0xc,%esp
   15cb5:	50                   	push   %eax
   15cb6:	e8 31 fd ff ff       	call   159ec <cluster_is_valid>
   15cbb:	83 c4 10             	add    $0x10,%esp
   15cbe:	85 c0                	test   %eax,%eax
   15cc0:	75 08                	jne    15cca <cluster_alloc_free+0x6d>
                start = curr;
   15cc2:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15cc6:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            } 
        
            // 前一簇如果有效，则设置。否则忽略掉
            if (cluster_is_valid(pre)) {
   15cca:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15cce:	83 ec 0c             	sub    $0xc,%esp
   15cd1:	50                   	push   %eax
   15cd2:	e8 15 fd ff ff       	call   159ec <cluster_is_valid>
   15cd7:	83 c4 10             	add    $0x10,%esp
   15cda:	85 c0                	test   %eax,%eax
   15cdc:	74 3b                	je     15d19 <cluster_alloc_free+0xbc>
                // 找到空表项，设置前一表项的链接
                int err = cluster_set_next(fat, pre, curr);
   15cde:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
   15ce2:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ce6:	83 ec 04             	sub    $0x4,%esp
   15ce9:	52                   	push   %edx
   15cea:	50                   	push   %eax
   15ceb:	ff 75 08             	push   0x8(%ebp)
   15cee:	e8 e0 fd ff ff       	call   15ad3 <cluster_set_next>
   15cf3:	83 c4 10             	add    $0x10,%esp
   15cf6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0) {
   15cf9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15cfd:	79 1a                	jns    15d19 <cluster_alloc_free+0xbc>
                    cluster_free_chain(fat, start);
   15cff:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d03:	83 ec 08             	sub    $0x8,%esp
   15d06:	50                   	push   %eax
   15d07:	ff 75 08             	push   0x8(%ebp)
   15d0a:	e8 f3 fe ff ff       	call   15c02 <cluster_free_chain>
   15d0f:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15d12:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15d17:	eb 6f                	jmp    15d88 <cluster_alloc_free+0x12b>
                }
            }

            pre = curr;
   15d19:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d1d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            cnt--;
   15d21:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15d25:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d29:	83 c0 01             	add    $0x1,%eax
   15d2c:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   15d30:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d34:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15d37:	7e 0a                	jle    15d43 <cluster_alloc_free+0xe6>
   15d39:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d3d:	0f 85 4d ff ff ff    	jne    15c90 <cluster_alloc_free+0x33>
        }
    }

    // 最后的结点
    if (cnt == 0) {
   15d43:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d47:	75 27                	jne    15d70 <cluster_alloc_free+0x113>
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15d49:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15d4d:	83 ec 04             	sub    $0x4,%esp
   15d50:	68 f8 ff 00 00       	push   $0xfff8
   15d55:	50                   	push   %eax
   15d56:	ff 75 08             	push   0x8(%ebp)
   15d59:	e8 75 fd ff ff       	call   15ad3 <cluster_set_next>
   15d5e:	83 c4 10             	add    $0x10,%esp
   15d61:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err == 0) {
   15d64:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   15d68:	75 06                	jne    15d70 <cluster_alloc_free+0x113>
            return start;
   15d6a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d6e:	eb 18                	jmp    15d88 <cluster_alloc_free+0x12b>
        }
    }

    // 失败，空间不够等问题
    cluster_free_chain(fat, start);
   15d70:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d74:	83 ec 08             	sub    $0x8,%esp
   15d77:	50                   	push   %eax
   15d78:	ff 75 08             	push   0x8(%ebp)
   15d7b:	e8 82 fe ff ff       	call   15c02 <cluster_free_chain>
   15d80:	83 c4 10             	add    $0x10,%esp
    return FAT_CLUSTER_INVALID;
   15d83:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
}
   15d88:	c9                   	leave  
   15d89:	c3                   	ret    

00015d8a <to_sfn>:

/**
 * @brief 转换文件名为diritem中的短文件名，如a.txt 转换成a      txt
 */
static void to_sfn(char* dest, const char* src) {
   15d8a:	55                   	push   %ebp
   15d8b:	89 e5                	mov    %esp,%ebp
   15d8d:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15d90:	83 ec 04             	sub    $0x4,%esp
   15d93:	6a 0b                	push   $0xb
   15d95:	6a 20                	push   $0x20
   15d97:	ff 75 08             	push   0x8(%ebp)
   15d9a:	e8 c6 26 00 00       	call   18465 <kernel_memset>
   15d9f:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char * curr = dest;
   15da2:	8b 45 08             	mov    0x8(%ebp),%eax
   15da5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * end = dest + SFN_LEN;
   15da8:	8b 45 08             	mov    0x8(%ebp),%eax
   15dab:	83 c0 0b             	add    $0xb,%eax
   15dae:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end)) {
   15db1:	eb 49                	jmp    15dfc <to_sfn+0x72>
        char c = *src++;
   15db3:	8b 45 0c             	mov    0xc(%ebp),%eax
   15db6:	8d 50 01             	lea    0x1(%eax),%edx
   15db9:	89 55 0c             	mov    %edx,0xc(%ebp)
   15dbc:	0f b6 00             	movzbl (%eax),%eax
   15dbf:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c) {
   15dc2:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15dc6:	83 f8 2e             	cmp    $0x2e,%eax
   15dc9:	75 0b                	jne    15dd6 <to_sfn+0x4c>
        case '.':       // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   15dcb:	8b 45 08             	mov    0x8(%ebp),%eax
   15dce:	83 c0 08             	add    $0x8,%eax
   15dd1:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15dd4:	eb 26                	jmp    15dfc <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z')) {
   15dd6:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15dda:	7e 10                	jle    15dec <to_sfn+0x62>
   15ddc:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15de0:	7f 0a                	jg     15dec <to_sfn+0x62>
                c = c - 'a' + 'A';
   15de2:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15de6:	83 e8 20             	sub    $0x20,%eax
   15de9:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15dec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15def:	8d 50 01             	lea    0x1(%eax),%edx
   15df2:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15df5:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15df9:	88 10                	mov    %dl,(%eax)
            break;
   15dfb:	90                   	nop
    while (*src && (curr < end)) {
   15dfc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15dff:	0f b6 00             	movzbl (%eax),%eax
   15e02:	84 c0                	test   %al,%al
   15e04:	74 08                	je     15e0e <to_sfn+0x84>
   15e06:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e09:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15e0c:	72 a5                	jb     15db3 <to_sfn+0x29>
        }
    }
}
   15e0e:	90                   	nop
   15e0f:	c9                   	leave  
   15e10:	c3                   	ret    

00015e11 <diritem_name_match>:

/**
 * @brief 判断item项是否与指定的名称相匹配
 */
int diritem_name_match (diritem_t * item, const char * path) {
   15e11:	55                   	push   %ebp
   15e12:	89 e5                	mov    %esp,%ebp
   15e14:	83 ec 18             	sub    $0x18,%esp
    char buf[SFN_LEN];
    to_sfn(buf, path);
   15e17:	83 ec 08             	sub    $0x8,%esp
   15e1a:	ff 75 0c             	push   0xc(%ebp)
   15e1d:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e20:	50                   	push   %eax
   15e21:	e8 64 ff ff ff       	call   15d8a <to_sfn>
   15e26:	83 c4 10             	add    $0x10,%esp
    return kernel_memcmp(buf, item->DIR_Name, SFN_LEN) == 0;
   15e29:	8b 45 08             	mov    0x8(%ebp),%eax
   15e2c:	83 ec 04             	sub    $0x4,%esp
   15e2f:	6a 0b                	push   $0xb
   15e31:	50                   	push   %eax
   15e32:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e35:	50                   	push   %eax
   15e36:	e8 6b 26 00 00       	call   184a6 <kernel_memcmp>
   15e3b:	83 c4 10             	add    $0x10,%esp
   15e3e:	85 c0                	test   %eax,%eax
   15e40:	0f 94 c0             	sete   %al
   15e43:	0f b6 c0             	movzbl %al,%eax
}
   15e46:	c9                   	leave  
   15e47:	c3                   	ret    

00015e48 <diritem_init>:

/**
 * 缺省初始化driitem
 */
int diritem_init(diritem_t * item, uint8_t attr,const char * name) {
   15e48:	55                   	push   %ebp
   15e49:	89 e5                	mov    %esp,%ebp
   15e4b:	83 ec 18             	sub    $0x18,%esp
   15e4e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e51:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15e54:	8b 45 08             	mov    0x8(%ebp),%eax
   15e57:	83 ec 08             	sub    $0x8,%esp
   15e5a:	ff 75 10             	push   0x10(%ebp)
   15e5d:	50                   	push   %eax
   15e5e:	e8 27 ff ff ff       	call   15d8a <to_sfn>
   15e63:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t )(FAT_CLUSTER_INVALID >> 16);
   15e66:	8b 45 08             	mov    0x8(%ebp),%eax
   15e69:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(FAT_CLUSTER_INVALID & 0xFFFF);
   15e6f:	8b 45 08             	mov    0x8(%ebp),%eax
   15e72:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15e78:	8b 45 08             	mov    0x8(%ebp),%eax
   15e7b:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15e82:	8b 45 08             	mov    0x8(%ebp),%eax
   15e85:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15e89:	88 50 0b             	mov    %dl,0xb(%eax)
    item->DIR_NTRes = 0;
   15e8c:	8b 45 08             	mov    0x8(%ebp),%eax
   15e8f:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

    // 时间写固定值，简单方便
    item->DIR_CrtTime = 0;
   15e93:	8b 45 08             	mov    0x8(%ebp),%eax
   15e96:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%eax)
    item->DIR_CrtDate = 0;
   15e9c:	8b 45 08             	mov    0x8(%ebp),%eax
   15e9f:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    item->DIR_WrtTime = item->DIR_CrtTime;
   15ea5:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea8:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15eac:	8b 45 08             	mov    0x8(%ebp),%eax
   15eaf:	66 89 50 16          	mov    %dx,0x16(%eax)
    item->DIR_WrtDate = item->DIR_CrtDate;
   15eb3:	8b 45 08             	mov    0x8(%ebp),%eax
   15eb6:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15eba:	8b 45 08             	mov    0x8(%ebp),%eax
   15ebd:	66 89 50 18          	mov    %dx,0x18(%eax)
    item->DIR_LastAccDate = item->DIR_CrtDate;
   15ec1:	8b 45 08             	mov    0x8(%ebp),%eax
   15ec4:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15ec8:	8b 45 08             	mov    0x8(%ebp),%eax
   15ecb:	66 89 50 12          	mov    %dx,0x12(%eax)
    return 0;
   15ecf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15ed4:	c9                   	leave  
   15ed5:	c3                   	ret    

00015ed6 <diritem_get_name>:

/**
 * @brief 获取diritem中的名称，转换成合适
 */
void diritem_get_name (diritem_t * item, char * dest) {
   15ed6:	55                   	push   %ebp
   15ed7:	89 e5                	mov    %esp,%ebp
   15ed9:	83 ec 18             	sub    $0x18,%esp
    char * c = dest;
   15edc:	8b 45 0c             	mov    0xc(%ebp),%eax
   15edf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * ext = (char *)0;
   15ee2:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    kernel_memset(dest, 0, SFN_LEN + 1);     // 最多11个字符
   15ee9:	83 ec 04             	sub    $0x4,%esp
   15eec:	6a 0c                	push   $0xc
   15eee:	6a 00                	push   $0x0
   15ef0:	ff 75 0c             	push   0xc(%ebp)
   15ef3:	e8 6d 25 00 00       	call   18465 <kernel_memset>
   15ef8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; i++) {
   15efb:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15f02:	eb 43                	jmp    15f47 <diritem_get_name+0x71>
        if (item->DIR_Name[i] != ' ') {
   15f04:	8b 55 08             	mov    0x8(%ebp),%edx
   15f07:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f0a:	01 d0                	add    %edx,%eax
   15f0c:	0f b6 00             	movzbl (%eax),%eax
   15f0f:	3c 20                	cmp    $0x20,%al
   15f11:	74 18                	je     15f2b <diritem_get_name+0x55>
            *c++ = item->DIR_Name[i];
   15f13:	8b 55 08             	mov    0x8(%ebp),%edx
   15f16:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f19:	01 d0                	add    %edx,%eax
   15f1b:	0f b6 08             	movzbl (%eax),%ecx
   15f1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f21:	8d 50 01             	lea    0x1(%eax),%edx
   15f24:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f27:	89 ca                	mov    %ecx,%edx
   15f29:	88 10                	mov    %dl,(%eax)
        }

        if (i == 7) {
   15f2b:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15f2f:	75 12                	jne    15f43 <diritem_get_name+0x6d>
            ext = c;
   15f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f34:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *c++ = '.';
   15f37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f3a:	8d 50 01             	lea    0x1(%eax),%edx
   15f3d:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f40:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; i++) {
   15f43:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15f47:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15f4b:	7e b7                	jle    15f04 <diritem_get_name+0x2e>
        }
    }

    // 没有扩展名的情况
    if (ext && (ext[1] == '\0')) {
   15f4d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15f51:	74 13                	je     15f66 <diritem_get_name+0x90>
   15f53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f56:	83 c0 01             	add    $0x1,%eax
   15f59:	0f b6 00             	movzbl (%eax),%eax
   15f5c:	84 c0                	test   %al,%al
   15f5e:	75 06                	jne    15f66 <diritem_get_name+0x90>
        ext[0] = '\0';
   15f60:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f63:	c6 00 00             	movb   $0x0,(%eax)
    }
}
   15f66:	90                   	nop
   15f67:	c9                   	leave  
   15f68:	c3                   	ret    

00015f69 <diritem_get_type>:

/**
 * @brief 获取文件类型
 */
file_type_t diritem_get_type (diritem_t * item) {
   15f69:	55                   	push   %ebp
   15f6a:	89 e5                	mov    %esp,%ebp
   15f6c:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15f6f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 长文件名和volum id
    if (item->DIR_Attr & (DIRITEM_ATTR_VOLUME_ID | DIRITEM_ATTR_HIDDEN | DIRITEM_ATTR_SYSTEM)) {
   15f76:	8b 45 08             	mov    0x8(%ebp),%eax
   15f79:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15f7d:	0f b6 c0             	movzbl %al,%eax
   15f80:	83 e0 0e             	and    $0xe,%eax
   15f83:	85 c0                	test   %eax,%eax
   15f85:	74 07                	je     15f8e <diritem_get_type+0x25>
        return FILE_UNKNOWN;
   15f87:	b8 00 00 00 00       	mov    $0x0,%eax
   15f8c:	eb 1d                	jmp    15fab <diritem_get_type+0x42>
    }

    return item->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   15f8e:	8b 45 08             	mov    0x8(%ebp),%eax
   15f91:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15f95:	0f b6 c0             	movzbl %al,%eax
   15f98:	83 e0 10             	and    $0x10,%eax
   15f9b:	85 c0                	test   %eax,%eax
   15f9d:	74 07                	je     15fa6 <diritem_get_type+0x3d>
   15f9f:	b8 03 00 00 00       	mov    $0x3,%eax
   15fa4:	eb 05                	jmp    15fab <diritem_get_type+0x42>
   15fa6:	b8 02 00 00 00       	mov    $0x2,%eax
}
   15fab:	c9                   	leave  
   15fac:	c3                   	ret    

00015fad <read_dir_entry>:

/**
 * @brief 在root目录中读取diritem
 */
static diritem_t * read_dir_entry (fat_t * fat, int index) {
   15fad:	55                   	push   %ebp
   15fae:	89 e5                	mov    %esp,%ebp
   15fb0:	53                   	push   %ebx
   15fb1:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   15fb4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fb8:	78 0d                	js     15fc7 <read_dir_entry+0x1a>
   15fba:	8b 45 08             	mov    0x8(%ebp),%eax
   15fbd:	8b 50 14             	mov    0x14(%eax),%edx
   15fc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fc3:	39 c2                	cmp    %eax,%edx
   15fc5:	77 07                	ja     15fce <read_dir_entry+0x21>
        return (diritem_t *)0;
   15fc7:	b8 00 00 00 00       	mov    $0x0,%eax
   15fcc:	eb 5a                	jmp    16028 <read_dir_entry+0x7b>
    }

    int offset = index * sizeof(diritem_t);
   15fce:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fd1:	c1 e0 05             	shl    $0x5,%eax
   15fd4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int err = bread_sector(fat, fat->root_start + offset / fat->bytes_per_sec);
   15fd7:	8b 45 08             	mov    0x8(%ebp),%eax
   15fda:	8b 48 18             	mov    0x18(%eax),%ecx
   15fdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15fe0:	8b 55 08             	mov    0x8(%ebp),%edx
   15fe3:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15fe6:	ba 00 00 00 00       	mov    $0x0,%edx
   15feb:	f7 f3                	div    %ebx
   15fed:	01 c8                	add    %ecx,%eax
   15fef:	83 ec 08             	sub    $0x8,%esp
   15ff2:	50                   	push   %eax
   15ff3:	ff 75 08             	push   0x8(%ebp)
   15ff6:	e8 5a f9 ff ff       	call   15955 <bread_sector>
   15ffb:	83 c4 10             	add    $0x10,%esp
   15ffe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
   16001:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16005:	79 07                	jns    1600e <read_dir_entry+0x61>
        return (diritem_t *)0;
   16007:	b8 00 00 00 00       	mov    $0x0,%eax
   1600c:	eb 1a                	jmp    16028 <read_dir_entry+0x7b>
    }
    return (diritem_t *)(fat->fat_buffer + offset % fat->bytes_per_sec);
   1600e:	8b 45 08             	mov    0x8(%ebp),%eax
   16011:	8b 58 24             	mov    0x24(%eax),%ebx
   16014:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16017:	8b 55 08             	mov    0x8(%ebp),%edx
   1601a:	8b 4a 0c             	mov    0xc(%edx),%ecx
   1601d:	ba 00 00 00 00       	mov    $0x0,%edx
   16022:	f7 f1                	div    %ecx
   16024:	89 d0                	mov    %edx,%eax
   16026:	01 d8                	add    %ebx,%eax
}
   16028:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1602b:	c9                   	leave  
   1602c:	c3                   	ret    

0001602d <write_dir_entry>:

/**
 * @brief 写dir目录项
 */
static int write_dir_entry (fat_t * fat, diritem_t * item, int index) {
   1602d:	55                   	push   %ebp
   1602e:	89 e5                	mov    %esp,%ebp
   16030:	53                   	push   %ebx
   16031:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   16034:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16038:	78 0d                	js     16047 <write_dir_entry+0x1a>
   1603a:	8b 45 08             	mov    0x8(%ebp),%eax
   1603d:	8b 50 14             	mov    0x14(%eax),%edx
   16040:	8b 45 10             	mov    0x10(%ebp),%eax
   16043:	39 c2                	cmp    %eax,%edx
   16045:	77 0a                	ja     16051 <write_dir_entry+0x24>
        return -1;
   16047:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1604c:	e9 81 00 00 00       	jmp    160d2 <write_dir_entry+0xa5>
    }

    int offset = index * sizeof(diritem_t);
   16051:	8b 45 10             	mov    0x10(%ebp),%eax
   16054:	c1 e0 05             	shl    $0x5,%eax
   16057:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start + offset / fat->bytes_per_sec;
   1605a:	8b 45 08             	mov    0x8(%ebp),%eax
   1605d:	8b 48 18             	mov    0x18(%eax),%ecx
   16060:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16063:	8b 55 08             	mov    0x8(%ebp),%edx
   16066:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16069:	ba 00 00 00 00       	mov    $0x0,%edx
   1606e:	f7 f3                	div    %ebx
   16070:	01 c8                	add    %ecx,%eax
   16072:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = bread_sector(fat, sector);
   16075:	83 ec 08             	sub    $0x8,%esp
   16078:	ff 75 f0             	push   -0x10(%ebp)
   1607b:	ff 75 08             	push   0x8(%ebp)
   1607e:	e8 d2 f8 ff ff       	call   15955 <bread_sector>
   16083:	83 c4 10             	add    $0x10,%esp
   16086:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   16089:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1608d:	79 07                	jns    16096 <write_dir_entry+0x69>
        return -1;
   1608f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16094:	eb 3c                	jmp    160d2 <write_dir_entry+0xa5>
    }
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sec, item, sizeof(diritem_t));
   16096:	8b 45 08             	mov    0x8(%ebp),%eax
   16099:	8b 58 24             	mov    0x24(%eax),%ebx
   1609c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1609f:	8b 55 08             	mov    0x8(%ebp),%edx
   160a2:	8b 4a 0c             	mov    0xc(%edx),%ecx
   160a5:	ba 00 00 00 00       	mov    $0x0,%edx
   160aa:	f7 f1                	div    %ecx
   160ac:	89 d0                	mov    %edx,%eax
   160ae:	01 d8                	add    %ebx,%eax
   160b0:	83 ec 04             	sub    $0x4,%esp
   160b3:	6a 20                	push   $0x20
   160b5:	ff 75 0c             	push   0xc(%ebp)
   160b8:	50                   	push   %eax
   160b9:	e8 58 23 00 00       	call   18416 <kernel_memcpy>
   160be:	83 c4 10             	add    $0x10,%esp
    return bwrite_secotr(fat, sector);
   160c1:	83 ec 08             	sub    $0x8,%esp
   160c4:	ff 75 f0             	push   -0x10(%ebp)
   160c7:	ff 75 08             	push   0x8(%ebp)
   160ca:	e8 df f8 ff ff       	call   159ae <bwrite_secotr>
   160cf:	83 c4 10             	add    $0x10,%esp
}
   160d2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   160d5:	c9                   	leave  
   160d6:	c3                   	ret    

000160d7 <expand_file>:


/**
 * @brief 更改文件大小, 此时当前族号已经到达了最后的簇号
 */
static int expand_file(file_t * file, int inc_bytes) {
   160d7:	55                   	push   %ebp
   160d8:	89 e5                	mov    %esp,%ebp
   160da:	53                   	push   %ebx
   160db:	83 ec 24             	sub    $0x24,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   160de:	8b 45 08             	mov    0x8(%ebp),%eax
   160e1:	8b 40 44             	mov    0x44(%eax),%eax
   160e4:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   160ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    int cluster_cnt;
    if ((file->size == 0) || (file->size % fat->cluster_byte_size == 0)) {
   160ed:	8b 45 08             	mov    0x8(%ebp),%eax
   160f0:	8b 40 24             	mov    0x24(%eax),%eax
   160f3:	85 c0                	test   %eax,%eax
   160f5:	74 19                	je     16110 <expand_file+0x39>
   160f7:	8b 45 08             	mov    0x8(%ebp),%eax
   160fa:	8b 40 24             	mov    0x24(%eax),%eax
   160fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16100:	8b 4a 20             	mov    0x20(%edx),%ecx
   16103:	ba 00 00 00 00       	mov    $0x0,%edx
   16108:	f7 f1                	div    %ecx
   1610a:	89 d0                	mov    %edx,%eax
   1610c:	85 c0                	test   %eax,%eax
   1610e:	75 25                	jne    16135 <expand_file+0x5e>
        // 文件为空，或者刚好达到的簇的末尾
        cluster_cnt = up2(inc_bytes, fat->cluster_byte_size) / fat->cluster_byte_size; 
   16110:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16113:	8b 50 20             	mov    0x20(%eax),%edx
   16116:	8b 45 0c             	mov    0xc(%ebp),%eax
   16119:	52                   	push   %edx
   1611a:	50                   	push   %eax
   1611b:	e8 1e f8 ff ff       	call   1593e <up2>
   16120:	83 c4 08             	add    $0x8,%esp
   16123:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16126:	8b 5a 20             	mov    0x20(%edx),%ebx
   16129:	ba 00 00 00 00       	mov    $0x0,%edx
   1612e:	f7 f3                	div    %ebx
   16130:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16133:	eb 69                	jmp    1619e <expand_file+0xc7>
    } else {
        // 文件非空，当前簇的空闲量，如果空间够增长，则直接退出了
        // 例如：大小为2048，再扩充1024,簇大小为1024
        int cfree = fat->cluster_byte_size - (file->size % fat->cluster_byte_size);
   16135:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16138:	8b 48 20             	mov    0x20(%eax),%ecx
   1613b:	8b 45 08             	mov    0x8(%ebp),%eax
   1613e:	8b 40 24             	mov    0x24(%eax),%eax
   16141:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16144:	8b 5a 20             	mov    0x20(%edx),%ebx
   16147:	ba 00 00 00 00       	mov    $0x0,%edx
   1614c:	f7 f3                	div    %ebx
   1614e:	89 c8                	mov    %ecx,%eax
   16150:	29 d0                	sub    %edx,%eax
   16152:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cfree >= inc_bytes) {
   16155:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16158:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1615b:	7c 1b                	jl     16178 <expand_file+0xa1>
            file->size += inc_bytes;
   1615d:	8b 45 08             	mov    0x8(%ebp),%eax
   16160:	8b 50 24             	mov    0x24(%eax),%edx
   16163:	8b 45 0c             	mov    0xc(%ebp),%eax
   16166:	01 c2                	add    %eax,%edx
   16168:	8b 45 08             	mov    0x8(%ebp),%eax
   1616b:	89 50 24             	mov    %edx,0x24(%eax)
            return 0;
   1616e:	b8 00 00 00 00       	mov    $0x0,%eax
   16173:	e9 c9 00 00 00       	jmp    16241 <expand_file+0x16a>
        }

        // 不够，则分配新簇用来放额外的空间
        cluster_cnt = up2(inc_bytes - cfree, fat->cluster_byte_size) / fat->cluster_byte_size; 
   16178:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1617b:	8b 40 20             	mov    0x20(%eax),%eax
   1617e:	8b 55 0c             	mov    0xc(%ebp),%edx
   16181:	2b 55 ec             	sub    -0x14(%ebp),%edx
   16184:	50                   	push   %eax
   16185:	52                   	push   %edx
   16186:	e8 b3 f7 ff ff       	call   1593e <up2>
   1618b:	83 c4 08             	add    $0x8,%esp
   1618e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16191:	8b 4a 20             	mov    0x20(%edx),%ecx
   16194:	ba 00 00 00 00       	mov    $0x0,%edx
   16199:	f7 f1                	div    %ecx
   1619b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   1619e:	83 ec 08             	sub    $0x8,%esp
   161a1:	ff 75 f4             	push   -0xc(%ebp)
   161a4:	ff 75 f0             	push   -0x10(%ebp)
   161a7:	e8 b1 fa ff ff       	call   15c5d <cluster_alloc_free>
   161ac:	83 c4 10             	add    $0x10,%esp
   161af:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start)) {
   161b3:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   161b7:	83 ec 0c             	sub    $0xc,%esp
   161ba:	50                   	push   %eax
   161bb:	e8 2c f8 ff ff       	call   159ec <cluster_is_valid>
   161c0:	83 c4 10             	add    $0x10,%esp
   161c3:	85 c0                	test   %eax,%eax
   161c5:	75 17                	jne    161de <expand_file+0x107>
        log_printf("no cluster for file write");
   161c7:	83 ec 0c             	sub    $0xc,%esp
   161ca:	68 1a 9b 01 00       	push   $0x19b1a
   161cf:	e8 3b 28 00 00       	call   18a0f <log_printf>
   161d4:	83 c4 10             	add    $0x10,%esp
        return -1;
   161d7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   161dc:	eb 63                	jmp    16241 <expand_file+0x16a>
    }

    // 在文件关闭时，回写
    if (!cluster_is_valid(file->sblk)) {
   161de:	8b 45 08             	mov    0x8(%ebp),%eax
   161e1:	8b 40 34             	mov    0x34(%eax),%eax
   161e4:	0f b7 c0             	movzwl %ax,%eax
   161e7:	83 ec 0c             	sub    $0xc,%esp
   161ea:	50                   	push   %eax
   161eb:	e8 fc f7 ff ff       	call   159ec <cluster_is_valid>
   161f0:	83 c4 10             	add    $0x10,%esp
   161f3:	85 c0                	test   %eax,%eax
   161f5:	75 18                	jne    1620f <expand_file+0x138>
        file->cblk = file->sblk = start;
   161f7:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   161fb:	8b 45 08             	mov    0x8(%ebp),%eax
   161fe:	89 50 34             	mov    %edx,0x34(%eax)
   16201:	8b 45 08             	mov    0x8(%ebp),%eax
   16204:	8b 50 34             	mov    0x34(%eax),%edx
   16207:	8b 45 08             	mov    0x8(%ebp),%eax
   1620a:	89 50 38             	mov    %edx,0x38(%eax)
   1620d:	eb 2d                	jmp    1623c <expand_file+0x165>
    } else {
        // 建立链接关系
        int err = cluster_set_next(fat, file->cblk, start);
   1620f:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16213:	8b 45 08             	mov    0x8(%ebp),%eax
   16216:	8b 40 38             	mov    0x38(%eax),%eax
   16219:	0f b7 c0             	movzwl %ax,%eax
   1621c:	83 ec 04             	sub    $0x4,%esp
   1621f:	52                   	push   %edx
   16220:	50                   	push   %eax
   16221:	ff 75 f0             	push   -0x10(%ebp)
   16224:	e8 aa f8 ff ff       	call   15ad3 <cluster_set_next>
   16229:	83 c4 10             	add    $0x10,%esp
   1622c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   1622f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16233:	79 07                	jns    1623c <expand_file+0x165>
            return -1;
   16235:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1623a:	eb 05                	jmp    16241 <expand_file+0x16a>
        }
    }

    return 0;
   1623c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16241:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16244:	c9                   	leave  
   16245:	c3                   	ret    

00016246 <move_file_pos>:

/**
 * @brief 移动文件指针
 */
static int move_file_pos(file_t* file, fat_t * fat, uint32_t move_bytes, int expand) {
   16246:	55                   	push   %ebp
   16247:	89 e5                	mov    %esp,%ebp
   16249:	83 ec 18             	sub    $0x18,%esp
	uint32_t c_offset = file->pos % fat->cluster_byte_size;
   1624c:	8b 45 08             	mov    0x8(%ebp),%eax
   1624f:	8b 40 30             	mov    0x30(%eax),%eax
   16252:	89 c2                	mov    %eax,%edx
   16254:	8b 45 0c             	mov    0xc(%ebp),%eax
   16257:	8b 48 20             	mov    0x20(%eax),%ecx
   1625a:	89 d0                	mov    %edx,%eax
   1625c:	ba 00 00 00 00       	mov    $0x0,%edx
   16261:	f7 f1                	div    %ecx
   16263:	89 55 f0             	mov    %edx,-0x10(%ebp)

    // 跨簇，则调整curr_cluster。注意，如果已经是最后一个簇了，则curr_cluster不会调整
	if (c_offset + move_bytes >= fat->cluster_byte_size) {
   16266:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16269:	8b 45 10             	mov    0x10(%ebp),%eax
   1626c:	01 c2                	add    %eax,%edx
   1626e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16271:	8b 40 20             	mov    0x20(%eax),%eax
   16274:	39 c2                	cmp    %eax,%edx
   16276:	72 74                	jb     162ec <move_file_pos+0xa6>
        cluster_t next = cluster_get_next(fat, file->cblk);
   16278:	8b 45 08             	mov    0x8(%ebp),%eax
   1627b:	8b 40 38             	mov    0x38(%eax),%eax
   1627e:	0f b7 c0             	movzwl %ax,%eax
   16281:	83 ec 08             	sub    $0x8,%esp
   16284:	50                   	push   %eax
   16285:	ff 75 0c             	push   0xc(%ebp)
   16288:	e8 88 f7 ff ff       	call   15a15 <cluster_get_next>
   1628d:	83 c4 10             	add    $0x10,%esp
   16290:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
		if ((next == FAT_CLUSTER_INVALID) && expand) {
   16294:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   16299:	75 47                	jne    162e2 <move_file_pos+0x9c>
   1629b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1629f:	74 41                	je     162e2 <move_file_pos+0x9c>
            int err = expand_file(file, fat->cluster_byte_size);
   162a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   162a4:	8b 40 20             	mov    0x20(%eax),%eax
   162a7:	83 ec 08             	sub    $0x8,%esp
   162aa:	50                   	push   %eax
   162ab:	ff 75 08             	push   0x8(%ebp)
   162ae:	e8 24 fe ff ff       	call   160d7 <expand_file>
   162b3:	83 c4 10             	add    $0x10,%esp
   162b6:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (err < 0) {
   162b9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   162bd:	79 07                	jns    162c6 <move_file_pos+0x80>
                return -1;
   162bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   162c4:	eb 40                	jmp    16306 <move_file_pos+0xc0>
            }

            next = cluster_get_next(fat, file->cblk);
   162c6:	8b 45 08             	mov    0x8(%ebp),%eax
   162c9:	8b 40 38             	mov    0x38(%eax),%eax
   162cc:	0f b7 c0             	movzwl %ax,%eax
   162cf:	83 ec 08             	sub    $0x8,%esp
   162d2:	50                   	push   %eax
   162d3:	ff 75 0c             	push   0xc(%ebp)
   162d6:	e8 3a f7 ff ff       	call   15a15 <cluster_get_next>
   162db:	83 c4 10             	add    $0x10,%esp
   162de:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        }

        file->cblk = next;
   162e2:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   162e6:	8b 45 08             	mov    0x8(%ebp),%eax
   162e9:	89 50 38             	mov    %edx,0x38(%eax)
	}

	file->pos += move_bytes;
   162ec:	8b 45 08             	mov    0x8(%ebp),%eax
   162ef:	8b 40 30             	mov    0x30(%eax),%eax
   162f2:	89 c2                	mov    %eax,%edx
   162f4:	8b 45 10             	mov    0x10(%ebp),%eax
   162f7:	01 d0                	add    %edx,%eax
   162f9:	89 c2                	mov    %eax,%edx
   162fb:	8b 45 08             	mov    0x8(%ebp),%eax
   162fe:	89 50 30             	mov    %edx,0x30(%eax)
	return 0;
   16301:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16306:	c9                   	leave  
   16307:	c3                   	ret    

00016308 <fatfs_mount>:

/**
 * @brief 挂载fat文件系统
 */
int fatfs_mount (struct _fs_t * fs, int dev_major, int dev_minor) {
   16308:	55                   	push   %ebp
   16309:	89 e5                	mov    %esp,%ebp
   1630b:	83 ec 18             	sub    $0x18,%esp
    // 打开设备
    int dev_id = dev_open(dev_major, dev_minor, (void *)0);
   1630e:	83 ec 04             	sub    $0x4,%esp
   16311:	6a 00                	push   $0x0
   16313:	ff 75 10             	push   0x10(%ebp)
   16316:	ff 75 0c             	push   0xc(%ebp)
   16319:	e8 65 db ff ff       	call   13e83 <dev_open>
   1631e:	83 c4 10             	add    $0x10,%esp
   16321:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dev_id < 0) {
   16324:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16328:	79 20                	jns    1634a <fatfs_mount+0x42>
        log_printf("open disk failed. major: %x, minor: %x", dev_major, dev_minor);
   1632a:	83 ec 04             	sub    $0x4,%esp
   1632d:	ff 75 10             	push   0x10(%ebp)
   16330:	ff 75 0c             	push   0xc(%ebp)
   16333:	68 34 9b 01 00       	push   $0x19b34
   16338:	e8 d2 26 00 00       	call   18a0f <log_printf>
   1633d:	83 c4 10             	add    $0x10,%esp
        return -1;
   16340:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16345:	e9 fc 01 00 00       	jmp    16546 <fatfs_mount+0x23e>
    }

    // 读取dbr扇区并进行检查
    dbr_t * dbr = (dbr_t *)memory_alloc_page();
   1634a:	e8 22 a9 ff ff       	call   10c71 <memory_alloc_page>
   1634f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!dbr) {
   16352:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16356:	75 15                	jne    1636d <fatfs_mount+0x65>
        log_printf("mount fat failed: can't alloc buf.");
   16358:	83 ec 0c             	sub    $0xc,%esp
   1635b:	68 5c 9b 01 00       	push   $0x19b5c
   16360:	e8 aa 26 00 00       	call   18a0f <log_printf>
   16365:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16368:	e9 b1 01 00 00       	jmp    1651e <fatfs_mount+0x216>
    }

    // 这里需要使用查询的方式来读取，因为此时多进程还没有跑起来，只在初始化阶段？
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   1636d:	6a 01                	push   $0x1
   1636f:	ff 75 f0             	push   -0x10(%ebp)
   16372:	6a 00                	push   $0x0
   16374:	ff 75 f4             	push   -0xc(%ebp)
   16377:	e8 51 dc ff ff       	call   13fcd <dev_read>
   1637c:	83 c4 10             	add    $0x10,%esp
   1637f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   16382:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16386:	7f 15                	jg     1639d <fatfs_mount+0x95>
        log_printf("read dbr failed.");
   16388:	83 ec 0c             	sub    $0xc,%esp
   1638b:	68 7f 9b 01 00       	push   $0x19b7f
   16390:	e8 7a 26 00 00       	call   18a0f <log_printf>
   16395:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16398:	e9 81 01 00 00       	jmp    1651e <fatfs_mount+0x216>
    }

    // 解析DBR参数，解析出有用的参数
    fat_t * fat = &fs->fat_data;
   1639d:	8b 45 08             	mov    0x8(%ebp),%eax
   163a0:	05 18 02 00 00       	add    $0x218,%eax
   163a5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->fat_buffer = (uint8_t *)dbr;
   163a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163ab:	8b 55 f0             	mov    -0x10(%ebp),%edx
   163ae:	89 50 24             	mov    %edx,0x24(%eax)
    fat->bytes_per_sec = dbr->BPB_BytsPerSec;
   163b1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163b4:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   163b8:	0f b7 d0             	movzwl %ax,%edx
   163bb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163be:	89 50 0c             	mov    %edx,0xc(%eax)
    fat->tbl_start = dbr->BPB_RsvdSecCnt;
   163c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163c4:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   163c8:	0f b7 d0             	movzwl %ax,%edx
   163cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163ce:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   163d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163d3:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   163d7:	0f b7 d0             	movzwl %ax,%edx
   163da:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163dd:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   163e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163e3:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   163e7:	0f b6 d0             	movzbl %al,%edx
   163ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163ed:	89 50 04             	mov    %edx,0x4(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   163f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163f3:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   163f7:	0f b7 d0             	movzwl %ax,%edx
   163fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163fd:	89 50 14             	mov    %edx,0x14(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   16400:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16403:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16407:	0f b6 d0             	movzbl %al,%edx
   1640a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1640d:	89 50 10             	mov    %edx,0x10(%eax)
    fat->cluster_byte_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   16410:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16413:	8b 50 10             	mov    0x10(%eax),%edx
   16416:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16419:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   1641d:	0f b7 c0             	movzwl %ax,%eax
   16420:	0f af d0             	imul   %eax,%edx
   16423:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16426:	89 50 20             	mov    %edx,0x20(%eax)
	fat->root_start = fat->tbl_start + fat->tbl_sectors * fat->tbl_cnt;
   16429:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1642c:	8b 08                	mov    (%eax),%ecx
   1642e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16431:	8b 50 08             	mov    0x8(%eax),%edx
   16434:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16437:	8b 40 04             	mov    0x4(%eax),%eax
   1643a:	0f af c2             	imul   %edx,%eax
   1643d:	8d 14 01             	lea    (%ecx,%eax,1),%edx
   16440:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16443:	89 50 18             	mov    %edx,0x18(%eax)
    fat->data_start = fat->root_start + fat->root_ent_cnt * 32 / SECTOR_SIZE;
   16446:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16449:	8b 50 18             	mov    0x18(%eax),%edx
   1644c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1644f:	8b 40 14             	mov    0x14(%eax),%eax
   16452:	c1 e0 05             	shl    $0x5,%eax
   16455:	c1 e8 09             	shr    $0x9,%eax
   16458:	01 c2                	add    %eax,%edx
   1645a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1645d:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->curr_sector = -1;
   16460:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16463:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    fat->fs = fs;
   1646a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1646d:	8b 55 08             	mov    0x8(%ebp),%edx
   16470:	89 50 2c             	mov    %edx,0x2c(%eax)
    mutex_init(&fat->mutex);
   16473:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16476:	83 c0 30             	add    $0x30,%eax
   16479:	83 ec 0c             	sub    $0xc,%esp
   1647c:	50                   	push   %eax
   1647d:	e8 b2 18 00 00       	call   17d34 <mutex_init>
   16482:	83 c4 10             	add    $0x10,%esp
    fs->mutex = &fat->mutex;
   16485:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16488:	8d 50 30             	lea    0x30(%eax),%edx
   1648b:	8b 45 08             	mov    0x8(%ebp),%eax
   1648e:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)

	// 简单检查是否是fat16文件系统, 可以在下边做进一步的更多检查。此处只检查做一点点检查
	if (fat->tbl_cnt != 2) {
   16494:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16497:	8b 40 04             	mov    0x4(%eax),%eax
   1649a:	83 f8 02             	cmp    $0x2,%eax
   1649d:	74 18                	je     164b7 <fatfs_mount+0x1af>
        log_printf("fat table num error, major: %x, minor: %x", dev_major, dev_minor);
   1649f:	83 ec 04             	sub    $0x4,%esp
   164a2:	ff 75 10             	push   0x10(%ebp)
   164a5:	ff 75 0c             	push   0xc(%ebp)
   164a8:	68 90 9b 01 00       	push   $0x19b90
   164ad:	e8 5d 25 00 00       	call   18a0f <log_printf>
   164b2:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   164b5:	eb 67                	jmp    1651e <fatfs_mount+0x216>
	}

    if (kernel_memcmp(dbr->BS_FileSysType, "FAT16", 5) != 0) {
   164b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   164ba:	83 c0 36             	add    $0x36,%eax
   164bd:	83 ec 04             	sub    $0x4,%esp
   164c0:	6a 05                	push   $0x5
   164c2:	68 ba 9b 01 00       	push   $0x19bba
   164c7:	50                   	push   %eax
   164c8:	e8 d9 1f 00 00       	call   184a6 <kernel_memcmp>
   164cd:	83 c4 10             	add    $0x10,%esp
   164d0:	85 c0                	test   %eax,%eax
   164d2:	74 18                	je     164ec <fatfs_mount+0x1e4>
        log_printf("not a fat16 file system, major: %x, minor: %x", dev_major, dev_minor);
   164d4:	83 ec 04             	sub    $0x4,%esp
   164d7:	ff 75 10             	push   0x10(%ebp)
   164da:	ff 75 0c             	push   0xc(%ebp)
   164dd:	68 c0 9b 01 00       	push   $0x19bc0
   164e2:	e8 28 25 00 00       	call   18a0f <log_printf>
   164e7:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   164ea:	eb 32                	jmp    1651e <fatfs_mount+0x216>
    }

    // 记录相关的打开信息
    fs->type = FS_FAT16;
   164ec:	8b 45 08             	mov    0x8(%ebp),%eax
   164ef:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   164f6:	00 00 00 
    fs->data = &fs->fat_data;
   164f9:	8b 45 08             	mov    0x8(%ebp),%eax
   164fc:	8d 90 18 02 00 00    	lea    0x218(%eax),%edx
   16502:	8b 45 08             	mov    0x8(%ebp),%eax
   16505:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   1650b:	8b 45 08             	mov    0x8(%ebp),%eax
   1650e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   16511:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)
    return 0;
   16517:	b8 00 00 00 00       	mov    $0x0,%eax
   1651c:	eb 28                	jmp    16546 <fatfs_mount+0x23e>

mount_failed:
    if (dbr) {
   1651e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16522:	74 0f                	je     16533 <fatfs_mount+0x22b>
        memory_free_page((uint32_t)dbr);
   16524:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16527:	83 ec 0c             	sub    $0xc,%esp
   1652a:	50                   	push   %eax
   1652b:	e8 5b a7 ff ff       	call   10c8b <memory_free_page>
   16530:	83 c4 10             	add    $0x10,%esp
    }
    dev_close(dev_id);
   16533:	83 ec 0c             	sub    $0xc,%esp
   16536:	ff 75 f4             	push   -0xc(%ebp)
   16539:	e8 73 db ff ff       	call   140b1 <dev_close>
   1653e:	83 c4 10             	add    $0x10,%esp
    return -1;
   16541:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16546:	c9                   	leave  
   16547:	c3                   	ret    

00016548 <fatfs_unmount>:

/**
 * @brief 卸载fatfs文件系统
 */
void fatfs_unmount (struct _fs_t * fs) {
   16548:	55                   	push   %ebp
   16549:	89 e5                	mov    %esp,%ebp
   1654b:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   1654e:	8b 45 08             	mov    0x8(%ebp),%eax
   16551:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16557:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dev_close(fs->dev_id);
   1655a:	8b 45 08             	mov    0x8(%ebp),%eax
   1655d:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16563:	83 ec 0c             	sub    $0xc,%esp
   16566:	50                   	push   %eax
   16567:	e8 45 db ff ff       	call   140b1 <dev_close>
   1656c:	83 c4 10             	add    $0x10,%esp
    memory_free_page((uint32_t)fat->fat_buffer);
   1656f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16572:	8b 40 24             	mov    0x24(%eax),%eax
   16575:	83 ec 0c             	sub    $0xc,%esp
   16578:	50                   	push   %eax
   16579:	e8 0d a7 ff ff       	call   10c8b <memory_free_page>
   1657e:	83 c4 10             	add    $0x10,%esp
}
   16581:	90                   	nop
   16582:	c9                   	leave  
   16583:	c3                   	ret    

00016584 <read_from_diritem>:

/**
 * @brief 从diritem中读取相应的文件信息
 */
static void read_from_diritem (fat_t * fat, file_t * file, diritem_t * item, int index) {
   16584:	55                   	push   %ebp
   16585:	89 e5                	mov    %esp,%ebp
    file->type = diritem_get_type(item);
   16587:	ff 75 10             	push   0x10(%ebp)
   1658a:	e8 da f9 ff ff       	call   15f69 <diritem_get_type>
   1658f:	83 c4 04             	add    $0x4,%esp
   16592:	8b 55 0c             	mov    0xc(%ebp),%edx
   16595:	89 42 20             	mov    %eax,0x20(%edx)
    file->size = (int)item->DIR_FileSize;
   16598:	8b 45 10             	mov    0x10(%ebp),%eax
   1659b:	8b 50 1c             	mov    0x1c(%eax),%edx
   1659e:	8b 45 0c             	mov    0xc(%ebp),%eax
   165a1:	89 50 24             	mov    %edx,0x24(%eax)
    file->pos = 0;
   165a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   165a7:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   165ae:	8b 45 10             	mov    0x10(%ebp),%eax
   165b1:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   165b5:	0f b7 c0             	movzwl %ax,%eax
   165b8:	c1 e0 10             	shl    $0x10,%eax
   165bb:	89 c2                	mov    %eax,%edx
   165bd:	8b 45 10             	mov    0x10(%ebp),%eax
   165c0:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   165c4:	0f b7 c0             	movzwl %ax,%eax
   165c7:	09 c2                	or     %eax,%edx
   165c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   165cc:	89 50 34             	mov    %edx,0x34(%eax)
    file->cblk = file->sblk;
   165cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   165d2:	8b 50 34             	mov    0x34(%eax),%edx
   165d5:	8b 45 0c             	mov    0xc(%ebp),%eax
   165d8:	89 50 38             	mov    %edx,0x38(%eax)
    file->p_index = index;
   165db:	8b 45 0c             	mov    0xc(%ebp),%eax
   165de:	8b 55 14             	mov    0x14(%ebp),%edx
   165e1:	89 50 3c             	mov    %edx,0x3c(%eax)
}
   165e4:	90                   	nop
   165e5:	c9                   	leave  
   165e6:	c3                   	ret    

000165e7 <fatfs_open>:

/**
 * @brief 打开指定的文件
 */
int fatfs_open (struct _fs_t * fs, const char * path, file_t * file) {
   165e7:	55                   	push   %ebp
   165e8:	89 e5                	mov    %esp,%ebp
   165ea:	83 ec 48             	sub    $0x48,%esp
    fat_t * fat = (fat_t *)fs->data;
   165ed:	8b 45 08             	mov    0x8(%ebp),%eax
   165f0:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   165f6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    diritem_t * file_item = (diritem_t *)0;
   165f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;
   16600:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16607:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1660e:	eb 6f                	jmp    1667f <fatfs_open+0x98>
        diritem_t * item = read_dir_entry(fat, i);
   16610:	83 ec 08             	sub    $0x8,%esp
   16613:	ff 75 ec             	push   -0x14(%ebp)
   16616:	ff 75 e8             	push   -0x18(%ebp)
   16619:	e8 8f f9 ff ff       	call   15fad <read_dir_entry>
   1661e:	83 c4 10             	add    $0x10,%esp
   16621:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   16624:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16628:	75 0a                	jne    16634 <fatfs_open+0x4d>
            return -1;
   1662a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1662f:	e9 3f 01 00 00       	jmp    16773 <fatfs_open+0x18c>
        }

         // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16634:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16637:	0f b6 00             	movzbl (%eax),%eax
   1663a:	84 c0                	test   %al,%al
   1663c:	75 08                	jne    16646 <fatfs_open+0x5f>
            p_index = i;
   1663e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16641:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   16644:	eb 46                	jmp    1668c <fatfs_open+0xa5>
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   16646:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16649:	0f b6 00             	movzbl (%eax),%eax
   1664c:	3c e5                	cmp    $0xe5,%al
   1664e:	75 08                	jne    16658 <fatfs_open+0x71>
            p_index = i;
   16650:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16653:	89 45 f0             	mov    %eax,-0x10(%ebp)
            continue;
   16656:	eb 23                	jmp    1667b <fatfs_open+0x94>
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path)) {
   16658:	83 ec 08             	sub    $0x8,%esp
   1665b:	ff 75 0c             	push   0xc(%ebp)
   1665e:	ff 75 e4             	push   -0x1c(%ebp)
   16661:	e8 ab f7 ff ff       	call   15e11 <diritem_name_match>
   16666:	83 c4 10             	add    $0x10,%esp
   16669:	85 c0                	test   %eax,%eax
   1666b:	74 0e                	je     1667b <fatfs_open+0x94>
            file_item = item;
   1666d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16670:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   16673:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16676:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   16679:	eb 11                	jmp    1668c <fatfs_open+0xa5>
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   1667b:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   1667f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16682:	8b 50 14             	mov    0x14(%eax),%edx
   16685:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16688:	39 c2                	cmp    %eax,%edx
   1668a:	77 84                	ja     16610 <fatfs_open+0x29>
        }
    }

    if (file_item) {
   1668c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16690:	74 62                	je     166f4 <fatfs_open+0x10d>
        read_from_diritem(fat, file, file_item, p_index);
   16692:	ff 75 f0             	push   -0x10(%ebp)
   16695:	ff 75 f4             	push   -0xc(%ebp)
   16698:	ff 75 10             	push   0x10(%ebp)
   1669b:	ff 75 e8             	push   -0x18(%ebp)
   1669e:	e8 e1 fe ff ff       	call   16584 <read_from_diritem>
   166a3:	83 c4 10             	add    $0x10,%esp

        // 如果要截断，则清空
        if (file->mode & O_TRUNC) {
   166a6:	8b 45 10             	mov    0x10(%ebp),%eax
   166a9:	8b 40 40             	mov    0x40(%eax),%eax
   166ac:	25 00 04 00 00       	and    $0x400,%eax
   166b1:	85 c0                	test   %eax,%eax
   166b3:	74 38                	je     166ed <fatfs_open+0x106>
            cluster_free_chain(fat, file->sblk);
   166b5:	8b 45 10             	mov    0x10(%ebp),%eax
   166b8:	8b 40 34             	mov    0x34(%eax),%eax
   166bb:	0f b7 c0             	movzwl %ax,%eax
   166be:	83 ec 08             	sub    $0x8,%esp
   166c1:	50                   	push   %eax
   166c2:	ff 75 e8             	push   -0x18(%ebp)
   166c5:	e8 38 f5 ff ff       	call   15c02 <cluster_free_chain>
   166ca:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   166cd:	8b 45 10             	mov    0x10(%ebp),%eax
   166d0:	c7 40 34 f8 ff 00 00 	movl   $0xfff8,0x34(%eax)
   166d7:	8b 45 10             	mov    0x10(%ebp),%eax
   166da:	8b 50 34             	mov    0x34(%eax),%edx
   166dd:	8b 45 10             	mov    0x10(%ebp),%eax
   166e0:	89 50 38             	mov    %edx,0x38(%eax)
            file->size = 0;
   166e3:	8b 45 10             	mov    0x10(%ebp),%eax
   166e6:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        }
        return 0;
   166ed:	b8 00 00 00 00       	mov    $0x0,%eax
   166f2:	eb 7f                	jmp    16773 <fatfs_open+0x18c>
    } else if ((file->mode & O_CREAT) && (p_index >= 0)) {
   166f4:	8b 45 10             	mov    0x10(%ebp),%eax
   166f7:	8b 40 40             	mov    0x40(%eax),%eax
   166fa:	25 00 02 00 00       	and    $0x200,%eax
   166ff:	85 c0                	test   %eax,%eax
   16701:	74 6b                	je     1676e <fatfs_open+0x187>
   16703:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16707:	78 65                	js     1676e <fatfs_open+0x187>
        // 创建一个空闲的diritem项
        diritem_t item;
        diritem_init(&item, 0, path);
   16709:	83 ec 04             	sub    $0x4,%esp
   1670c:	ff 75 0c             	push   0xc(%ebp)
   1670f:	6a 00                	push   $0x0
   16711:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16714:	50                   	push   %eax
   16715:	e8 2e f7 ff ff       	call   15e48 <diritem_init>
   1671a:	83 c4 10             	add    $0x10,%esp
        int err = write_dir_entry(fat, &item, p_index);
   1671d:	83 ec 04             	sub    $0x4,%esp
   16720:	ff 75 f0             	push   -0x10(%ebp)
   16723:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16726:	50                   	push   %eax
   16727:	ff 75 e8             	push   -0x18(%ebp)
   1672a:	e8 fe f8 ff ff       	call   1602d <write_dir_entry>
   1672f:	83 c4 10             	add    $0x10,%esp
   16732:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   16735:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   16739:	79 17                	jns    16752 <fatfs_open+0x16b>
            log_printf("create file failed.");
   1673b:	83 ec 0c             	sub    $0xc,%esp
   1673e:	68 ee 9b 01 00       	push   $0x19bee
   16743:	e8 c7 22 00 00       	call   18a0f <log_printf>
   16748:	83 c4 10             	add    $0x10,%esp
            return -1;
   1674b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16750:	eb 21                	jmp    16773 <fatfs_open+0x18c>
        }

        read_from_diritem(fat, file, &item, p_index);
   16752:	ff 75 f0             	push   -0x10(%ebp)
   16755:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16758:	50                   	push   %eax
   16759:	ff 75 10             	push   0x10(%ebp)
   1675c:	ff 75 e8             	push   -0x18(%ebp)
   1675f:	e8 20 fe ff ff       	call   16584 <read_from_diritem>
   16764:	83 c4 10             	add    $0x10,%esp
        return 0;
   16767:	b8 00 00 00 00       	mov    $0x0,%eax
   1676c:	eb 05                	jmp    16773 <fatfs_open+0x18c>
    }

    return -1;
   1676e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16773:	c9                   	leave  
   16774:	c3                   	ret    

00016775 <fatfs_read>:

/**
 * @brief 读了文件
 */
int fatfs_read (char * buf, int size, file_t * file) {
   16775:	55                   	push   %ebp
   16776:	89 e5                	mov    %esp,%ebp
   16778:	53                   	push   %ebx
   16779:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   1677c:	8b 45 10             	mov    0x10(%ebp),%eax
   1677f:	8b 40 44             	mov    0x44(%eax),%eax
   16782:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16788:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 调整读取量，不要超过文件总量
    uint32_t nbytes = size;
   1678b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1678e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   16791:	8b 45 10             	mov    0x10(%ebp),%eax
   16794:	8b 40 30             	mov    0x30(%eax),%eax
   16797:	89 c2                	mov    %eax,%edx
   16799:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1679c:	01 c2                	add    %eax,%edx
   1679e:	8b 45 10             	mov    0x10(%ebp),%eax
   167a1:	8b 40 24             	mov    0x24(%eax),%eax
   167a4:	39 c2                	cmp    %eax,%edx
   167a6:	76 15                	jbe    167bd <fatfs_read+0x48>
        nbytes = file->size - file->pos;
   167a8:	8b 45 10             	mov    0x10(%ebp),%eax
   167ab:	8b 50 24             	mov    0x24(%eax),%edx
   167ae:	8b 45 10             	mov    0x10(%ebp),%eax
   167b1:	8b 40 30             	mov    0x30(%eax),%eax
   167b4:	89 c1                	mov    %eax,%ecx
   167b6:	89 d0                	mov    %edx,%eax
   167b8:	29 c8                	sub    %ecx,%eax
   167ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   167bd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0) {
   167c4:	e9 41 01 00 00       	jmp    1690a <fatfs_read+0x195>
        uint32_t curr_read = nbytes;
   167c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   167cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   167cf:	8b 45 10             	mov    0x10(%ebp),%eax
   167d2:	8b 40 30             	mov    0x30(%eax),%eax
   167d5:	89 c2                	mov    %eax,%edx
   167d7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167da:	8b 48 20             	mov    0x20(%eax),%ecx
   167dd:	89 d0                	mov    %edx,%eax
   167df:	ba 00 00 00 00       	mov    $0x0,%edx
   167e4:	f7 f1                	div    %ecx
   167e6:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  // 从2开始
   167e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167ec:	8b 50 1c             	mov    0x1c(%eax),%edx
   167ef:	8b 45 10             	mov    0x10(%ebp),%eax
   167f2:	8b 40 38             	mov    0x38(%eax),%eax
   167f5:	83 e8 02             	sub    $0x2,%eax
   167f8:	89 c1                	mov    %eax,%ecx
   167fa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167fd:	8b 40 10             	mov    0x10(%eax),%eax
   16800:	0f af c1             	imul   %ecx,%eax
   16803:	01 d0                	add    %edx,%eax
   16805:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 如果是整簇, 只读一簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   16808:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1680c:	75 4c                	jne    1685a <fatfs_read+0xe5>
   1680e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16811:	8b 40 20             	mov    0x20(%eax),%eax
   16814:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16817:	75 41                	jne    1685a <fatfs_read+0xe5>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16819:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1681c:	8b 40 10             	mov    0x10(%eax),%eax
   1681f:	89 c1                	mov    %eax,%ecx
   16821:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16824:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16827:	8b 40 2c             	mov    0x2c(%eax),%eax
   1682a:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16830:	51                   	push   %ecx
   16831:	ff 75 08             	push   0x8(%ebp)
   16834:	52                   	push   %edx
   16835:	50                   	push   %eax
   16836:	e8 92 d7 ff ff       	call   13fcd <dev_read>
   1683b:	83 c4 10             	add    $0x10,%esp
   1683e:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   16841:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   16845:	79 08                	jns    1684f <fatfs_read+0xda>
                return total_read;
   16847:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1684a:	e9 c8 00 00 00       	jmp    16917 <fatfs_read+0x1a2>
            }

            curr_read = fat->cluster_byte_size;
   1684f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16852:	8b 40 20             	mov    0x20(%eax),%eax
   16855:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   16858:	eb 7d                	jmp    168d7 <fatfs_read+0x162>
        } else {
            // 如果跨簇，只读第一个簇内的一部分
            if (cluster_offset + curr_read > fat->cluster_byte_size) {
   1685a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1685d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16860:	01 c2                	add    %eax,%edx
   16862:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16865:	8b 40 20             	mov    0x20(%eax),%eax
   16868:	39 c2                	cmp    %eax,%edx
   1686a:	76 0c                	jbe    16878 <fatfs_read+0x103>
                curr_read = fat->cluster_byte_size - cluster_offset;
   1686c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1686f:	8b 40 20             	mov    0x20(%eax),%eax
   16872:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16875:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            // 读取整个簇，然后从中拷贝
            fat->curr_sector = -1;
   16878:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1687b:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16882:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16885:	8b 40 10             	mov    0x10(%eax),%eax
   16888:	89 c3                	mov    %eax,%ebx
   1688a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1688d:	8b 48 24             	mov    0x24(%eax),%ecx
   16890:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16893:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16896:	8b 40 2c             	mov    0x2c(%eax),%eax
   16899:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1689f:	53                   	push   %ebx
   168a0:	51                   	push   %ecx
   168a1:	52                   	push   %edx
   168a2:	50                   	push   %eax
   168a3:	e8 25 d7 ff ff       	call   13fcd <dev_read>
   168a8:	83 c4 10             	add    $0x10,%esp
   168ab:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   168ae:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   168b2:	79 05                	jns    168b9 <fatfs_read+0x144>
                return total_read;
   168b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   168b7:	eb 5e                	jmp    16917 <fatfs_read+0x1a2>
            }
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   168b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
   168bf:	8b 4a 24             	mov    0x24(%edx),%ecx
   168c2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   168c5:	01 ca                	add    %ecx,%edx
   168c7:	83 ec 04             	sub    $0x4,%esp
   168ca:	50                   	push   %eax
   168cb:	52                   	push   %edx
   168cc:	ff 75 08             	push   0x8(%ebp)
   168cf:	e8 42 1b 00 00       	call   18416 <kernel_memcpy>
   168d4:	83 c4 10             	add    $0x10,%esp
        }

        buf += curr_read;
   168d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168da:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   168dd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168e0:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   168e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168e6:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 前移文件指针
		int err = move_file_pos(file, fat, curr_read, 0);
   168e9:	6a 00                	push   $0x0
   168eb:	ff 75 ec             	push   -0x14(%ebp)
   168ee:	ff 75 e8             	push   -0x18(%ebp)
   168f1:	ff 75 10             	push   0x10(%ebp)
   168f4:	e8 4d f9 ff ff       	call   16246 <move_file_pos>
   168f9:	83 c4 10             	add    $0x10,%esp
   168fc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (err < 0) {
   168ff:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16903:	79 05                	jns    1690a <fatfs_read+0x195>
            return total_read;
   16905:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16908:	eb 0d                	jmp    16917 <fatfs_read+0x1a2>
    while (nbytes > 0) {
   1690a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1690e:	0f 85 b5 fe ff ff    	jne    167c9 <fatfs_read+0x54>
        }
	}

    return total_read;
   16914:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16917:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1691a:	c9                   	leave  
   1691b:	c3                   	ret    

0001691c <fatfs_write>:

/**
 * @brief 写文件数据
 */
int fatfs_write (char * buf, int size, file_t * file) {
   1691c:	55                   	push   %ebp
   1691d:	89 e5                	mov    %esp,%ebp
   1691f:	53                   	push   %ebx
   16920:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   16923:	8b 45 10             	mov    0x10(%ebp),%eax
   16926:	8b 40 44             	mov    0x44(%eax),%eax
   16929:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1692f:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 如果文件大小不够，则先扩展文件大小
    if (file->pos + size > file->size) {
   16932:	8b 45 10             	mov    0x10(%ebp),%eax
   16935:	8b 50 30             	mov    0x30(%eax),%edx
   16938:	8b 45 0c             	mov    0xc(%ebp),%eax
   1693b:	01 d0                	add    %edx,%eax
   1693d:	89 c2                	mov    %eax,%edx
   1693f:	8b 45 10             	mov    0x10(%ebp),%eax
   16942:	8b 40 24             	mov    0x24(%eax),%eax
   16945:	39 c2                	cmp    %eax,%edx
   16947:	76 3e                	jbe    16987 <fatfs_write+0x6b>
        int inc_size = file->pos + size - file->size;
   16949:	8b 45 10             	mov    0x10(%ebp),%eax
   1694c:	8b 50 30             	mov    0x30(%eax),%edx
   1694f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16952:	01 d0                	add    %edx,%eax
   16954:	89 c1                	mov    %eax,%ecx
   16956:	8b 45 10             	mov    0x10(%ebp),%eax
   16959:	8b 50 24             	mov    0x24(%eax),%edx
   1695c:	89 c8                	mov    %ecx,%eax
   1695e:	29 d0                	sub    %edx,%eax
   16960:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = expand_file(file, inc_size);
   16963:	83 ec 08             	sub    $0x8,%esp
   16966:	ff 75 e4             	push   -0x1c(%ebp)
   16969:	ff 75 10             	push   0x10(%ebp)
   1696c:	e8 66 f7 ff ff       	call   160d7 <expand_file>
   16971:	83 c4 10             	add    $0x10,%esp
   16974:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   16977:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1697b:	79 0a                	jns    16987 <fatfs_write+0x6b>
            return 0;
   1697d:	b8 00 00 00 00       	mov    $0x0,%eax
   16982:	e9 ae 01 00 00       	jmp    16b35 <fatfs_write+0x219>
        }
    }

    uint32_t nbytes = size;
   16987:	8b 45 0c             	mov    0xc(%ebp),%eax
   1698a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   1698d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	while (nbytes) {
   16994:	e9 8f 01 00 00       	jmp    16b28 <fatfs_write+0x20c>
        // 每次写的数据量取决于当前簇中剩余的空间，以及size的量综合
        uint32_t curr_write = nbytes;
   16999:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1699c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   1699f:	8b 45 10             	mov    0x10(%ebp),%eax
   169a2:	8b 40 30             	mov    0x30(%eax),%eax
   169a5:	89 c2                	mov    %eax,%edx
   169a7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169aa:	8b 48 20             	mov    0x20(%eax),%ecx
   169ad:	89 d0                	mov    %edx,%eax
   169af:	ba 00 00 00 00       	mov    $0x0,%edx
   169b4:	f7 f1                	div    %ecx
   169b6:	89 55 dc             	mov    %edx,-0x24(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  // 从2开始
   169b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169bc:	8b 50 1c             	mov    0x1c(%eax),%edx
   169bf:	8b 45 10             	mov    0x10(%ebp),%eax
   169c2:	8b 40 38             	mov    0x38(%eax),%eax
   169c5:	83 e8 02             	sub    $0x2,%eax
   169c8:	89 c1                	mov    %eax,%ecx
   169ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169cd:	8b 40 10             	mov    0x10(%eax),%eax
   169d0:	0f af c1             	imul   %ecx,%eax
   169d3:	01 d0                	add    %edx,%eax
   169d5:	89 45 d8             	mov    %eax,-0x28(%ebp)

        // 如果是整簇, 写整簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   169d8:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   169dc:	75 4f                	jne    16a2d <fatfs_write+0x111>
   169de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169e1:	8b 40 20             	mov    0x20(%eax),%eax
   169e4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   169e7:	75 44                	jne    16a2d <fatfs_write+0x111>
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   169e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ec:	8b 40 10             	mov    0x10(%eax),%eax
   169ef:	89 c1                	mov    %eax,%ecx
   169f1:	8b 55 d8             	mov    -0x28(%ebp),%edx
   169f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169f7:	8b 40 2c             	mov    0x2c(%eax),%eax
   169fa:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a00:	51                   	push   %ecx
   16a01:	ff 75 08             	push   0x8(%ebp)
   16a04:	52                   	push   %edx
   16a05:	50                   	push   %eax
   16a06:	e8 0e d6 ff ff       	call   14019 <dev_write>
   16a0b:	83 c4 10             	add    $0x10,%esp
   16a0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   16a11:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16a15:	79 08                	jns    16a1f <fatfs_write+0x103>
                return total_write;
   16a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a1a:	e9 16 01 00 00       	jmp    16b35 <fatfs_write+0x219>
            }

            curr_write = fat->cluster_byte_size;
   16a1f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a22:	8b 40 20             	mov    0x20(%eax),%eax
   16a25:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   16a28:	e9 b7 00 00 00       	jmp    16ae4 <fatfs_write+0x1c8>
        } else {
            // 如果跨簇，只写第一个簇内的一部分
            if (cluster_offset + curr_write > fat->cluster_byte_size) {
   16a2d:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16a30:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a33:	01 c2                	add    %eax,%edx
   16a35:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a38:	8b 40 20             	mov    0x20(%eax),%eax
   16a3b:	39 c2                	cmp    %eax,%edx
   16a3d:	76 0c                	jbe    16a4b <fatfs_write+0x12f>
                curr_write = fat->cluster_byte_size - cluster_offset;
   16a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a42:	8b 40 20             	mov    0x20(%eax),%eax
   16a45:	2b 45 dc             	sub    -0x24(%ebp),%eax
   16a48:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   16a4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a4e:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16a55:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a58:	8b 40 10             	mov    0x10(%eax),%eax
   16a5b:	89 c3                	mov    %eax,%ebx
   16a5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a60:	8b 48 24             	mov    0x24(%eax),%ecx
   16a63:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16a66:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a69:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a6c:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a72:	53                   	push   %ebx
   16a73:	51                   	push   %ecx
   16a74:	52                   	push   %edx
   16a75:	50                   	push   %eax
   16a76:	e8 52 d5 ff ff       	call   13fcd <dev_read>
   16a7b:	83 c4 10             	add    $0x10,%esp
   16a7e:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16a81:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16a85:	79 08                	jns    16a8f <fatfs_write+0x173>
                return total_write;
   16a87:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a8a:	e9 a6 00 00 00       	jmp    16b35 <fatfs_write+0x219>
            }
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);        
   16a8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a92:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16a95:	8b 4a 24             	mov    0x24(%edx),%ecx
   16a98:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16a9b:	01 ca                	add    %ecx,%edx
   16a9d:	83 ec 04             	sub    $0x4,%esp
   16aa0:	50                   	push   %eax
   16aa1:	ff 75 08             	push   0x8(%ebp)
   16aa4:	52                   	push   %edx
   16aa5:	e8 6c 19 00 00       	call   18416 <kernel_memcpy>
   16aaa:	83 c4 10             	add    $0x10,%esp
            
            // 写整个簇，然后从中拷贝
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16aad:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ab0:	8b 40 10             	mov    0x10(%eax),%eax
   16ab3:	89 c3                	mov    %eax,%ebx
   16ab5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ab8:	8b 48 24             	mov    0x24(%eax),%ecx
   16abb:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16abe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ac1:	8b 40 2c             	mov    0x2c(%eax),%eax
   16ac4:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16aca:	53                   	push   %ebx
   16acb:	51                   	push   %ecx
   16acc:	52                   	push   %edx
   16acd:	50                   	push   %eax
   16ace:	e8 46 d5 ff ff       	call   14019 <dev_write>
   16ad3:	83 c4 10             	add    $0x10,%esp
   16ad6:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16ad9:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16add:	79 05                	jns    16ae4 <fatfs_write+0x1c8>
                return total_write;
   16adf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ae2:	eb 51                	jmp    16b35 <fatfs_write+0x219>
            }
        }

        buf += curr_write;
   16ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16ae7:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   16aea:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16aed:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16af0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16af3:	01 45 f0             	add    %eax,-0x10(%ebp)
        file->size += curr_write;
   16af6:	8b 45 10             	mov    0x10(%ebp),%eax
   16af9:	8b 50 24             	mov    0x24(%eax),%edx
   16afc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16aff:	01 c2                	add    %eax,%edx
   16b01:	8b 45 10             	mov    0x10(%ebp),%eax
   16b04:	89 50 24             	mov    %edx,0x24(%eax)

        // 前移文件指针
		int err = move_file_pos(file, fat, curr_write, 1);
   16b07:	6a 01                	push   $0x1
   16b09:	ff 75 ec             	push   -0x14(%ebp)
   16b0c:	ff 75 e8             	push   -0x18(%ebp)
   16b0f:	ff 75 10             	push   0x10(%ebp)
   16b12:	e8 2f f7 ff ff       	call   16246 <move_file_pos>
   16b17:	83 c4 10             	add    $0x10,%esp
   16b1a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (err < 0) {
   16b1d:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   16b21:	79 05                	jns    16b28 <fatfs_write+0x20c>
            return total_write;
   16b23:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b26:	eb 0d                	jmp    16b35 <fatfs_write+0x219>
	while (nbytes) {
   16b28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16b2c:	0f 85 67 fe ff ff    	jne    16999 <fatfs_write+0x7d>
        }
    }

    return total_write;
   16b32:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16b35:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16b38:	c9                   	leave  
   16b39:	c3                   	ret    

00016b3a <fatfs_close>:

/**
 * @brief 关闭文件
 */
void fatfs_close (file_t * file) {
   16b3a:	55                   	push   %ebp
   16b3b:	89 e5                	mov    %esp,%ebp
   16b3d:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY) {
   16b40:	8b 45 08             	mov    0x8(%ebp),%eax
   16b43:	8b 40 40             	mov    0x40(%eax),%eax
   16b46:	85 c0                	test   %eax,%eax
   16b48:	74 74                	je     16bbe <fatfs_close+0x84>
        return;
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16b4a:	8b 45 08             	mov    0x8(%ebp),%eax
   16b4d:	8b 40 44             	mov    0x44(%eax),%eax
   16b50:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16b56:	89 45 f4             	mov    %eax,-0xc(%ebp)

    diritem_t * item = read_dir_entry(fat, file->p_index);
   16b59:	8b 45 08             	mov    0x8(%ebp),%eax
   16b5c:	8b 40 3c             	mov    0x3c(%eax),%eax
   16b5f:	83 ec 08             	sub    $0x8,%esp
   16b62:	50                   	push   %eax
   16b63:	ff 75 f4             	push   -0xc(%ebp)
   16b66:	e8 42 f4 ff ff       	call   15fad <read_dir_entry>
   16b6b:	83 c4 10             	add    $0x10,%esp
   16b6e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0) {
   16b71:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16b75:	74 4a                	je     16bc1 <fatfs_close+0x87>
        return;
    }

    item->DIR_FileSize = file->size;
   16b77:	8b 45 08             	mov    0x8(%ebp),%eax
   16b7a:	8b 50 24             	mov    0x24(%eax),%edx
   16b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b80:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t )(file->sblk >> 16);
   16b83:	8b 45 08             	mov    0x8(%ebp),%eax
   16b86:	8b 40 34             	mov    0x34(%eax),%eax
   16b89:	c1 f8 10             	sar    $0x10,%eax
   16b8c:	89 c2                	mov    %eax,%edx
   16b8e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b91:	66 89 50 14          	mov    %dx,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(file->sblk & 0xFFFF);
   16b95:	8b 45 08             	mov    0x8(%ebp),%eax
   16b98:	8b 40 34             	mov    0x34(%eax),%eax
   16b9b:	89 c2                	mov    %eax,%edx
   16b9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ba0:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16ba4:	8b 45 08             	mov    0x8(%ebp),%eax
   16ba7:	8b 40 3c             	mov    0x3c(%eax),%eax
   16baa:	83 ec 04             	sub    $0x4,%esp
   16bad:	50                   	push   %eax
   16bae:	ff 75 f0             	push   -0x10(%ebp)
   16bb1:	ff 75 f4             	push   -0xc(%ebp)
   16bb4:	e8 74 f4 ff ff       	call   1602d <write_dir_entry>
   16bb9:	83 c4 10             	add    $0x10,%esp
   16bbc:	eb 04                	jmp    16bc2 <fatfs_close+0x88>
        return;
   16bbe:	90                   	nop
   16bbf:	eb 01                	jmp    16bc2 <fatfs_close+0x88>
        return;
   16bc1:	90                   	nop
}
   16bc2:	c9                   	leave  
   16bc3:	c3                   	ret    

00016bc4 <fatfs_seek>:

/**
 * @brief 文件读写位置的调整
 */
int fatfs_seek (file_t * file, uint32_t offset, int dir) {
   16bc4:	55                   	push   %ebp
   16bc5:	89 e5                	mov    %esp,%ebp
   16bc7:	83 ec 28             	sub    $0x28,%esp
     // 只支持基于文件开头的定位
    if (dir != 0) {
   16bca:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16bce:	74 0a                	je     16bda <fatfs_seek+0x16>
        return -1;
   16bd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bd5:	e9 c7 00 00 00       	jmp    16ca1 <fatfs_seek+0xdd>
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16bda:	8b 45 08             	mov    0x8(%ebp),%eax
   16bdd:	8b 40 44             	mov    0x44(%eax),%eax
   16be0:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16be6:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t curr_cluster = file->sblk;
   16be9:	8b 45 08             	mov    0x8(%ebp),%eax
   16bec:	8b 40 34             	mov    0x34(%eax),%eax
   16bef:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16bf3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16bfa:	8b 45 0c             	mov    0xc(%ebp),%eax
   16bfd:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (offset_to_move > 0) {
   16c00:	eb 7d                	jmp    16c7f <fatfs_seek+0xbb>
        uint32_t c_off = curr_pos % fat->cluster_byte_size;
   16c02:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c05:	8b 48 20             	mov    0x20(%eax),%ecx
   16c08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c0b:	ba 00 00 00 00       	mov    $0x0,%edx
   16c10:	f7 f1                	div    %ecx
   16c12:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t curr_move = offset_to_move;
   16c15:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c18:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 不超过一簇，直接调整位置，无需跑到下一簇
        if (c_off + curr_move < fat->cluster_byte_size) {
   16c1b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16c1e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c21:	01 c2                	add    %eax,%edx
   16c23:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c26:	8b 40 20             	mov    0x20(%eax),%eax
   16c29:	39 c2                	cmp    %eax,%edx
   16c2b:	73 08                	jae    16c35 <fatfs_seek+0x71>
            curr_pos += curr_move;
   16c2d:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c30:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16c33:	eb 54                	jmp    16c89 <fatfs_seek+0xc5>
        }

        // 超过一簇，只在当前簇内移动
        curr_move = fat->cluster_byte_size - c_off;
   16c35:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c38:	8b 40 20             	mov    0x20(%eax),%eax
   16c3b:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16c3e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16c41:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c44:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16c47:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c4a:	29 45 ec             	sub    %eax,-0x14(%ebp)

        // 取下一簇
        curr_cluster = cluster_get_next(fat, curr_cluster);
   16c4d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c51:	83 ec 08             	sub    $0x8,%esp
   16c54:	50                   	push   %eax
   16c55:	ff 75 e8             	push   -0x18(%ebp)
   16c58:	e8 b8 ed ff ff       	call   15a15 <cluster_get_next>
   16c5d:	83 c4 10             	add    $0x10,%esp
   16c60:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(curr_cluster)) {
   16c64:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c68:	83 ec 0c             	sub    $0xc,%esp
   16c6b:	50                   	push   %eax
   16c6c:	e8 7b ed ff ff       	call   159ec <cluster_is_valid>
   16c71:	83 c4 10             	add    $0x10,%esp
   16c74:	85 c0                	test   %eax,%eax
   16c76:	75 07                	jne    16c7f <fatfs_seek+0xbb>
            return -1;
   16c78:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c7d:	eb 22                	jmp    16ca1 <fatfs_seek+0xdd>
    while (offset_to_move > 0) {
   16c7f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16c83:	0f 85 79 ff ff ff    	jne    16c02 <fatfs_seek+0x3e>
        }
    }

    // 最后记录一下位置
    file->pos = curr_pos;
   16c89:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   16c8f:	89 50 30             	mov    %edx,0x30(%eax)
    file->cblk = curr_cluster;
   16c92:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16c96:	8b 45 08             	mov    0x8(%ebp),%eax
   16c99:	89 50 38             	mov    %edx,0x38(%eax)
    return 0;
   16c9c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16ca1:	c9                   	leave  
   16ca2:	c3                   	ret    

00016ca3 <fatfs_stat>:

int fatfs_stat (file_t * file, struct stat *st) {
   16ca3:	55                   	push   %ebp
   16ca4:	89 e5                	mov    %esp,%ebp
    return -1;
   16ca6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16cab:	5d                   	pop    %ebp
   16cac:	c3                   	ret    

00016cad <fatfs_opendir>:

/**
 * @brief 打开目录。只是简单地读取位置重设为0
 */
int fatfs_opendir (struct _fs_t * fs,const char * name, DIR * dir) {
   16cad:	55                   	push   %ebp
   16cae:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16cb0:	8b 45 10             	mov    0x10(%ebp),%eax
   16cb3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16cb9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16cbe:	5d                   	pop    %ebp
   16cbf:	c3                   	ret    

00016cc0 <fatfs_readdir>:

/**
 * @brief 读取一个目录项
 */
int fatfs_readdir (struct _fs_t * fs,DIR* dir, struct dirent * dirent) {
   16cc0:	55                   	push   %ebp
   16cc1:	89 e5                	mov    %esp,%ebp
   16cc3:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16cc6:	8b 45 08             	mov    0x8(%ebp),%eax
   16cc9:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16ccf:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 做一些简单的判断，检查
    while (dir->index < fat->root_ent_cnt) {
   16cd2:	e9 be 00 00 00       	jmp    16d95 <fatfs_readdir+0xd5>
        diritem_t * item = read_dir_entry(fat, dir->index);
   16cd7:	8b 45 0c             	mov    0xc(%ebp),%eax
   16cda:	8b 00                	mov    (%eax),%eax
   16cdc:	83 ec 08             	sub    $0x8,%esp
   16cdf:	50                   	push   %eax
   16ce0:	ff 75 f4             	push   -0xc(%ebp)
   16ce3:	e8 c5 f2 ff ff       	call   15fad <read_dir_entry>
   16ce8:	83 c4 10             	add    $0x10,%esp
   16ceb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16cee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16cf2:	75 0a                	jne    16cfe <fatfs_readdir+0x3e>
            return -1;
   16cf4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16cf9:	e9 b4 00 00 00       	jmp    16db2 <fatfs_readdir+0xf2>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16cfe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d01:	0f b6 00             	movzbl (%eax),%eax
   16d04:	84 c0                	test   %al,%al
   16d06:	0f 84 a0 00 00 00    	je     16dac <fatfs_readdir+0xec>
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] != DIRITEM_NAME_FREE) {
   16d0c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d0f:	0f b6 00             	movzbl (%eax),%eax
   16d12:	3c e5                	cmp    $0xe5,%al
   16d14:	74 72                	je     16d88 <fatfs_readdir+0xc8>
            file_type_t type = diritem_get_type(item);
   16d16:	83 ec 0c             	sub    $0xc,%esp
   16d19:	ff 75 f0             	push   -0x10(%ebp)
   16d1c:	e8 48 f2 ff ff       	call   15f69 <diritem_get_type>
   16d21:	83 c4 10             	add    $0x10,%esp
   16d24:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   16d27:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16d2b:	74 06                	je     16d33 <fatfs_readdir+0x73>
   16d2d:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16d31:	75 55                	jne    16d88 <fatfs_readdir+0xc8>
                dirent->index = dir->index++;
   16d33:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d36:	8b 00                	mov    (%eax),%eax
   16d38:	8d 48 01             	lea    0x1(%eax),%ecx
   16d3b:	8b 55 0c             	mov    0xc(%ebp),%edx
   16d3e:	89 0a                	mov    %ecx,(%edx)
   16d40:	8b 55 10             	mov    0x10(%ebp),%edx
   16d43:	89 02                	mov    %eax,(%edx)
                dirent->type = diritem_get_type(item);
   16d45:	83 ec 0c             	sub    $0xc,%esp
   16d48:	ff 75 f0             	push   -0x10(%ebp)
   16d4b:	e8 19 f2 ff ff       	call   15f69 <diritem_get_type>
   16d50:	83 c4 10             	add    $0x10,%esp
   16d53:	89 c2                	mov    %eax,%edx
   16d55:	8b 45 10             	mov    0x10(%ebp),%eax
   16d58:	89 50 04             	mov    %edx,0x4(%eax)
                dirent->size = item->DIR_FileSize;
   16d5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d5e:	8b 40 1c             	mov    0x1c(%eax),%eax
   16d61:	89 c2                	mov    %eax,%edx
   16d63:	8b 45 10             	mov    0x10(%ebp),%eax
   16d66:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
                diritem_get_name(item, dirent->name);
   16d6c:	8b 45 10             	mov    0x10(%ebp),%eax
   16d6f:	83 c0 08             	add    $0x8,%eax
   16d72:	83 ec 08             	sub    $0x8,%esp
   16d75:	50                   	push   %eax
   16d76:	ff 75 f0             	push   -0x10(%ebp)
   16d79:	e8 58 f1 ff ff       	call   15ed6 <diritem_get_name>
   16d7e:	83 c4 10             	add    $0x10,%esp
                return 0;
   16d81:	b8 00 00 00 00       	mov    $0x0,%eax
   16d86:	eb 2a                	jmp    16db2 <fatfs_readdir+0xf2>
            }
        }

        dir->index++;
   16d88:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d8b:	8b 00                	mov    (%eax),%eax
   16d8d:	8d 50 01             	lea    0x1(%eax),%edx
   16d90:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d93:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16d95:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d98:	8b 00                	mov    (%eax),%eax
   16d9a:	89 c2                	mov    %eax,%edx
   16d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16d9f:	8b 40 14             	mov    0x14(%eax),%eax
   16da2:	39 c2                	cmp    %eax,%edx
   16da4:	0f 82 2d ff ff ff    	jb     16cd7 <fatfs_readdir+0x17>
   16daa:	eb 01                	jmp    16dad <fatfs_readdir+0xed>
            break;
   16dac:	90                   	nop
    }

    return -1;
   16dad:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16db2:	c9                   	leave  
   16db3:	c3                   	ret    

00016db4 <fatfs_closedir>:

/**
 * @brief 关闭文件扫描读取
 */
int fatfs_closedir (struct _fs_t * fs,DIR *dir) {
   16db4:	55                   	push   %ebp
   16db5:	89 e5                	mov    %esp,%ebp
    return 0;
   16db7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16dbc:	5d                   	pop    %ebp
   16dbd:	c3                   	ret    

00016dbe <fatfs_unlink>:

/**
 * @brief 删除文件
 */
int fatfs_unlink (struct _fs_t * fs, const char * path) {
   16dbe:	55                   	push   %ebp
   16dbf:	89 e5                	mov    %esp,%ebp
   16dc1:	83 ec 38             	sub    $0x38,%esp
    fat_t * fat = (fat_t *)fs->data;
   16dc4:	8b 45 08             	mov    0x8(%ebp),%eax
   16dc7:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16dcd:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16dd0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16dd7:	e9 b3 00 00 00       	jmp    16e8f <fatfs_unlink+0xd1>
        diritem_t * item = read_dir_entry(fat, i);
   16ddc:	83 ec 08             	sub    $0x8,%esp
   16ddf:	ff 75 f4             	push   -0xc(%ebp)
   16de2:	ff 75 f0             	push   -0x10(%ebp)
   16de5:	e8 c3 f1 ff ff       	call   15fad <read_dir_entry>
   16dea:	83 c4 10             	add    $0x10,%esp
   16ded:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0) {
   16df0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16df4:	75 0a                	jne    16e00 <fatfs_unlink+0x42>
            return -1;
   16df6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16dfb:	e9 a8 00 00 00       	jmp    16ea8 <fatfs_unlink+0xea>
        }

         // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16e00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e03:	0f b6 00             	movzbl (%eax),%eax
   16e06:	84 c0                	test   %al,%al
   16e08:	0f 84 94 00 00 00    	je     16ea2 <fatfs_unlink+0xe4>
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   16e0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e11:	0f b6 00             	movzbl (%eax),%eax
   16e14:	3c e5                	cmp    $0xe5,%al
   16e16:	74 72                	je     16e8a <fatfs_unlink+0xcc>
            continue;
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path)) {
   16e18:	83 ec 08             	sub    $0x8,%esp
   16e1b:	ff 75 0c             	push   0xc(%ebp)
   16e1e:	ff 75 ec             	push   -0x14(%ebp)
   16e21:	e8 eb ef ff ff       	call   15e11 <diritem_name_match>
   16e26:	83 c4 10             	add    $0x10,%esp
   16e29:	85 c0                	test   %eax,%eax
   16e2b:	74 5e                	je     16e8b <fatfs_unlink+0xcd>
            // 释放簇
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16e2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e30:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16e34:	0f b7 c0             	movzwl %ax,%eax
   16e37:	c1 e0 10             	shl    $0x10,%eax
   16e3a:	89 c2                	mov    %eax,%edx
   16e3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e3f:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16e43:	0f b7 c0             	movzwl %ax,%eax
   16e46:	09 d0                	or     %edx,%eax
   16e48:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16e4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16e4e:	0f b7 c0             	movzwl %ax,%eax
   16e51:	83 ec 08             	sub    $0x8,%esp
   16e54:	50                   	push   %eax
   16e55:	ff 75 f0             	push   -0x10(%ebp)
   16e58:	e8 a5 ed ff ff       	call   15c02 <cluster_free_chain>
   16e5d:	83 c4 10             	add    $0x10,%esp

            // 写diritem项
            diritem_t item;
            kernel_memset(&item, 0, sizeof(diritem_t));
   16e60:	83 ec 04             	sub    $0x4,%esp
   16e63:	6a 20                	push   $0x20
   16e65:	6a 00                	push   $0x0
   16e67:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16e6a:	50                   	push   %eax
   16e6b:	e8 f5 15 00 00       	call   18465 <kernel_memset>
   16e70:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &item, i);
   16e73:	83 ec 04             	sub    $0x4,%esp
   16e76:	ff 75 f4             	push   -0xc(%ebp)
   16e79:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16e7c:	50                   	push   %eax
   16e7d:	ff 75 f0             	push   -0x10(%ebp)
   16e80:	e8 a8 f1 ff ff       	call   1602d <write_dir_entry>
   16e85:	83 c4 10             	add    $0x10,%esp
   16e88:	eb 1e                	jmp    16ea8 <fatfs_unlink+0xea>
            continue;
   16e8a:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16e8b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16e8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e92:	8b 50 14             	mov    0x14(%eax),%edx
   16e95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e98:	39 c2                	cmp    %eax,%edx
   16e9a:	0f 87 3c ff ff ff    	ja     16ddc <fatfs_unlink+0x1e>
   16ea0:	eb 01                	jmp    16ea3 <fatfs_unlink+0xe5>
            break;
   16ea2:	90                   	nop
        }
    }

    return -1;
   16ea3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16ea8:	c9                   	leave  
   16ea9:	c3                   	ret    

00016eaa <file_alloc>:
static mutex_t file_alloc_mutex;                // 访问file_table的互斥信号量

/**
 * @brief 分配一个文件描述符
 */
file_t * file_alloc (void) {
   16eaa:	55                   	push   %ebp
   16eab:	89 e5                	mov    %esp,%ebp
   16ead:	83 ec 18             	sub    $0x18,%esp
    file_t * file = (file_t *)0;
   16eb0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   16eb7:	83 ec 0c             	sub    $0xc,%esp
   16eba:	68 a0 c8 05 00       	push   $0x5c8a0
   16ebf:	e8 9e 0e 00 00       	call   17d62 <mutex_lock>
   16ec4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16ec7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16ece:	eb 47                	jmp    16f17 <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   16ed0:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16ed3:	89 d0                	mov    %edx,%eax
   16ed5:	c1 e0 03             	shl    $0x3,%eax
   16ed8:	01 d0                	add    %edx,%eax
   16eda:	c1 e0 03             	shl    $0x3,%eax
   16edd:	05 a0 88 03 00       	add    $0x388a0,%eax
   16ee2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) {
   16ee5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16ee8:	8b 40 28             	mov    0x28(%eax),%eax
   16eeb:	85 c0                	test   %eax,%eax
   16eed:	75 24                	jne    16f13 <file_alloc+0x69>
			kernel_memset(p_file, 0, sizeof(file_t));
   16eef:	83 ec 04             	sub    $0x4,%esp
   16ef2:	6a 48                	push   $0x48
   16ef4:	6a 00                	push   $0x0
   16ef6:	ff 75 ec             	push   -0x14(%ebp)
   16ef9:	e8 67 15 00 00       	call   18465 <kernel_memset>
   16efe:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   16f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f04:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
			file = p_file;
   16f0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f0e:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   16f11:	eb 0d                	jmp    16f20 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16f13:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   16f17:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   16f1e:	7e b0                	jle    16ed0 <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   16f20:	83 ec 0c             	sub    $0xc,%esp
   16f23:	68 a0 c8 05 00       	push   $0x5c8a0
   16f28:	e8 cc 0e 00 00       	call   17df9 <mutex_unlock>
   16f2d:	83 c4 10             	add    $0x10,%esp
    return file;
   16f30:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16f33:	c9                   	leave  
   16f34:	c3                   	ret    

00016f35 <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free (file_t * file) {
   16f35:	55                   	push   %ebp
   16f36:	89 e5                	mov    %esp,%ebp
   16f38:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16f3b:	83 ec 0c             	sub    $0xc,%esp
   16f3e:	68 a0 c8 05 00       	push   $0x5c8a0
   16f43:	e8 1a 0e 00 00       	call   17d62 <mutex_lock>
   16f48:	83 c4 10             	add    $0x10,%esp
    if (file->ref) {
   16f4b:	8b 45 08             	mov    0x8(%ebp),%eax
   16f4e:	8b 40 28             	mov    0x28(%eax),%eax
   16f51:	85 c0                	test   %eax,%eax
   16f53:	74 0f                	je     16f64 <file_free+0x2f>
        file->ref--;
   16f55:	8b 45 08             	mov    0x8(%ebp),%eax
   16f58:	8b 40 28             	mov    0x28(%eax),%eax
   16f5b:	8d 50 ff             	lea    -0x1(%eax),%edx
   16f5e:	8b 45 08             	mov    0x8(%ebp),%eax
   16f61:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   16f64:	83 ec 0c             	sub    $0xc,%esp
   16f67:	68 a0 c8 05 00       	push   $0x5c8a0
   16f6c:	e8 88 0e 00 00       	call   17df9 <mutex_unlock>
   16f71:	83 c4 10             	add    $0x10,%esp
}
   16f74:	90                   	nop
   16f75:	c9                   	leave  
   16f76:	c3                   	ret    

00016f77 <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref (file_t * file) {
   16f77:	55                   	push   %ebp
   16f78:	89 e5                	mov    %esp,%ebp
   16f7a:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16f7d:	83 ec 0c             	sub    $0xc,%esp
   16f80:	68 a0 c8 05 00       	push   $0x5c8a0
   16f85:	e8 d8 0d 00 00       	call   17d62 <mutex_lock>
   16f8a:	83 c4 10             	add    $0x10,%esp
	file->ref++;
   16f8d:	8b 45 08             	mov    0x8(%ebp),%eax
   16f90:	8b 40 28             	mov    0x28(%eax),%eax
   16f93:	8d 50 01             	lea    0x1(%eax),%edx
   16f96:	8b 45 08             	mov    0x8(%ebp),%eax
   16f99:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   16f9c:	83 ec 0c             	sub    $0xc,%esp
   16f9f:	68 a0 c8 05 00       	push   $0x5c8a0
   16fa4:	e8 50 0e 00 00       	call   17df9 <mutex_unlock>
   16fa9:	83 c4 10             	add    $0x10,%esp
}
   16fac:	90                   	nop
   16fad:	c9                   	leave  
   16fae:	c3                   	ret    

00016faf <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init (void) {
   16faf:	55                   	push   %ebp
   16fb0:	89 e5                	mov    %esp,%ebp
   16fb2:	83 ec 08             	sub    $0x8,%esp
	// 文件描述符表初始化
	kernel_memset(&file_table, 0, sizeof(file_table));
   16fb5:	83 ec 04             	sub    $0x4,%esp
   16fb8:	68 00 40 02 00       	push   $0x24000
   16fbd:	6a 00                	push   $0x0
   16fbf:	68 a0 88 03 00       	push   $0x388a0
   16fc4:	e8 9c 14 00 00       	call   18465 <kernel_memset>
   16fc9:	83 c4 10             	add    $0x10,%esp
	mutex_init(&file_alloc_mutex);
   16fcc:	83 ec 0c             	sub    $0xc,%esp
   16fcf:	68 a0 c8 05 00       	push   $0x5c8a0
   16fd4:	e8 5b 0d 00 00       	call   17d34 <mutex_init>
   16fd9:	83 c4 10             	add    $0x10,%esp
}
   16fdc:	90                   	nop
   16fdd:	c9                   	leave  
   16fde:	c3                   	ret    

00016fdf <list_node_next>:
static inline list_node_t * list_node_next(list_node_t *node) {
   16fdf:	55                   	push   %ebp
   16fe0:	89 e5                	mov    %esp,%ebp
    return node->next;
   16fe2:	8b 45 08             	mov    0x8(%ebp),%eax
   16fe5:	8b 40 04             	mov    0x4(%eax),%eax
}
   16fe8:	5d                   	pop    %ebp
   16fe9:	c3                   	ret    

00016fea <list_first>:
static inline list_node_t* list_first(list_t *list) {
   16fea:	55                   	push   %ebp
   16feb:	89 e5                	mov    %esp,%ebp
    return list->first;
   16fed:	8b 45 08             	mov    0x8(%ebp),%eax
   16ff0:	8b 00                	mov    (%eax),%eax
}
   16ff2:	5d                   	pop    %ebp
   16ff3:	c3                   	ret    

00016ff4 <is_fd_bad>:
extern fs_op_t fatfs_op;

/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad (int file) {
   16ff4:	55                   	push   %ebp
   16ff5:	89 e5                	mov    %esp,%ebp
	if ((file < 0) && (file >= TASK_OFILE_NR)) {
   16ff7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16ffb:	79 0d                	jns    1700a <is_fd_bad+0x16>
   16ffd:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   17001:	7e 07                	jle    1700a <is_fd_bad+0x16>
		return 1;
   17003:	b8 01 00 00 00       	mov    $0x1,%eax
   17008:	eb 05                	jmp    1700f <is_fd_bad+0x1b>
	}

	return 0;
   1700a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1700f:	5d                   	pop    %ebp
   17010:	c3                   	ret    

00017011 <get_fs_op>:

/**
 * @brief 获取指定文件系统的操作接口
 */
static fs_op_t * get_fs_op (fs_type_t type, int major) {
   17011:	55                   	push   %ebp
   17012:	89 e5                	mov    %esp,%ebp
	switch (type) {
   17014:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17018:	74 08                	je     17022 <get_fs_op+0x11>
   1701a:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   1701e:	74 09                	je     17029 <get_fs_op+0x18>
   17020:	eb 0e                	jmp    17030 <get_fs_op+0x1f>
	case FS_FAT16:
		return &fatfs_op;
   17022:	b8 40 a1 01 00       	mov    $0x1a140,%eax
   17027:	eb 0c                	jmp    17035 <get_fs_op+0x24>
	case FS_DEVFS:
		return &devfs_op;
   17029:	b8 00 a1 01 00       	mov    $0x1a100,%eax
   1702e:	eb 05                	jmp    17035 <get_fs_op+0x24>
	default:
		return (fs_op_t *)0;
   17030:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
   17035:	5d                   	pop    %ebp
   17036:	c3                   	ret    

00017037 <mount>:

/**
 * @brief 挂载文件系统
 */
static fs_t * mount (fs_type_t type, char * mount_point, int dev_major, int dev_minor) {
   17037:	55                   	push   %ebp
   17038:	89 e5                	mov    %esp,%ebp
   1703a:	83 ec 28             	sub    $0x28,%esp
	fs_t * fs = (fs_t *)0;
   1703d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   17044:	83 ec 04             	sub    $0x4,%esp
   17047:	ff 75 10             	push   0x10(%ebp)
   1704a:	ff 75 0c             	push   0xc(%ebp)
   1704d:	68 04 9c 01 00       	push   $0x19c04
   17052:	e8 b8 19 00 00       	call   18a0f <log_printf>
   17057:	83 c4 10             	add    $0x10,%esp

	// 遍历，查找是否已经有挂载
 	list_node_t * curr = list_first(&mounted_list);
   1705a:	83 ec 0c             	sub    $0xc,%esp
   1705d:	68 c0 c8 05 00       	push   $0x5c8c0
   17062:	e8 83 ff ff ff       	call   16fea <list_first>
   17067:	83 c4 10             	add    $0x10,%esp
   1706a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   1706d:	eb 59                	jmp    170c8 <mount+0x91>
		fs_t * fs = list_node_parent(curr, fs_t, node);
   1706f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17073:	74 0a                	je     1707f <mount+0x48>
   17075:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17078:	2d 10 02 00 00       	sub    $0x210,%eax
   1707d:	eb 05                	jmp    17084 <mount+0x4d>
   1707f:	b8 00 00 00 00       	mov    $0x0,%eax
   17084:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNTP_SIZE) == 0) {
   17087:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1708a:	83 ec 04             	sub    $0x4,%esp
   1708d:	68 00 02 00 00       	push   $0x200
   17092:	ff 75 0c             	push   0xc(%ebp)
   17095:	50                   	push   %eax
   17096:	e8 fd 12 00 00       	call   18398 <kernel_strncmp>
   1709b:	83 c4 10             	add    $0x10,%esp
   1709e:	85 c0                	test   %eax,%eax
   170a0:	75 15                	jne    170b7 <mount+0x80>
			log_printf("fs alreay mounted.");
   170a2:	83 ec 0c             	sub    $0xc,%esp
   170a5:	68 29 9c 01 00       	push   $0x19c29
   170aa:	e8 60 19 00 00       	call   18a0f <log_printf>
   170af:	83 c4 10             	add    $0x10,%esp
			goto mount_failed;
   170b2:	e9 21 01 00 00       	jmp    171d8 <mount+0x1a1>
		}
		curr = list_node_next(curr);
   170b7:	83 ec 0c             	sub    $0xc,%esp
   170ba:	ff 75 f0             	push   -0x10(%ebp)
   170bd:	e8 1d ff ff ff       	call   16fdf <list_node_next>
   170c2:	83 c4 10             	add    $0x10,%esp
   170c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   170c8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   170cc:	75 a1                	jne    1706f <mount+0x38>
	}

	// 分配新的fs结构
	list_node_t * free_node = list_remove_first(&free_list);
   170ce:	83 ec 0c             	sub    $0xc,%esp
   170d1:	68 cc c8 05 00       	push   $0x5c8cc
   170d6:	e8 08 18 00 00       	call   188e3 <list_remove_first>
   170db:	83 c4 10             	add    $0x10,%esp
   170de:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!free_node) {
   170e1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   170e5:	75 15                	jne    170fc <mount+0xc5>
		log_printf("no free fs, mount failed.");
   170e7:	83 ec 0c             	sub    $0xc,%esp
   170ea:	68 3c 9c 01 00       	push   $0x19c3c
   170ef:	e8 1b 19 00 00       	call   18a0f <log_printf>
   170f4:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   170f7:	e9 dc 00 00 00       	jmp    171d8 <mount+0x1a1>
	}
	fs = list_node_parent(free_node, fs_t, node);
   170fc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17100:	74 0a                	je     1710c <mount+0xd5>
   17102:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17105:	2d 10 02 00 00       	sub    $0x210,%eax
   1710a:	eb 05                	jmp    17111 <mount+0xda>
   1710c:	b8 00 00 00 00       	mov    $0x0,%eax
   17111:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// 检查挂载的文件系统类型：不检查实际
	fs_op_t * op = get_fs_op(type, dev_major);
   17114:	83 ec 08             	sub    $0x8,%esp
   17117:	ff 75 10             	push   0x10(%ebp)
   1711a:	ff 75 08             	push   0x8(%ebp)
   1711d:	e8 ef fe ff ff       	call   17011 <get_fs_op>
   17122:	83 c4 10             	add    $0x10,%esp
   17125:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (!op) {
   17128:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1712c:	75 18                	jne    17146 <mount+0x10f>
		log_printf("unsupported fs type: %d", type);
   1712e:	83 ec 08             	sub    $0x8,%esp
   17131:	ff 75 08             	push   0x8(%ebp)
   17134:	68 56 9c 01 00       	push   $0x19c56
   17139:	e8 d1 18 00 00       	call   18a0f <log_printf>
   1713e:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   17141:	e9 92 00 00 00       	jmp    171d8 <mount+0x1a1>
	}

	// 给定数据一些缺省的值
	kernel_memset(fs, 0, sizeof(fs_t));
   17146:	83 ec 04             	sub    $0x4,%esp
   17149:	68 60 02 00 00       	push   $0x260
   1714e:	6a 00                	push   $0x0
   17150:	ff 75 f4             	push   -0xc(%ebp)
   17153:	e8 0d 13 00 00       	call   18465 <kernel_memset>
   17158:	83 c4 10             	add    $0x10,%esp
	kernel_strncpy(fs->mount_point, mount_point, FS_MOUNTP_SIZE);
   1715b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1715e:	83 ec 04             	sub    $0x4,%esp
   17161:	68 00 02 00 00       	push   $0x200
   17166:	ff 75 0c             	push   0xc(%ebp)
   17169:	50                   	push   %eax
   1716a:	e8 7e 11 00 00       	call   182ed <kernel_strncpy>
   1716f:	83 c4 10             	add    $0x10,%esp
	fs->op = op;
   17172:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17175:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17178:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)
	fs->mutex = (mutex_t *)0;
   1717e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17181:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%eax)
   17188:	00 00 00 

	// 挂载文件系统
	if (op->mount(fs, dev_major, dev_minor) < 0) {
   1718b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1718e:	8b 00                	mov    (%eax),%eax
   17190:	83 ec 04             	sub    $0x4,%esp
   17193:	ff 75 14             	push   0x14(%ebp)
   17196:	ff 75 10             	push   0x10(%ebp)
   17199:	ff 75 f4             	push   -0xc(%ebp)
   1719c:	ff d0                	call   *%eax
   1719e:	83 c4 10             	add    $0x10,%esp
   171a1:	85 c0                	test   %eax,%eax
   171a3:	79 15                	jns    171ba <mount+0x183>
		log_printf("mount fs %s failed", mount_point);
   171a5:	83 ec 08             	sub    $0x8,%esp
   171a8:	ff 75 0c             	push   0xc(%ebp)
   171ab:	68 6e 9c 01 00       	push   $0x19c6e
   171b0:	e8 5a 18 00 00       	call   18a0f <log_printf>
   171b5:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   171b8:	eb 1e                	jmp    171d8 <mount+0x1a1>
	}
	list_insert_last(&mounted_list, &fs->node);
   171ba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171bd:	05 10 02 00 00       	add    $0x210,%eax
   171c2:	83 ec 08             	sub    $0x8,%esp
   171c5:	50                   	push   %eax
   171c6:	68 c0 c8 05 00       	push   $0x5c8c0
   171cb:	e8 af 16 00 00       	call   1887f <list_insert_last>
   171d0:	83 c4 10             	add    $0x10,%esp
	return fs;
   171d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171d6:	eb 24                	jmp    171fc <mount+0x1c5>
mount_failed:
	if (fs) {
   171d8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   171dc:	74 19                	je     171f7 <mount+0x1c0>
		// 回收fs
		list_insert_first(&free_list, &fs->node);
   171de:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171e1:	05 10 02 00 00       	add    $0x210,%eax
   171e6:	83 ec 08             	sub    $0x8,%esp
   171e9:	50                   	push   %eax
   171ea:	68 cc c8 05 00       	push   $0x5c8cc
   171ef:	e8 2c 16 00 00       	call   18820 <list_insert_first>
   171f4:	83 c4 10             	add    $0x10,%esp
	}
	return (fs_t *)0;
   171f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   171fc:	c9                   	leave  
   171fd:	c3                   	ret    

000171fe <mount_list_init>:

/**
 * @brief 初始化挂载列表
 */
static void mount_list_init (void) {
   171fe:	55                   	push   %ebp
   171ff:	89 e5                	mov    %esp,%ebp
   17201:	83 ec 18             	sub    $0x18,%esp
	list_init(&free_list);
   17204:	83 ec 0c             	sub    $0xc,%esp
   17207:	68 cc c8 05 00       	push   $0x5c8cc
   1720c:	e8 ea 15 00 00       	call   187fb <list_init>
   17211:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17214:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1721b:	eb 28                	jmp    17245 <mount_list_init+0x47>
		list_insert_first(&free_list, &fs_tbl[i].node);
   1721d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17220:	69 c0 60 02 00 00    	imul   $0x260,%eax,%eax
   17226:	05 10 02 00 00       	add    $0x210,%eax
   1722b:	05 e0 c8 05 00       	add    $0x5c8e0,%eax
   17230:	83 ec 08             	sub    $0x8,%esp
   17233:	50                   	push   %eax
   17234:	68 cc c8 05 00       	push   $0x5c8cc
   17239:	e8 e2 15 00 00       	call   18820 <list_insert_first>
   1723e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17241:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17245:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   17249:	7e d2                	jle    1721d <mount_list_init+0x1f>
	}
	list_init(&mounted_list);
   1724b:	83 ec 0c             	sub    $0xc,%esp
   1724e:	68 c0 c8 05 00       	push   $0x5c8c0
   17253:	e8 a3 15 00 00       	call   187fb <list_init>
   17258:	83 c4 10             	add    $0x10,%esp
}
   1725b:	90                   	nop
   1725c:	c9                   	leave  
   1725d:	c3                   	ret    

0001725e <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init (void) {
   1725e:	55                   	push   %ebp
   1725f:	89 e5                	mov    %esp,%ebp
   17261:	83 ec 18             	sub    $0x18,%esp
	mount_list_init();
   17264:	e8 95 ff ff ff       	call   171fe <mount_list_init>
    file_table_init();
   17269:	e8 41 fd ff ff       	call   16faf <file_table_init>

	// 磁盘检查
	disk_init();
   1726e:	e8 9b d4 ff ff       	call   1470e <disk_init>

	// 挂载设备文件系统，待后续完成。挂载点名称可随意
	fs_t * fs = mount(FS_DEVFS, "/dev", 0, 0);
   17273:	6a 00                	push   $0x0
   17275:	6a 00                	push   $0x0
   17277:	68 81 9c 01 00       	push   $0x19c81
   1727c:	6a 01                	push   $0x1
   1727e:	e8 b4 fd ff ff       	call   17037 <mount>
   17283:	83 c4 10             	add    $0x10,%esp
   17286:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ASSERT(fs != (fs_t *)0);
   17289:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1728d:	75 1c                	jne    172ab <fs_init+0x4d>
   1728f:	68 86 9c 01 00       	push   $0x19c86
   17294:	68 78 9d 01 00       	push   $0x19d78
   17299:	68 86 00 00 00       	push   $0x86
   1729e:	68 98 9c 01 00       	push   $0x19c98
   172a3:	e8 0a 15 00 00       	call   187b2 <panic>
   172a8:	83 c4 10             	add    $0x10,%esp

	// 挂载根文件系统
	root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   172ab:	68 b1 00 00 00       	push   $0xb1
   172b0:	6a 02                	push   $0x2
   172b2:	68 cc 9c 01 00       	push   $0x19ccc
   172b7:	6a 00                	push   $0x0
   172b9:	e8 79 fd ff ff       	call   17037 <mount>
   172be:	83 c4 10             	add    $0x10,%esp
   172c1:	a3 a0 e0 05 00       	mov    %eax,0x5e0a0
	ASSERT(root_fs != (fs_t *)0);
   172c6:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   172cb:	85 c0                	test   %eax,%eax
   172cd:	75 1c                	jne    172eb <fs_init+0x8d>
   172cf:	68 d2 9c 01 00       	push   $0x19cd2
   172d4:	68 78 9d 01 00       	push   $0x19d78
   172d9:	68 8a 00 00 00       	push   $0x8a
   172de:	68 98 9c 01 00       	push   $0x19c98
   172e3:	e8 ca 14 00 00       	call   187b2 <panic>
   172e8:	83 c4 10             	add    $0x10,%esp
}
   172eb:	90                   	nop
   172ec:	c9                   	leave  
   172ed:	c3                   	ret    

000172ee <path_to_num>:

/**
 * @brief 转换目录为数字
 */
int path_to_num (const char * path, int * num) {
   172ee:	55                   	push   %ebp
   172ef:	89 e5                	mov    %esp,%ebp
   172f1:	83 ec 10             	sub    $0x10,%esp
	int n = 0;
   172f4:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	const char * c = path;
   172fb:	8b 45 08             	mov    0x8(%ebp),%eax
   172fe:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*c && *c != '/') {
   17301:	eb 23                	jmp    17326 <path_to_num+0x38>
		n = n * 10 + *c - '0';
   17303:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17306:	89 d0                	mov    %edx,%eax
   17308:	c1 e0 02             	shl    $0x2,%eax
   1730b:	01 d0                	add    %edx,%eax
   1730d:	01 c0                	add    %eax,%eax
   1730f:	89 c2                	mov    %eax,%edx
   17311:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17314:	0f b6 00             	movzbl (%eax),%eax
   17317:	0f be c0             	movsbl %al,%eax
   1731a:	01 d0                	add    %edx,%eax
   1731c:	83 e8 30             	sub    $0x30,%eax
   1731f:	89 45 fc             	mov    %eax,-0x4(%ebp)
		c++;
   17322:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c && *c != '/') {
   17326:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17329:	0f b6 00             	movzbl (%eax),%eax
   1732c:	84 c0                	test   %al,%al
   1732e:	74 0a                	je     1733a <path_to_num+0x4c>
   17330:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17333:	0f b6 00             	movzbl (%eax),%eax
   17336:	3c 2f                	cmp    $0x2f,%al
   17338:	75 c9                	jne    17303 <path_to_num+0x15>
	}
	*num = n;
   1733a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1733d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17340:	89 10                	mov    %edx,(%eax)
	return 0;
   17342:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17347:	c9                   	leave  
   17348:	c3                   	ret    

00017349 <path_begin_with>:

/**
 * @brief 判断路径是否以xx开头
 */
int path_begin_with (const char * path, const char * str) {
   17349:	55                   	push   %ebp
   1734a:	89 e5                	mov    %esp,%ebp
   1734c:	83 ec 10             	sub    $0x10,%esp
	const char * s1 = path, * s2 = str;
   1734f:	8b 45 08             	mov    0x8(%ebp),%eax
   17352:	89 45 fc             	mov    %eax,-0x4(%ebp)
   17355:	8b 45 0c             	mov    0xc(%ebp),%eax
   17358:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   1735b:	eb 08                	jmp    17365 <path_begin_with+0x1c>
		s1++;
   1735d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		s2++;
   17361:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   17365:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17368:	0f b6 00             	movzbl (%eax),%eax
   1736b:	84 c0                	test   %al,%al
   1736d:	74 1a                	je     17389 <path_begin_with+0x40>
   1736f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17372:	0f b6 00             	movzbl (%eax),%eax
   17375:	84 c0                	test   %al,%al
   17377:	74 10                	je     17389 <path_begin_with+0x40>
   17379:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1737c:	0f b6 10             	movzbl (%eax),%edx
   1737f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17382:	0f b6 00             	movzbl (%eax),%eax
   17385:	38 c2                	cmp    %al,%dl
   17387:	74 d4                	je     1735d <path_begin_with+0x14>
	}

	return *s2 == '\0';
   17389:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1738c:	0f b6 00             	movzbl (%eax),%eax
   1738f:	84 c0                	test   %al,%al
   17391:	0f 94 c0             	sete   %al
   17394:	0f b6 c0             	movzbl %al,%eax
}
   17397:	c9                   	leave  
   17398:	c3                   	ret    

00017399 <path_next_child>:

/**
 * @brief 获取下一级子目录
 */
const char * path_next_child (const char * path) {
   17399:	55                   	push   %ebp
   1739a:	89 e5                	mov    %esp,%ebp
   1739c:	83 ec 10             	sub    $0x10,%esp
   const char * c = path;
   1739f:	8b 45 08             	mov    0x8(%ebp),%eax
   173a2:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (*c && (*c++ == '/')) {}
   173a5:	90                   	nop
   173a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173a9:	0f b6 00             	movzbl (%eax),%eax
   173ac:	84 c0                	test   %al,%al
   173ae:	74 10                	je     173c0 <path_next_child+0x27>
   173b0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173b3:	8d 50 01             	lea    0x1(%eax),%edx
   173b6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   173b9:	0f b6 00             	movzbl (%eax),%eax
   173bc:	3c 2f                	cmp    $0x2f,%al
   173be:	74 e6                	je     173a6 <path_next_child+0xd>
    while (*c && (*c++ != '/')) {}
   173c0:	90                   	nop
   173c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173c4:	0f b6 00             	movzbl (%eax),%eax
   173c7:	84 c0                	test   %al,%al
   173c9:	74 10                	je     173db <path_next_child+0x42>
   173cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173ce:	8d 50 01             	lea    0x1(%eax),%edx
   173d1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   173d4:	0f b6 00             	movzbl (%eax),%eax
   173d7:	3c 2f                	cmp    $0x2f,%al
   173d9:	75 e6                	jne    173c1 <path_next_child+0x28>
    return *c ? c : (const char *)0;
   173db:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173de:	0f b6 00             	movzbl (%eax),%eax
   173e1:	84 c0                	test   %al,%al
   173e3:	74 05                	je     173ea <path_next_child+0x51>
   173e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173e8:	eb 05                	jmp    173ef <path_next_child+0x56>
   173ea:	b8 00 00 00 00       	mov    $0x0,%eax
}
   173ef:	c9                   	leave  
   173f0:	c3                   	ret    

000173f1 <fs_protect>:

static void fs_protect (fs_t * fs) {
   173f1:	55                   	push   %ebp
   173f2:	89 e5                	mov    %esp,%ebp
   173f4:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   173f7:	8b 45 08             	mov    0x8(%ebp),%eax
   173fa:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17400:	85 c0                	test   %eax,%eax
   17402:	74 15                	je     17419 <fs_protect+0x28>
		mutex_lock(fs->mutex);
   17404:	8b 45 08             	mov    0x8(%ebp),%eax
   17407:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1740d:	83 ec 0c             	sub    $0xc,%esp
   17410:	50                   	push   %eax
   17411:	e8 4c 09 00 00       	call   17d62 <mutex_lock>
   17416:	83 c4 10             	add    $0x10,%esp
	}
}
   17419:	90                   	nop
   1741a:	c9                   	leave  
   1741b:	c3                   	ret    

0001741c <fs_unprotect>:

static void fs_unprotect (fs_t * fs) {
   1741c:	55                   	push   %ebp
   1741d:	89 e5                	mov    %esp,%ebp
   1741f:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   17422:	8b 45 08             	mov    0x8(%ebp),%eax
   17425:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1742b:	85 c0                	test   %eax,%eax
   1742d:	74 15                	je     17444 <fs_unprotect+0x28>
		mutex_unlock(fs->mutex);
   1742f:	8b 45 08             	mov    0x8(%ebp),%eax
   17432:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17438:	83 ec 0c             	sub    $0xc,%esp
   1743b:	50                   	push   %eax
   1743c:	e8 b8 09 00 00       	call   17df9 <mutex_unlock>
   17441:	83 c4 10             	add    $0x10,%esp
	}
}
   17444:	90                   	nop
   17445:	c9                   	leave  
   17446:	c3                   	ret    

00017447 <sys_open>:

/**
 * 打开文件
 */
int sys_open(const char *name, int flags, ...) {
   17447:	55                   	push   %ebp
   17448:	89 e5                	mov    %esp,%ebp
   1744a:	83 ec 28             	sub    $0x28,%esp
	// 分配文件描述符链接
	file_t * file = file_alloc();
   1744d:	e8 58 fa ff ff       	call   16eaa <file_alloc>
   17452:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!file) {
   17455:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17459:	75 0a                	jne    17465 <sys_open+0x1e>
		return -1;
   1745b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17460:	e9 62 01 00 00       	jmp    175c7 <sys_open+0x180>
	}

	int fd = task_alloc_fd(file);
   17465:	83 ec 0c             	sub    $0xc,%esp
   17468:	ff 75 ec             	push   -0x14(%ebp)
   1746b:	e8 d1 a2 ff ff       	call   11741 <task_alloc_fd>
   17470:	83 c4 10             	add    $0x10,%esp
   17473:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (fd < 0) {
   17476:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1747a:	0f 88 1f 01 00 00    	js     1759f <sys_open+0x158>
		goto sys_open_failed;
	}

	// 检查名称是否以挂载点开头，如果没有，则认为name在根目录下
	// 即只允许根目录下的遍历
	fs_t * fs = (fs_t *)0;
   17480:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	list_node_t * node = list_first(&mounted_list);
   17487:	83 ec 0c             	sub    $0xc,%esp
   1748a:	68 c0 c8 05 00       	push   $0x5c8c0
   1748f:	e8 56 fb ff ff       	call   16fea <list_first>
   17494:	83 c4 10             	add    $0x10,%esp
   17497:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   1749a:	eb 47                	jmp    174e3 <sys_open+0x9c>
		fs_t * curr = list_node_parent(node, fs_t, node);
   1749c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   174a0:	74 0a                	je     174ac <sys_open+0x65>
   174a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   174a5:	2d 10 02 00 00       	sub    $0x210,%eax
   174aa:	eb 05                	jmp    174b1 <sys_open+0x6a>
   174ac:	b8 00 00 00 00       	mov    $0x0,%eax
   174b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (path_begin_with(name, curr->mount_point)) {
   174b4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   174b7:	83 ec 08             	sub    $0x8,%esp
   174ba:	50                   	push   %eax
   174bb:	ff 75 08             	push   0x8(%ebp)
   174be:	e8 86 fe ff ff       	call   17349 <path_begin_with>
   174c3:	83 c4 10             	add    $0x10,%esp
   174c6:	85 c0                	test   %eax,%eax
   174c8:	74 08                	je     174d2 <sys_open+0x8b>
			fs = curr;
   174ca:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   174cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
   174d0:	eb 17                	jmp    174e9 <sys_open+0xa2>
		}
		node = list_node_next(node);
   174d2:	83 ec 0c             	sub    $0xc,%esp
   174d5:	ff 75 f0             	push   -0x10(%ebp)
   174d8:	e8 02 fb ff ff       	call   16fdf <list_node_next>
   174dd:	83 c4 10             	add    $0x10,%esp
   174e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   174e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   174e7:	75 b3                	jne    1749c <sys_open+0x55>
	}

	if (fs) {
   174e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   174ed:	74 13                	je     17502 <sys_open+0xbb>
		name = path_next_child(name);
   174ef:	83 ec 0c             	sub    $0xc,%esp
   174f2:	ff 75 08             	push   0x8(%ebp)
   174f5:	e8 9f fe ff ff       	call   17399 <path_next_child>
   174fa:	83 c4 10             	add    $0x10,%esp
   174fd:	89 45 08             	mov    %eax,0x8(%ebp)
   17500:	eb 08                	jmp    1750a <sys_open+0xc3>
	} else {
		fs = root_fs;
   17502:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17507:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	file->mode = flags;
   1750a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1750d:	8b 55 0c             	mov    0xc(%ebp),%edx
   17510:	89 50 40             	mov    %edx,0x40(%eax)
	file->fs = fs;
   17513:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17516:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17519:	89 50 44             	mov    %edx,0x44(%eax)
	kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   1751c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1751f:	83 ec 04             	sub    $0x4,%esp
   17522:	6a 20                	push   $0x20
   17524:	ff 75 08             	push   0x8(%ebp)
   17527:	50                   	push   %eax
   17528:	e8 c0 0d 00 00       	call   182ed <kernel_strncpy>
   1752d:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17530:	83 ec 0c             	sub    $0xc,%esp
   17533:	ff 75 f4             	push   -0xc(%ebp)
   17536:	e8 b6 fe ff ff       	call   173f1 <fs_protect>
   1753b:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->open(fs, name, file);
   1753e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17541:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17547:	8b 40 08             	mov    0x8(%eax),%eax
   1754a:	83 ec 04             	sub    $0x4,%esp
   1754d:	ff 75 ec             	push   -0x14(%ebp)
   17550:	ff 75 08             	push   0x8(%ebp)
   17553:	ff 75 f4             	push   -0xc(%ebp)
   17556:	ff d0                	call   *%eax
   17558:	83 c4 10             	add    $0x10,%esp
   1755b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (err < 0) {
   1755e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   17562:	79 28                	jns    1758c <sys_open+0x145>
		fs_unprotect(fs);
   17564:	83 ec 0c             	sub    $0xc,%esp
   17567:	ff 75 f4             	push   -0xc(%ebp)
   1756a:	e8 ad fe ff ff       	call   1741c <fs_unprotect>
   1756f:	83 c4 10             	add    $0x10,%esp

		log_printf("open %s failed.", name);
   17572:	83 ec 08             	sub    $0x8,%esp
   17575:	ff 75 08             	push   0x8(%ebp)
   17578:	68 e7 9c 01 00       	push   $0x19ce7
   1757d:	e8 8d 14 00 00       	call   18a0f <log_printf>
   17582:	83 c4 10             	add    $0x10,%esp
		return -1;
   17585:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1758a:	eb 3b                	jmp    175c7 <sys_open+0x180>
	}
	fs_unprotect(fs);
   1758c:	83 ec 0c             	sub    $0xc,%esp
   1758f:	ff 75 f4             	push   -0xc(%ebp)
   17592:	e8 85 fe ff ff       	call   1741c <fs_unprotect>
   17597:	83 c4 10             	add    $0x10,%esp

	return fd;
   1759a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1759d:	eb 28                	jmp    175c7 <sys_open+0x180>
		goto sys_open_failed;
   1759f:	90                   	nop

sys_open_failed:
	file_free(file);
   175a0:	83 ec 0c             	sub    $0xc,%esp
   175a3:	ff 75 ec             	push   -0x14(%ebp)
   175a6:	e8 8a f9 ff ff       	call   16f35 <file_free>
   175ab:	83 c4 10             	add    $0x10,%esp
	if (fd >= 0) {
   175ae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   175b2:	78 0e                	js     175c2 <sys_open+0x17b>
		task_remove_fd(fd);
   175b4:	83 ec 0c             	sub    $0xc,%esp
   175b7:	ff 75 e8             	push   -0x18(%ebp)
   175ba:	e8 d5 a1 ff ff       	call   11794 <task_remove_fd>
   175bf:	83 c4 10             	add    $0x10,%esp
	}
	return -1;
   175c2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   175c7:	c9                   	leave  
   175c8:	c3                   	ret    

000175c9 <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup (int file) {
   175c9:	55                   	push   %ebp
   175ca:	89 e5                	mov    %esp,%ebp
   175cc:	83 ec 18             	sub    $0x18,%esp
	// 超出进程所能打开的全部，退出
	if (is_fd_bad(file)) {
   175cf:	ff 75 08             	push   0x8(%ebp)
   175d2:	e8 1d fa ff ff       	call   16ff4 <is_fd_bad>
   175d7:	83 c4 04             	add    $0x4,%esp
   175da:	85 c0                	test   %eax,%eax
   175dc:	74 1a                	je     175f8 <sys_dup+0x2f>
        log_printf("file(%d) is not valid.", file);
   175de:	83 ec 08             	sub    $0x8,%esp
   175e1:	ff 75 08             	push   0x8(%ebp)
   175e4:	68 f7 9c 01 00       	push   $0x19cf7
   175e9:	e8 21 14 00 00       	call   18a0f <log_printf>
   175ee:	83 c4 10             	add    $0x10,%esp
		return -1;
   175f1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175f6:	eb 6d                	jmp    17665 <sys_dup+0x9c>
	}

	file_t * p_file = task_file(file);
   175f8:	83 ec 0c             	sub    $0xc,%esp
   175fb:	ff 75 08             	push   0x8(%ebp)
   175fe:	e8 0e a1 ff ff       	call   11711 <task_file>
   17603:	83 c4 10             	add    $0x10,%esp
   17606:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17609:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1760d:	75 17                	jne    17626 <sys_dup+0x5d>
		log_printf("file not opened");
   1760f:	83 ec 0c             	sub    $0xc,%esp
   17612:	68 0e 9d 01 00       	push   $0x19d0e
   17617:	e8 f3 13 00 00       	call   18a0f <log_printf>
   1761c:	83 c4 10             	add    $0x10,%esp
		return -1;
   1761f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17624:	eb 3f                	jmp    17665 <sys_dup+0x9c>
	}

	int fd = task_alloc_fd(p_file);	// 新fd指向同一描述符
   17626:	83 ec 0c             	sub    $0xc,%esp
   17629:	ff 75 f4             	push   -0xc(%ebp)
   1762c:	e8 10 a1 ff ff       	call   11741 <task_alloc_fd>
   17631:	83 c4 10             	add    $0x10,%esp
   17634:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (fd >= 0) {
   17637:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1763b:	78 13                	js     17650 <sys_dup+0x87>
		file_inc_ref(p_file);
   1763d:	83 ec 0c             	sub    $0xc,%esp
   17640:	ff 75 f4             	push   -0xc(%ebp)
   17643:	e8 2f f9 ff ff       	call   16f77 <file_inc_ref>
   17648:	83 c4 10             	add    $0x10,%esp
		return fd;
   1764b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1764e:	eb 15                	jmp    17665 <sys_dup+0x9c>
	}

	log_printf("No task file avaliable");
   17650:	83 ec 0c             	sub    $0xc,%esp
   17653:	68 1e 9d 01 00       	push   $0x19d1e
   17658:	e8 b2 13 00 00       	call   18a0f <log_printf>
   1765d:	83 c4 10             	add    $0x10,%esp
    return -1;
   17660:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17665:	c9                   	leave  
   17666:	c3                   	ret    

00017667 <sys_ioctl>:

/**
 * @brief IO设备控制
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   17667:	55                   	push   %ebp
   17668:	89 e5                	mov    %esp,%ebp
   1766a:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(fd)) {
   1766d:	ff 75 08             	push   0x8(%ebp)
   17670:	e8 7f f9 ff ff       	call   16ff4 <is_fd_bad>
   17675:	83 c4 04             	add    $0x4,%esp
   17678:	85 c0                	test   %eax,%eax
   1767a:	74 07                	je     17683 <sys_ioctl+0x1c>
		return 0;
   1767c:	b8 00 00 00 00       	mov    $0x0,%eax
   17681:	eb 66                	jmp    176e9 <sys_ioctl+0x82>
	}

	file_t * pfile = task_file(fd);
   17683:	83 ec 0c             	sub    $0xc,%esp
   17686:	ff 75 08             	push   0x8(%ebp)
   17689:	e8 83 a0 ff ff       	call   11711 <task_file>
   1768e:	83 c4 10             	add    $0x10,%esp
   17691:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17694:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17698:	75 07                	jne    176a1 <sys_ioctl+0x3a>
		return 0;
   1769a:	b8 00 00 00 00       	mov    $0x0,%eax
   1769f:	eb 48                	jmp    176e9 <sys_ioctl+0x82>
	}

	fs_t * fs = pfile->fs;
   176a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176a4:	8b 40 44             	mov    0x44(%eax),%eax
   176a7:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   176aa:	83 ec 0c             	sub    $0xc,%esp
   176ad:	ff 75 f0             	push   -0x10(%ebp)
   176b0:	e8 3c fd ff ff       	call   173f1 <fs_protect>
   176b5:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->ioctl(pfile, cmd, arg0, arg1);
   176b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176bb:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   176c1:	8b 40 20             	mov    0x20(%eax),%eax
   176c4:	ff 75 14             	push   0x14(%ebp)
   176c7:	ff 75 10             	push   0x10(%ebp)
   176ca:	ff 75 0c             	push   0xc(%ebp)
   176cd:	ff 75 f4             	push   -0xc(%ebp)
   176d0:	ff d0                	call   *%eax
   176d2:	83 c4 10             	add    $0x10,%esp
   176d5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   176d8:	83 ec 0c             	sub    $0xc,%esp
   176db:	ff 75 f0             	push   -0x10(%ebp)
   176de:	e8 39 fd ff ff       	call   1741c <fs_unprotect>
   176e3:	83 c4 10             	add    $0x10,%esp
	return err;
   176e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   176e9:	c9                   	leave  
   176ea:	c3                   	ret    

000176eb <sys_read>:

/**
 * 读取文件api
 */
int sys_read(int file, char *ptr, int len) {
   176eb:	55                   	push   %ebp
   176ec:	89 e5                	mov    %esp,%ebp
   176ee:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file) || !ptr || !len) {
   176f1:	ff 75 08             	push   0x8(%ebp)
   176f4:	e8 fb f8 ff ff       	call   16ff4 <is_fd_bad>
   176f9:	83 c4 04             	add    $0x4,%esp
   176fc:	85 c0                	test   %eax,%eax
   176fe:	75 0c                	jne    1770c <sys_read+0x21>
   17700:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17704:	74 06                	je     1770c <sys_read+0x21>
   17706:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1770a:	75 0a                	jne    17716 <sys_read+0x2b>
		return 0;
   1770c:	b8 00 00 00 00       	mov    $0x0,%eax
   17711:	e9 98 00 00 00       	jmp    177ae <sys_read+0xc3>
	}

	file_t * p_file = task_file(file);
   17716:	83 ec 0c             	sub    $0xc,%esp
   17719:	ff 75 08             	push   0x8(%ebp)
   1771c:	e8 f0 9f ff ff       	call   11711 <task_file>
   17721:	83 c4 10             	add    $0x10,%esp
   17724:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17727:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1772b:	75 17                	jne    17744 <sys_read+0x59>
		log_printf("file not opened");
   1772d:	83 ec 0c             	sub    $0xc,%esp
   17730:	68 0e 9d 01 00       	push   $0x19d0e
   17735:	e8 d5 12 00 00       	call   18a0f <log_printf>
   1773a:	83 c4 10             	add    $0x10,%esp
		return -1;
   1773d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17742:	eb 6a                	jmp    177ae <sys_read+0xc3>
	}

	if (p_file->mode == O_WRONLY) {
   17744:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17747:	8b 40 40             	mov    0x40(%eax),%eax
   1774a:	83 f8 01             	cmp    $0x1,%eax
   1774d:	75 17                	jne    17766 <sys_read+0x7b>
		log_printf("file is write only");
   1774f:	83 ec 0c             	sub    $0xc,%esp
   17752:	68 35 9d 01 00       	push   $0x19d35
   17757:	e8 b3 12 00 00       	call   18a0f <log_printf>
   1775c:	83 c4 10             	add    $0x10,%esp
		return -1;
   1775f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17764:	eb 48                	jmp    177ae <sys_read+0xc3>
	}

	// 读取文件
	fs_t * fs = p_file->fs;
   17766:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17769:	8b 40 44             	mov    0x44(%eax),%eax
   1776c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   1776f:	83 ec 0c             	sub    $0xc,%esp
   17772:	ff 75 f0             	push   -0x10(%ebp)
   17775:	e8 77 fc ff ff       	call   173f1 <fs_protect>
   1777a:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->read(ptr, len, p_file);
   1777d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17780:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17786:	8b 40 0c             	mov    0xc(%eax),%eax
   17789:	83 ec 04             	sub    $0x4,%esp
   1778c:	ff 75 f4             	push   -0xc(%ebp)
   1778f:	ff 75 10             	push   0x10(%ebp)
   17792:	ff 75 0c             	push   0xc(%ebp)
   17795:	ff d0                	call   *%eax
   17797:	83 c4 10             	add    $0x10,%esp
   1779a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   1779d:	83 ec 0c             	sub    $0xc,%esp
   177a0:	ff 75 f0             	push   -0x10(%ebp)
   177a3:	e8 74 fc ff ff       	call   1741c <fs_unprotect>
   177a8:	83 c4 10             	add    $0x10,%esp
	return err;
   177ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   177ae:	c9                   	leave  
   177af:	c3                   	ret    

000177b0 <sys_write>:

/**
 * 写文件
 */
int sys_write(int file, char *ptr, int len) {
   177b0:	55                   	push   %ebp
   177b1:	89 e5                	mov    %esp,%ebp
   177b3:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file) || !ptr || !len) {
   177b6:	ff 75 08             	push   0x8(%ebp)
   177b9:	e8 36 f8 ff ff       	call   16ff4 <is_fd_bad>
   177be:	83 c4 04             	add    $0x4,%esp
   177c1:	85 c0                	test   %eax,%eax
   177c3:	75 0c                	jne    177d1 <sys_write+0x21>
   177c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   177c9:	74 06                	je     177d1 <sys_write+0x21>
   177cb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   177cf:	75 0a                	jne    177db <sys_write+0x2b>
		return 0;
   177d1:	b8 00 00 00 00       	mov    $0x0,%eax
   177d6:	e9 97 00 00 00       	jmp    17872 <sys_write+0xc2>
	}

	file_t * p_file = task_file(file);
   177db:	83 ec 0c             	sub    $0xc,%esp
   177de:	ff 75 08             	push   0x8(%ebp)
   177e1:	e8 2b 9f ff ff       	call   11711 <task_file>
   177e6:	83 c4 10             	add    $0x10,%esp
   177e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   177ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   177f0:	75 17                	jne    17809 <sys_write+0x59>
		log_printf("file not opened");
   177f2:	83 ec 0c             	sub    $0xc,%esp
   177f5:	68 0e 9d 01 00       	push   $0x19d0e
   177fa:	e8 10 12 00 00       	call   18a0f <log_printf>
   177ff:	83 c4 10             	add    $0x10,%esp
		return -1;
   17802:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17807:	eb 69                	jmp    17872 <sys_write+0xc2>
	}

	if (p_file->mode == O_RDONLY) {
   17809:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1780c:	8b 40 40             	mov    0x40(%eax),%eax
   1780f:	85 c0                	test   %eax,%eax
   17811:	75 17                	jne    1782a <sys_write+0x7a>
		log_printf("file is write only");
   17813:	83 ec 0c             	sub    $0xc,%esp
   17816:	68 35 9d 01 00       	push   $0x19d35
   1781b:	e8 ef 11 00 00       	call   18a0f <log_printf>
   17820:	83 c4 10             	add    $0x10,%esp
		return -1;
   17823:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17828:	eb 48                	jmp    17872 <sys_write+0xc2>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   1782a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1782d:	8b 40 44             	mov    0x44(%eax),%eax
   17830:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17833:	83 ec 0c             	sub    $0xc,%esp
   17836:	ff 75 f0             	push   -0x10(%ebp)
   17839:	e8 b3 fb ff ff       	call   173f1 <fs_protect>
   1783e:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->write(ptr, len, p_file);
   17841:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17844:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1784a:	8b 40 10             	mov    0x10(%eax),%eax
   1784d:	83 ec 04             	sub    $0x4,%esp
   17850:	ff 75 f4             	push   -0xc(%ebp)
   17853:	ff 75 10             	push   0x10(%ebp)
   17856:	ff 75 0c             	push   0xc(%ebp)
   17859:	ff d0                	call   *%eax
   1785b:	83 c4 10             	add    $0x10,%esp
   1785e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17861:	83 ec 0c             	sub    $0xc,%esp
   17864:	ff 75 f0             	push   -0x10(%ebp)
   17867:	e8 b0 fb ff ff       	call   1741c <fs_unprotect>
   1786c:	83 c4 10             	add    $0x10,%esp
	return err;
   1786f:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17872:	c9                   	leave  
   17873:	c3                   	ret    

00017874 <sys_lseek>:

/**
 * 文件访问位置定位
 */
int sys_lseek(int file, int ptr, int dir) {
   17874:	55                   	push   %ebp
   17875:	89 e5                	mov    %esp,%ebp
   17877:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   1787a:	ff 75 08             	push   0x8(%ebp)
   1787d:	e8 72 f7 ff ff       	call   16ff4 <is_fd_bad>
   17882:	83 c4 04             	add    $0x4,%esp
   17885:	85 c0                	test   %eax,%eax
   17887:	74 07                	je     17890 <sys_lseek+0x1c>
		return -1;
   17889:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1788e:	eb 77                	jmp    17907 <sys_lseek+0x93>
	}

	file_t * p_file = task_file(file);
   17890:	83 ec 0c             	sub    $0xc,%esp
   17893:	ff 75 08             	push   0x8(%ebp)
   17896:	e8 76 9e ff ff       	call   11711 <task_file>
   1789b:	83 c4 10             	add    $0x10,%esp
   1789e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   178a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   178a5:	75 17                	jne    178be <sys_lseek+0x4a>
		log_printf("file not opened");
   178a7:	83 ec 0c             	sub    $0xc,%esp
   178aa:	68 0e 9d 01 00       	push   $0x19d0e
   178af:	e8 5b 11 00 00       	call   18a0f <log_printf>
   178b4:	83 c4 10             	add    $0x10,%esp
		return -1;
   178b7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   178bc:	eb 49                	jmp    17907 <sys_lseek+0x93>
	}

	// 写入文件
	fs_t * fs = p_file->fs;
   178be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   178c1:	8b 40 44             	mov    0x44(%eax),%eax
   178c4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   178c7:	83 ec 0c             	sub    $0xc,%esp
   178ca:	ff 75 f0             	push   -0x10(%ebp)
   178cd:	e8 1f fb ff ff       	call   173f1 <fs_protect>
   178d2:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->seek(p_file, ptr, dir);
   178d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   178d8:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   178de:	8b 40 18             	mov    0x18(%eax),%eax
   178e1:	8b 55 0c             	mov    0xc(%ebp),%edx
   178e4:	83 ec 04             	sub    $0x4,%esp
   178e7:	ff 75 10             	push   0x10(%ebp)
   178ea:	52                   	push   %edx
   178eb:	ff 75 f4             	push   -0xc(%ebp)
   178ee:	ff d0                	call   *%eax
   178f0:	83 c4 10             	add    $0x10,%esp
   178f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   178f6:	83 ec 0c             	sub    $0xc,%esp
   178f9:	ff 75 f0             	push   -0x10(%ebp)
   178fc:	e8 1b fb ff ff       	call   1741c <fs_unprotect>
   17901:	83 c4 10             	add    $0x10,%esp
	return err;
   17904:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17907:	c9                   	leave  
   17908:	c3                   	ret    

00017909 <sys_close>:

/**
 * 关闭文件
 */
int sys_close(int file) {
   17909:	55                   	push   %ebp
   1790a:	89 e5                	mov    %esp,%ebp
   1790c:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   1790f:	ff 75 08             	push   0x8(%ebp)
   17912:	e8 dd f6 ff ff       	call   16ff4 <is_fd_bad>
   17917:	83 c4 04             	add    $0x4,%esp
   1791a:	85 c0                	test   %eax,%eax
   1791c:	74 1a                	je     17938 <sys_close+0x2f>
		log_printf("file error");
   1791e:	83 ec 0c             	sub    $0xc,%esp
   17921:	68 48 9d 01 00       	push   $0x19d48
   17926:	e8 e4 10 00 00       	call   18a0f <log_printf>
   1792b:	83 c4 10             	add    $0x10,%esp
		return -1;
   1792e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17933:	e9 cb 00 00 00       	jmp    17a03 <sys_close+0xfa>
	}

	file_t * p_file = task_file(file);
   17938:	83 ec 0c             	sub    $0xc,%esp
   1793b:	ff 75 08             	push   0x8(%ebp)
   1793e:	e8 ce 9d ff ff       	call   11711 <task_file>
   17943:	83 c4 10             	add    $0x10,%esp
   17946:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17949:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1794d:	75 1d                	jne    1796c <sys_close+0x63>
		log_printf("file not opened. %d", file);
   1794f:	83 ec 08             	sub    $0x8,%esp
   17952:	ff 75 08             	push   0x8(%ebp)
   17955:	68 53 9d 01 00       	push   $0x19d53
   1795a:	e8 b0 10 00 00       	call   18a0f <log_printf>
   1795f:	83 c4 10             	add    $0x10,%esp
		return -1;
   17962:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17967:	e9 97 00 00 00       	jmp    17a03 <sys_close+0xfa>
	}

	ASSERT(p_file->ref > 0);
   1796c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1796f:	8b 40 28             	mov    0x28(%eax),%eax
   17972:	85 c0                	test   %eax,%eax
   17974:	7f 1c                	jg     17992 <sys_close+0x89>
   17976:	68 67 9d 01 00       	push   $0x19d67
   1797b:	68 80 9d 01 00       	push   $0x19d80
   17980:	68 85 01 00 00       	push   $0x185
   17985:	68 98 9c 01 00       	push   $0x19c98
   1798a:	e8 23 0e 00 00       	call   187b2 <panic>
   1798f:	83 c4 10             	add    $0x10,%esp

	if (p_file->ref-- == 1) {
   17992:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17995:	8b 40 28             	mov    0x28(%eax),%eax
   17998:	8d 48 ff             	lea    -0x1(%eax),%ecx
   1799b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1799e:	89 4a 28             	mov    %ecx,0x28(%edx)
   179a1:	83 f8 01             	cmp    $0x1,%eax
   179a4:	75 4a                	jne    179f0 <sys_close+0xe7>
		fs_t * fs = p_file->fs;
   179a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   179a9:	8b 40 44             	mov    0x44(%eax),%eax
   179ac:	89 45 f0             	mov    %eax,-0x10(%ebp)

		fs_protect(fs);
   179af:	83 ec 0c             	sub    $0xc,%esp
   179b2:	ff 75 f0             	push   -0x10(%ebp)
   179b5:	e8 37 fa ff ff       	call   173f1 <fs_protect>
   179ba:	83 c4 10             	add    $0x10,%esp
		fs->op->close(p_file);
   179bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   179c0:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   179c6:	8b 40 14             	mov    0x14(%eax),%eax
   179c9:	83 ec 0c             	sub    $0xc,%esp
   179cc:	ff 75 f4             	push   -0xc(%ebp)
   179cf:	ff d0                	call   *%eax
   179d1:	83 c4 10             	add    $0x10,%esp
		fs_unprotect(fs);
   179d4:	83 ec 0c             	sub    $0xc,%esp
   179d7:	ff 75 f0             	push   -0x10(%ebp)
   179da:	e8 3d fa ff ff       	call   1741c <fs_unprotect>
   179df:	83 c4 10             	add    $0x10,%esp
	    file_free(p_file);
   179e2:	83 ec 0c             	sub    $0xc,%esp
   179e5:	ff 75 f4             	push   -0xc(%ebp)
   179e8:	e8 48 f5 ff ff       	call   16f35 <file_free>
   179ed:	83 c4 10             	add    $0x10,%esp
	}

	task_remove_fd(file);
   179f0:	83 ec 0c             	sub    $0xc,%esp
   179f3:	ff 75 08             	push   0x8(%ebp)
   179f6:	e8 99 9d ff ff       	call   11794 <task_remove_fd>
   179fb:	83 c4 10             	add    $0x10,%esp
	return 0;
   179fe:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17a03:	c9                   	leave  
   17a04:	c3                   	ret    

00017a05 <sys_isatty>:


/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file) {
   17a05:	55                   	push   %ebp
   17a06:	89 e5                	mov    %esp,%ebp
   17a08:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17a0b:	ff 75 08             	push   0x8(%ebp)
   17a0e:	e8 e1 f5 ff ff       	call   16ff4 <is_fd_bad>
   17a13:	83 c4 04             	add    $0x4,%esp
   17a16:	85 c0                	test   %eax,%eax
   17a18:	74 07                	je     17a21 <sys_isatty+0x1c>
		return 0;
   17a1a:	b8 00 00 00 00       	mov    $0x0,%eax
   17a1f:	eb 2d                	jmp    17a4e <sys_isatty+0x49>
	}

	file_t * pfile = task_file(file);
   17a21:	83 ec 0c             	sub    $0xc,%esp
   17a24:	ff 75 08             	push   0x8(%ebp)
   17a27:	e8 e5 9c ff ff       	call   11711 <task_file>
   17a2c:	83 c4 10             	add    $0x10,%esp
   17a2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17a32:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a36:	75 07                	jne    17a3f <sys_isatty+0x3a>
		return 0;
   17a38:	b8 00 00 00 00       	mov    $0x0,%eax
   17a3d:	eb 0f                	jmp    17a4e <sys_isatty+0x49>
	}

	return pfile->type == FILE_TTY;
   17a3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a42:	8b 40 20             	mov    0x20(%eax),%eax
   17a45:	83 f8 01             	cmp    $0x1,%eax
   17a48:	0f 94 c0             	sete   %al
   17a4b:	0f b6 c0             	movzbl %al,%eax
}
   17a4e:	c9                   	leave  
   17a4f:	c3                   	ret    

00017a50 <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st) {
   17a50:	55                   	push   %ebp
   17a51:	89 e5                	mov    %esp,%ebp
   17a53:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17a56:	ff 75 08             	push   0x8(%ebp)
   17a59:	e8 96 f5 ff ff       	call   16ff4 <is_fd_bad>
   17a5e:	83 c4 04             	add    $0x4,%esp
   17a61:	85 c0                	test   %eax,%eax
   17a63:	74 07                	je     17a6c <sys_fstat+0x1c>
		return -1;
   17a65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a6a:	eb 75                	jmp    17ae1 <sys_fstat+0x91>
	}

	file_t * p_file = task_file(file);
   17a6c:	83 ec 0c             	sub    $0xc,%esp
   17a6f:	ff 75 08             	push   0x8(%ebp)
   17a72:	e8 9a 9c ff ff       	call   11711 <task_file>
   17a77:	83 c4 10             	add    $0x10,%esp
   17a7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17a7d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a81:	75 07                	jne    17a8a <sys_fstat+0x3a>
		return -1;
   17a83:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a88:	eb 57                	jmp    17ae1 <sys_fstat+0x91>
	}

	fs_t * fs = p_file->fs;
   17a8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a8d:	8b 40 44             	mov    0x44(%eax),%eax
   17a90:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kernel_memset(st, 0, sizeof(struct stat));
   17a93:	83 ec 04             	sub    $0x4,%esp
   17a96:	6a 48                	push   $0x48
   17a98:	6a 00                	push   $0x0
   17a9a:	ff 75 0c             	push   0xc(%ebp)
   17a9d:	e8 c3 09 00 00       	call   18465 <kernel_memset>
   17aa2:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17aa5:	83 ec 0c             	sub    $0xc,%esp
   17aa8:	ff 75 f0             	push   -0x10(%ebp)
   17aab:	e8 41 f9 ff ff       	call   173f1 <fs_protect>
   17ab0:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->stat(p_file, st);
   17ab3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17ab6:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17abc:	8b 40 1c             	mov    0x1c(%eax),%eax
   17abf:	83 ec 08             	sub    $0x8,%esp
   17ac2:	ff 75 0c             	push   0xc(%ebp)
   17ac5:	ff 75 f4             	push   -0xc(%ebp)
   17ac8:	ff d0                	call   *%eax
   17aca:	83 c4 10             	add    $0x10,%esp
   17acd:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17ad0:	83 ec 0c             	sub    $0xc,%esp
   17ad3:	ff 75 f0             	push   -0x10(%ebp)
   17ad6:	e8 41 f9 ff ff       	call   1741c <fs_unprotect>
   17adb:	83 c4 10             	add    $0x10,%esp
	return err;
   17ade:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17ae1:	c9                   	leave  
   17ae2:	c3                   	ret    

00017ae3 <sys_opendir>:

int sys_opendir(const char * name, DIR * dir) {
   17ae3:	55                   	push   %ebp
   17ae4:	89 e5                	mov    %esp,%ebp
   17ae6:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17ae9:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17aee:	83 ec 0c             	sub    $0xc,%esp
   17af1:	50                   	push   %eax
   17af2:	e8 fa f8 ff ff       	call   173f1 <fs_protect>
   17af7:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->opendir(root_fs, name, dir);
   17afa:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17aff:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b05:	8b 40 24             	mov    0x24(%eax),%eax
   17b08:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17b0e:	83 ec 04             	sub    $0x4,%esp
   17b11:	ff 75 0c             	push   0xc(%ebp)
   17b14:	ff 75 08             	push   0x8(%ebp)
   17b17:	52                   	push   %edx
   17b18:	ff d0                	call   *%eax
   17b1a:	83 c4 10             	add    $0x10,%esp
   17b1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17b20:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b25:	83 ec 0c             	sub    $0xc,%esp
   17b28:	50                   	push   %eax
   17b29:	e8 ee f8 ff ff       	call   1741c <fs_unprotect>
   17b2e:	83 c4 10             	add    $0x10,%esp
	return err;
   17b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17b34:	c9                   	leave  
   17b35:	c3                   	ret    

00017b36 <sys_readdir>:

int sys_readdir(DIR* dir, struct dirent * dirent) {
   17b36:	55                   	push   %ebp
   17b37:	89 e5                	mov    %esp,%ebp
   17b39:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17b3c:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b41:	83 ec 0c             	sub    $0xc,%esp
   17b44:	50                   	push   %eax
   17b45:	e8 a7 f8 ff ff       	call   173f1 <fs_protect>
   17b4a:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->readdir(root_fs, dir, dirent);
   17b4d:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b52:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b58:	8b 40 28             	mov    0x28(%eax),%eax
   17b5b:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17b61:	83 ec 04             	sub    $0x4,%esp
   17b64:	ff 75 0c             	push   0xc(%ebp)
   17b67:	ff 75 08             	push   0x8(%ebp)
   17b6a:	52                   	push   %edx
   17b6b:	ff d0                	call   *%eax
   17b6d:	83 c4 10             	add    $0x10,%esp
   17b70:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17b73:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b78:	83 ec 0c             	sub    $0xc,%esp
   17b7b:	50                   	push   %eax
   17b7c:	e8 9b f8 ff ff       	call   1741c <fs_unprotect>
   17b81:	83 c4 10             	add    $0x10,%esp
	return err;
   17b84:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17b87:	c9                   	leave  
   17b88:	c3                   	ret    

00017b89 <sys_closedir>:

int sys_closedir(DIR *dir) {
   17b89:	55                   	push   %ebp
   17b8a:	89 e5                	mov    %esp,%ebp
   17b8c:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17b8f:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b94:	83 ec 0c             	sub    $0xc,%esp
   17b97:	50                   	push   %eax
   17b98:	e8 54 f8 ff ff       	call   173f1 <fs_protect>
   17b9d:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->closedir(root_fs, dir);
   17ba0:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17ba5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17bab:	8b 40 2c             	mov    0x2c(%eax),%eax
   17bae:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17bb4:	83 ec 08             	sub    $0x8,%esp
   17bb7:	ff 75 08             	push   0x8(%ebp)
   17bba:	52                   	push   %edx
   17bbb:	ff d0                	call   *%eax
   17bbd:	83 c4 10             	add    $0x10,%esp
   17bc0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17bc3:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bc8:	83 ec 0c             	sub    $0xc,%esp
   17bcb:	50                   	push   %eax
   17bcc:	e8 4b f8 ff ff       	call   1741c <fs_unprotect>
   17bd1:	83 c4 10             	add    $0x10,%esp
	return err;
   17bd4:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17bd7:	c9                   	leave  
   17bd8:	c3                   	ret    

00017bd9 <sys_unlink>:

int sys_unlink (const char * path) {
   17bd9:	55                   	push   %ebp
   17bda:	89 e5                	mov    %esp,%ebp
   17bdc:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17bdf:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17be4:	83 ec 0c             	sub    $0xc,%esp
   17be7:	50                   	push   %eax
   17be8:	e8 04 f8 ff ff       	call   173f1 <fs_protect>
   17bed:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->unlink(root_fs, path);
   17bf0:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bf5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17bfb:	8b 40 30             	mov    0x30(%eax),%eax
   17bfe:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17c04:	83 ec 08             	sub    $0x8,%esp
   17c07:	ff 75 08             	push   0x8(%ebp)
   17c0a:	52                   	push   %edx
   17c0b:	ff d0                	call   *%eax
   17c0d:	83 c4 10             	add    $0x10,%esp
   17c10:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17c13:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17c18:	83 ec 0c             	sub    $0xc,%esp
   17c1b:	50                   	push   %eax
   17c1c:	e8 fb f7 ff ff       	call   1741c <fs_unprotect>
   17c21:	83 c4 10             	add    $0x10,%esp
	return err;
   17c24:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17c27:	c9                   	leave  
   17c28:	c3                   	ret    

00017c29 <kernel_init>:
static boot_info_t * init_boot_info;        // 启动信息

/**
 * 内核入口
 */
void kernel_init (boot_info_t * boot_info) {
   17c29:	55                   	push   %ebp
   17c2a:	89 e5                	mov    %esp,%ebp
   17c2c:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   17c2f:	8b 45 08             	mov    0x8(%ebp),%eax
   17c32:	a3 a4 e0 05 00       	mov    %eax,0x5e0a4

    // 初始化CPU，再重新加载
    cpu_init();
   17c37:	e8 fe aa ff ff       	call   1273a <cpu_init>
    irq_init();
   17c3c:	e8 b3 b1 ff ff       	call   12df4 <irq_init>
    log_init();
   17c41:	e8 9a 0d 00 00       	call   189e0 <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   17c46:	83 ec 0c             	sub    $0xc,%esp
   17c49:	ff 75 08             	push   0x8(%ebp)
   17c4c:	e8 d3 90 ff ff       	call   10d24 <memory_init>
   17c51:	83 c4 10             	add    $0x10,%esp
    fs_init();
   17c54:	e8 05 f6 ff ff       	call   1725e <fs_init>

    time_init();
   17c59:	e8 06 d5 ff ff       	call   15164 <time_init>

    task_manager_init();
   17c5e:	e8 c1 98 ff ff       	call   11524 <task_manager_init>
}
   17c63:	90                   	nop
   17c64:	c9                   	leave  
   17c65:	c3                   	ret    

00017c66 <move_to_first_task>:


/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void) {
   17c66:	55                   	push   %ebp
   17c67:	89 e5                	mov    %esp,%ebp
   17c69:	56                   	push   %esi
   17c6a:	53                   	push   %ebx
   17c6b:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t * curr = task_current();
   17c6e:	e8 94 9a ff ff       	call   11707 <task_current>
   17c73:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17c76:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17c7a:	75 19                	jne    17c95 <move_to_first_task+0x2f>
   17c7c:	68 8c 9d 01 00       	push   $0x19d8c
   17c81:	68 30 9e 01 00       	push   $0x19e30
   17c86:	6a 37                	push   $0x37
   17c88:	68 98 9d 01 00       	push   $0x19d98
   17c8d:	e8 20 0b 00 00       	call   187b2 <panic>
   17c92:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   17c95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17c98:	05 44 02 00 00       	add    $0x244,%eax
   17c9d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			// SS
        "push %[esp]\n\t"			// ESP
        "push %[eflags]\n\t"           // EFLAGS
        "push %[cs]\n\t"			// CS
        "push %[eip]\n\t"		    // ip
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   17ca0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17ca3:	8b 40 50             	mov    0x50(%eax),%eax
   17ca6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17ca9:	8b 52 38             	mov    0x38(%edx),%edx
   17cac:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17caf:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip));
   17cb2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17cb5:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17cb8:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17cbb:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   17cbe:	50                   	push   %eax
   17cbf:	52                   	push   %edx
   17cc0:	51                   	push   %ecx
   17cc1:	53                   	push   %ebx
   17cc2:	56                   	push   %esi
   17cc3:	cf                   	iret   
}
   17cc4:	90                   	nop
   17cc5:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17cc8:	5b                   	pop    %ebx
   17cc9:	5e                   	pop    %esi
   17cca:	5d                   	pop    %ebp
   17ccb:	c3                   	ret    

00017ccc <init_main>:

void init_main(void) {
   17ccc:	55                   	push   %ebp
   17ccd:	89 e5                	mov    %esp,%ebp
   17ccf:	83 ec 08             	sub    $0x8,%esp
    log_printf("==============================");
   17cd2:	83 ec 0c             	sub    $0xc,%esp
   17cd5:	68 d0 9d 01 00       	push   $0x19dd0
   17cda:	e8 30 0d 00 00       	call   18a0f <log_printf>
   17cdf:	83 c4 10             	add    $0x10,%esp
    log_printf("Kernel is running....");
   17ce2:	83 ec 0c             	sub    $0xc,%esp
   17ce5:	68 ef 9d 01 00       	push   $0x19def
   17cea:	e8 20 0d 00 00       	call   18a0f <log_printf>
   17cef:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s, name: %s", OS_VERSION, "tiny x86 os");
   17cf2:	83 ec 04             	sub    $0x4,%esp
   17cf5:	68 05 9e 01 00       	push   $0x19e05
   17cfa:	68 11 9e 01 00       	push   $0x19e11
   17cff:	68 17 9e 01 00       	push   $0x19e17
   17d04:	e8 06 0d 00 00       	call   18a0f <log_printf>
   17d09:	83 c4 10             	add    $0x10,%esp
    log_printf("==============================");
   17d0c:	83 ec 0c             	sub    $0xc,%esp
   17d0f:	68 d0 9d 01 00       	push   $0x19dd0
   17d14:	e8 f6 0c 00 00       	call   18a0f <log_printf>
   17d19:	83 c4 10             	add    $0x10,%esp

    // 初始化任务
    task_first_init();
   17d1c:	e8 04 97 ff ff       	call   11425 <task_first_init>
    move_to_first_task();
   17d21:	e8 40 ff ff ff       	call   17c66 <move_to_first_task>
}
   17d26:	90                   	nop
   17d27:	c9                   	leave  
   17d28:	c3                   	ret    

00017d29 <list_count>:
static inline int list_count(list_t *list) {
   17d29:	55                   	push   %ebp
   17d2a:	89 e5                	mov    %esp,%ebp
    return list->count;
   17d2c:	8b 45 08             	mov    0x8(%ebp),%eax
   17d2f:	8b 40 08             	mov    0x8(%eax),%eax
}
   17d32:	5d                   	pop    %ebp
   17d33:	c3                   	ret    

00017d34 <mutex_init>:
#include "ipc/mutex.h"

/**
 * 锁初始化
 */
void mutex_init (mutex_t * mutex) {
   17d34:	55                   	push   %ebp
   17d35:	89 e5                	mov    %esp,%ebp
   17d37:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   17d3a:	8b 45 08             	mov    0x8(%ebp),%eax
   17d3d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   17d44:	8b 45 08             	mov    0x8(%ebp),%eax
   17d47:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   17d4d:	8b 45 08             	mov    0x8(%ebp),%eax
   17d50:	83 c0 08             	add    $0x8,%eax
   17d53:	83 ec 0c             	sub    $0xc,%esp
   17d56:	50                   	push   %eax
   17d57:	e8 9f 0a 00 00       	call   187fb <list_init>
   17d5c:	83 c4 10             	add    $0x10,%esp
}
   17d5f:	90                   	nop
   17d60:	c9                   	leave  
   17d61:	c3                   	ret    

00017d62 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock (mutex_t * mutex) {
   17d62:	55                   	push   %ebp
   17d63:	89 e5                	mov    %esp,%ebp
   17d65:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17d68:	e8 97 b3 ff ff       	call   13104 <irq_enter_protection>
   17d6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   17d70:	e8 92 99 ff ff       	call   11707 <task_current>
   17d75:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   17d78:	8b 45 08             	mov    0x8(%ebp),%eax
   17d7b:	8b 40 04             	mov    0x4(%eax),%eax
   17d7e:	85 c0                	test   %eax,%eax
   17d80:	75 14                	jne    17d96 <mutex_lock+0x34>
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   17d82:	8b 45 08             	mov    0x8(%ebp),%eax
   17d85:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   17d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   17d8f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17d92:	89 10                	mov    %edx,(%eax)
   17d94:	eb 52                	jmp    17de8 <mutex_lock+0x86>
    } else if (mutex->owner == curr) {
   17d96:	8b 45 08             	mov    0x8(%ebp),%eax
   17d99:	8b 00                	mov    (%eax),%eax
   17d9b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17d9e:	75 11                	jne    17db1 <mutex_lock+0x4f>
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   17da0:	8b 45 08             	mov    0x8(%ebp),%eax
   17da3:	8b 40 04             	mov    0x4(%eax),%eax
   17da6:	8d 50 01             	lea    0x1(%eax),%edx
   17da9:	8b 45 08             	mov    0x8(%ebp),%eax
   17dac:	89 50 04             	mov    %edx,0x4(%eax)
   17daf:	eb 37                	jmp    17de8 <mutex_lock+0x86>
    } else {
        // 有其它任务占用，则进入队列等待
        task_t * curr = task_current();
   17db1:	e8 51 99 ff ff       	call   11707 <task_current>
   17db6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   17db9:	83 ec 0c             	sub    $0xc,%esp
   17dbc:	ff 75 ec             	push   -0x14(%ebp)
   17dbf:	e8 75 98 ff ff       	call   11639 <task_set_block>
   17dc4:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   17dc7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17dca:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17dd0:	8b 45 08             	mov    0x8(%ebp),%eax
   17dd3:	83 c0 08             	add    $0x8,%eax
   17dd6:	83 ec 08             	sub    $0x8,%esp
   17dd9:	52                   	push   %edx
   17dda:	50                   	push   %eax
   17ddb:	e8 9f 0a 00 00       	call   1887f <list_insert_last>
   17de0:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17de3:	e8 32 9a ff ff       	call   1181a <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17de8:	83 ec 0c             	sub    $0xc,%esp
   17deb:	ff 75 f4             	push   -0xc(%ebp)
   17dee:	e8 29 b3 ff ff       	call   1311c <irq_leave_protection>
   17df3:	83 c4 10             	add    $0x10,%esp
}
   17df6:	90                   	nop
   17df7:	c9                   	leave  
   17df8:	c3                   	ret    

00017df9 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock (mutex_t * mutex) {
   17df9:	55                   	push   %ebp
   17dfa:	89 e5                	mov    %esp,%ebp
   17dfc:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17dff:	e8 00 b3 ff ff       	call   13104 <irq_enter_protection>
   17e04:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t * curr = task_current();
   17e07:	e8 fb 98 ff ff       	call   11707 <task_current>
   17e0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   17e0f:	8b 45 08             	mov    0x8(%ebp),%eax
   17e12:	8b 00                	mov    (%eax),%eax
   17e14:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17e17:	0f 85 8a 00 00 00    	jne    17ea7 <mutex_unlock+0xae>
        if (--mutex->locked_count == 0) {
   17e1d:	8b 45 08             	mov    0x8(%ebp),%eax
   17e20:	8b 40 04             	mov    0x4(%eax),%eax
   17e23:	8d 50 ff             	lea    -0x1(%eax),%edx
   17e26:	8b 45 08             	mov    0x8(%ebp),%eax
   17e29:	89 50 04             	mov    %edx,0x4(%eax)
   17e2c:	8b 45 08             	mov    0x8(%ebp),%eax
   17e2f:	8b 40 04             	mov    0x4(%eax),%eax
   17e32:	85 c0                	test   %eax,%eax
   17e34:	75 71                	jne    17ea7 <mutex_unlock+0xae>
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   17e36:	8b 45 08             	mov    0x8(%ebp),%eax
   17e39:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list)) {
   17e3f:	8b 45 08             	mov    0x8(%ebp),%eax
   17e42:	83 c0 08             	add    $0x8,%eax
   17e45:	83 ec 0c             	sub    $0xc,%esp
   17e48:	50                   	push   %eax
   17e49:	e8 db fe ff ff       	call   17d29 <list_count>
   17e4e:	83 c4 10             	add    $0x10,%esp
   17e51:	85 c0                	test   %eax,%eax
   17e53:	74 52                	je     17ea7 <mutex_unlock+0xae>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   17e55:	8b 45 08             	mov    0x8(%ebp),%eax
   17e58:	83 c0 08             	add    $0x8,%eax
   17e5b:	83 ec 0c             	sub    $0xc,%esp
   17e5e:	50                   	push   %eax
   17e5f:	e8 7f 0a 00 00       	call   188e3 <list_remove_first>
   17e64:	83 c4 10             	add    $0x10,%esp
   17e67:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   17e6a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17e6e:	74 0a                	je     17e7a <mutex_unlock+0x81>
   17e70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17e73:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17e78:	eb 05                	jmp    17e7f <mutex_unlock+0x86>
   17e7a:	b8 00 00 00 00       	mov    $0x0,%eax
   17e7f:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   17e82:	83 ec 0c             	sub    $0xc,%esp
   17e85:	ff 75 e8             	push   -0x18(%ebp)
   17e88:	e8 78 97 ff ff       	call   11605 <task_set_ready>
   17e8d:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   17e90:	8b 45 08             	mov    0x8(%ebp),%eax
   17e93:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   17e9a:	8b 45 08             	mov    0x8(%ebp),%eax
   17e9d:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17ea0:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   17ea2:	e8 73 99 ff ff       	call   1181a <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   17ea7:	83 ec 0c             	sub    $0xc,%esp
   17eaa:	ff 75 f4             	push   -0xc(%ebp)
   17ead:	e8 6a b2 ff ff       	call   1311c <irq_leave_protection>
   17eb2:	83 c4 10             	add    $0x10,%esp
}
   17eb5:	90                   	nop
   17eb6:	c9                   	leave  
   17eb7:	c3                   	ret    

00017eb8 <list_count>:
static inline int list_count(list_t *list) {
   17eb8:	55                   	push   %ebp
   17eb9:	89 e5                	mov    %esp,%ebp
    return list->count;
   17ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   17ebe:	8b 40 08             	mov    0x8(%eax),%eax
}
   17ec1:	5d                   	pop    %ebp
   17ec2:	c3                   	ret    

00017ec3 <sem_init>:
#include "ipc/sem.h"

/**
 * 信号量初始化
 */
void sem_init (sem_t * sem, int init_count) {
   17ec3:	55                   	push   %ebp
   17ec4:	89 e5                	mov    %esp,%ebp
   17ec6:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   17ec9:	8b 45 08             	mov    0x8(%ebp),%eax
   17ecc:	8b 55 0c             	mov    0xc(%ebp),%edx
   17ecf:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17ed1:	8b 45 08             	mov    0x8(%ebp),%eax
   17ed4:	83 c0 04             	add    $0x4,%eax
   17ed7:	83 ec 0c             	sub    $0xc,%esp
   17eda:	50                   	push   %eax
   17edb:	e8 1b 09 00 00       	call   187fb <list_init>
   17ee0:	83 c4 10             	add    $0x10,%esp
}
   17ee3:	90                   	nop
   17ee4:	c9                   	leave  
   17ee5:	c3                   	ret    

00017ee6 <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait (sem_t * sem) {
   17ee6:	55                   	push   %ebp
   17ee7:	89 e5                	mov    %esp,%ebp
   17ee9:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17eec:	e8 13 b2 ff ff       	call   13104 <irq_enter_protection>
   17ef1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   17ef4:	8b 45 08             	mov    0x8(%ebp),%eax
   17ef7:	8b 00                	mov    (%eax),%eax
   17ef9:	85 c0                	test   %eax,%eax
   17efb:	7e 0f                	jle    17f0c <sem_wait+0x26>
        sem->count--;
   17efd:	8b 45 08             	mov    0x8(%ebp),%eax
   17f00:	8b 00                	mov    (%eax),%eax
   17f02:	8d 50 ff             	lea    -0x1(%eax),%edx
   17f05:	8b 45 08             	mov    0x8(%ebp),%eax
   17f08:	89 10                	mov    %edx,(%eax)
   17f0a:	eb 37                	jmp    17f43 <sem_wait+0x5d>
    } else {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t * curr = task_current();
   17f0c:	e8 f6 97 ff ff       	call   11707 <task_current>
   17f11:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   17f14:	83 ec 0c             	sub    $0xc,%esp
   17f17:	ff 75 f0             	push   -0x10(%ebp)
   17f1a:	e8 1a 97 ff ff       	call   11639 <task_set_block>
   17f1f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   17f22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f25:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17f2b:	8b 45 08             	mov    0x8(%ebp),%eax
   17f2e:	83 c0 04             	add    $0x4,%eax
   17f31:	83 ec 08             	sub    $0x8,%esp
   17f34:	52                   	push   %edx
   17f35:	50                   	push   %eax
   17f36:	e8 44 09 00 00       	call   1887f <list_insert_last>
   17f3b:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17f3e:	e8 d7 98 ff ff       	call   1181a <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17f43:	83 ec 0c             	sub    $0xc,%esp
   17f46:	ff 75 f4             	push   -0xc(%ebp)
   17f49:	e8 ce b1 ff ff       	call   1311c <irq_leave_protection>
   17f4e:	83 c4 10             	add    $0x10,%esp
}
   17f51:	90                   	nop
   17f52:	c9                   	leave  
   17f53:	c3                   	ret    

00017f54 <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify (sem_t * sem) {
   17f54:	55                   	push   %ebp
   17f55:	89 e5                	mov    %esp,%ebp
   17f57:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17f5a:	e8 a5 b1 ff ff       	call   13104 <irq_enter_protection>
   17f5f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   17f62:	8b 45 08             	mov    0x8(%ebp),%eax
   17f65:	83 c0 04             	add    $0x4,%eax
   17f68:	83 ec 0c             	sub    $0xc,%esp
   17f6b:	50                   	push   %eax
   17f6c:	e8 47 ff ff ff       	call   17eb8 <list_count>
   17f71:	83 c4 10             	add    $0x10,%esp
   17f74:	85 c0                	test   %eax,%eax
   17f76:	74 42                	je     17fba <sem_notify+0x66>
        // 有进程等待，则唤醒加入就绪队列
        list_node_t * node = list_remove_first(&sem->wait_list);
   17f78:	8b 45 08             	mov    0x8(%ebp),%eax
   17f7b:	83 c0 04             	add    $0x4,%eax
   17f7e:	83 ec 0c             	sub    $0xc,%esp
   17f81:	50                   	push   %eax
   17f82:	e8 5c 09 00 00       	call   188e3 <list_remove_first>
   17f87:	83 c4 10             	add    $0x10,%esp
   17f8a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   17f8d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17f91:	74 0a                	je     17f9d <sem_notify+0x49>
   17f93:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f96:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17f9b:	eb 05                	jmp    17fa2 <sem_notify+0x4e>
   17f9d:	b8 00 00 00 00       	mov    $0x0,%eax
   17fa2:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   17fa5:	83 ec 0c             	sub    $0xc,%esp
   17fa8:	ff 75 ec             	push   -0x14(%ebp)
   17fab:	e8 55 96 ff ff       	call   11605 <task_set_ready>
   17fb0:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   17fb3:	e8 62 98 ff ff       	call   1181a <task_dispatch>
   17fb8:	eb 0d                	jmp    17fc7 <sem_notify+0x73>
    } else {
        sem->count++;
   17fba:	8b 45 08             	mov    0x8(%ebp),%eax
   17fbd:	8b 00                	mov    (%eax),%eax
   17fbf:	8d 50 01             	lea    0x1(%eax),%edx
   17fc2:	8b 45 08             	mov    0x8(%ebp),%eax
   17fc5:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   17fc7:	83 ec 0c             	sub    $0xc,%esp
   17fca:	ff 75 f4             	push   -0xc(%ebp)
   17fcd:	e8 4a b1 ff ff       	call   1311c <irq_leave_protection>
   17fd2:	83 c4 10             	add    $0x10,%esp
}
   17fd5:	90                   	nop
   17fd6:	c9                   	leave  
   17fd7:	c3                   	ret    

00017fd8 <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count (sem_t * sem) {
   17fd8:	55                   	push   %ebp
   17fd9:	89 e5                	mov    %esp,%ebp
   17fdb:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17fde:	e8 21 b1 ff ff       	call   13104 <irq_enter_protection>
   17fe3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   17fe6:	8b 45 08             	mov    0x8(%ebp),%eax
   17fe9:	8b 00                	mov    (%eax),%eax
   17feb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   17fee:	83 ec 0c             	sub    $0xc,%esp
   17ff1:	ff 75 f4             	push   -0xc(%ebp)
   17ff4:	e8 23 b1 ff ff       	call   1311c <irq_leave_protection>
   17ff9:	83 c4 10             	add    $0x10,%esp
    return count;
   17ffc:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   17fff:	c9                   	leave  
   18000:	c3                   	ret    

00018001 <bitmap_byte_count>:
#include "tools/klib.h"

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count (int bit_count) {
   18001:	55                   	push   %ebp
   18002:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;         // 向上取整
   18004:	8b 45 08             	mov    0x8(%ebp),%eax
   18007:	83 c0 07             	add    $0x7,%eax
   1800a:	8d 50 07             	lea    0x7(%eax),%edx
   1800d:	85 c0                	test   %eax,%eax
   1800f:	0f 48 c2             	cmovs  %edx,%eax
   18012:	c1 f8 03             	sar    $0x3,%eax
}
   18015:	5d                   	pop    %ebp
   18016:	c3                   	ret    

00018017 <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   18017:	55                   	push   %ebp
   18018:	89 e5                	mov    %esp,%ebp
   1801a:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1801d:	8b 45 08             	mov    0x8(%ebp),%eax
   18020:	8b 55 10             	mov    0x10(%ebp),%edx
   18023:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   18025:	8b 45 08             	mov    0x8(%ebp),%eax
   18028:	8b 55 0c             	mov    0xc(%ebp),%edx
   1802b:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1802e:	8b 45 08             	mov    0x8(%ebp),%eax
   18031:	8b 00                	mov    (%eax),%eax
   18033:	50                   	push   %eax
   18034:	e8 c8 ff ff ff       	call   18001 <bitmap_byte_count>
   18039:	83 c4 04             	add    $0x4,%esp
   1803c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   1803f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   18043:	74 07                	je     1804c <bitmap_init+0x35>
   18045:	ba ff 00 00 00       	mov    $0xff,%edx
   1804a:	eb 05                	jmp    18051 <bitmap_init+0x3a>
   1804c:	ba 00 00 00 00       	mov    $0x0,%edx
   18051:	8b 45 08             	mov    0x8(%ebp),%eax
   18054:	8b 40 04             	mov    0x4(%eax),%eax
   18057:	83 ec 04             	sub    $0x4,%esp
   1805a:	ff 75 f4             	push   -0xc(%ebp)
   1805d:	52                   	push   %edx
   1805e:	50                   	push   %eax
   1805f:	e8 01 04 00 00       	call   18465 <kernel_memset>
   18064:	83 c4 10             	add    $0x10,%esp
}
   18067:	90                   	nop
   18068:	c9                   	leave  
   18069:	c3                   	ret    

0001806a <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   1806a:	55                   	push   %ebp
   1806b:	89 e5                	mov    %esp,%ebp
   1806d:	56                   	push   %esi
   1806e:	53                   	push   %ebx
   1806f:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   18072:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   18079:	e9 92 00 00 00       	jmp    18110 <bitmap_set_bit+0xa6>
        // 可以考虑进行一定程序的优化!!
        if (bit) {
   1807e:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   18082:	74 42                	je     180c6 <bitmap_set_bit+0x5c>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   18084:	8b 45 08             	mov    0x8(%ebp),%eax
   18087:	8b 48 04             	mov    0x4(%eax),%ecx
   1808a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1808d:	8d 50 07             	lea    0x7(%eax),%edx
   18090:	85 c0                	test   %eax,%eax
   18092:	0f 48 c2             	cmovs  %edx,%eax
   18095:	c1 f8 03             	sar    $0x3,%eax
   18098:	89 c2                	mov    %eax,%edx
   1809a:	89 d0                	mov    %edx,%eax
   1809c:	01 c8                	add    %ecx,%eax
   1809e:	0f b6 00             	movzbl (%eax),%eax
   180a1:	89 c6                	mov    %eax,%esi
   180a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   180a6:	83 e0 07             	and    $0x7,%eax
   180a9:	bb 01 00 00 00       	mov    $0x1,%ebx
   180ae:	89 c1                	mov    %eax,%ecx
   180b0:	d3 e3                	shl    %cl,%ebx
   180b2:	89 d8                	mov    %ebx,%eax
   180b4:	89 f1                	mov    %esi,%ecx
   180b6:	09 c1                	or     %eax,%ecx
   180b8:	8b 45 08             	mov    0x8(%ebp),%eax
   180bb:	8b 40 04             	mov    0x4(%eax),%eax
   180be:	01 d0                	add    %edx,%eax
   180c0:	89 ca                	mov    %ecx,%edx
   180c2:	88 10                	mov    %dl,(%eax)
   180c4:	eb 42                	jmp    18108 <bitmap_set_bit+0x9e>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   180c6:	8b 45 08             	mov    0x8(%ebp),%eax
   180c9:	8b 48 04             	mov    0x4(%eax),%ecx
   180cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   180cf:	8d 50 07             	lea    0x7(%eax),%edx
   180d2:	85 c0                	test   %eax,%eax
   180d4:	0f 48 c2             	cmovs  %edx,%eax
   180d7:	c1 f8 03             	sar    $0x3,%eax
   180da:	89 c2                	mov    %eax,%edx
   180dc:	89 d0                	mov    %edx,%eax
   180de:	01 c8                	add    %ecx,%eax
   180e0:	0f b6 00             	movzbl (%eax),%eax
   180e3:	89 c6                	mov    %eax,%esi
   180e5:	8b 45 0c             	mov    0xc(%ebp),%eax
   180e8:	83 e0 07             	and    $0x7,%eax
   180eb:	bb 01 00 00 00       	mov    $0x1,%ebx
   180f0:	89 c1                	mov    %eax,%ecx
   180f2:	d3 e3                	shl    %cl,%ebx
   180f4:	89 d8                	mov    %ebx,%eax
   180f6:	f7 d0                	not    %eax
   180f8:	89 f1                	mov    %esi,%ecx
   180fa:	21 c1                	and    %eax,%ecx
   180fc:	8b 45 08             	mov    0x8(%ebp),%eax
   180ff:	8b 40 04             	mov    0x4(%eax),%eax
   18102:	01 d0                	add    %edx,%eax
   18104:	89 ca                	mov    %ecx,%edx
   18106:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   18108:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1810c:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   18110:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18113:	3b 45 10             	cmp    0x10(%ebp),%eax
   18116:	7d 0e                	jge    18126 <bitmap_set_bit+0xbc>
   18118:	8b 45 08             	mov    0x8(%ebp),%eax
   1811b:	8b 00                	mov    (%eax),%eax
   1811d:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18120:	0f 8c 58 ff ff ff    	jl     1807e <bitmap_set_bit+0x14>
        }
    }
} 
   18126:	90                   	nop
   18127:	83 c4 10             	add    $0x10,%esp
   1812a:	5b                   	pop    %ebx
   1812b:	5e                   	pop    %esi
   1812c:	5d                   	pop    %ebp
   1812d:	c3                   	ret    

0001812e <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit (bitmap_t * bitmap, int index) {
   1812e:	55                   	push   %ebp
   1812f:	89 e5                	mov    %esp,%ebp
    //return bitmap->bits[index / 8] & (1 << (index % 8));
    // 2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   18131:	8b 45 08             	mov    0x8(%ebp),%eax
   18134:	8b 48 04             	mov    0x4(%eax),%ecx
   18137:	8b 45 0c             	mov    0xc(%ebp),%eax
   1813a:	8d 50 07             	lea    0x7(%eax),%edx
   1813d:	85 c0                	test   %eax,%eax
   1813f:	0f 48 c2             	cmovs  %edx,%eax
   18142:	c1 f8 03             	sar    $0x3,%eax
   18145:	01 c8                	add    %ecx,%eax
   18147:	0f b6 00             	movzbl (%eax),%eax
   1814a:	0f b6 d0             	movzbl %al,%edx
   1814d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18150:	83 e0 07             	and    $0x7,%eax
   18153:	89 c1                	mov    %eax,%ecx
   18155:	d3 fa                	sar    %cl,%edx
   18157:	89 d0                	mov    %edx,%eax
   18159:	83 e0 01             	and    $0x1,%eax
}
   1815c:	5d                   	pop    %ebp
   1815d:	c3                   	ret    

0001815e <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set (bitmap_t * bitmap, int index) {
   1815e:	55                   	push   %ebp
   1815f:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   18161:	ff 75 0c             	push   0xc(%ebp)
   18164:	ff 75 08             	push   0x8(%ebp)
   18167:	e8 c2 ff ff ff       	call   1812e <bitmap_get_bit>
   1816c:	83 c4 08             	add    $0x8,%esp
   1816f:	85 c0                	test   %eax,%eax
   18171:	0f 95 c0             	setne  %al
   18174:	0f b6 c0             	movzbl %al,%eax
}
   18177:	c9                   	leave  
   18178:	c3                   	ret    

00018179 <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   18179:	55                   	push   %ebp
   1817a:	89 e5                	mov    %esp,%ebp
   1817c:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1817f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   18186:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   1818d:	e9 85 00 00 00       	jmp    18217 <bitmap_alloc_nbits+0x9e>
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   18192:	ff 75 fc             	push   -0x4(%ebp)
   18195:	ff 75 08             	push   0x8(%ebp)
   18198:	e8 91 ff ff ff       	call   1812e <bitmap_get_bit>
   1819d:	83 c4 08             	add    $0x8,%esp
   181a0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   181a3:	74 06                	je     181ab <bitmap_alloc_nbits+0x32>
            // 不同，继续寻找起始的bit
            search_idx++;
   181a5:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   181a9:	eb 6c                	jmp    18217 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   181ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181ae:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   181b1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   181b8:	eb 27                	jmp    181e1 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   181ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181bd:	8d 50 01             	lea    0x1(%eax),%edx
   181c0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   181c3:	50                   	push   %eax
   181c4:	ff 75 08             	push   0x8(%ebp)
   181c7:	e8 62 ff ff ff       	call   1812e <bitmap_get_bit>
   181cc:	83 c4 08             	add    $0x8,%esp
   181cf:	39 45 0c             	cmp    %eax,0xc(%ebp)
   181d2:	74 09                	je     181dd <bitmap_alloc_nbits+0x64>
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   181d4:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   181db:	eb 16                	jmp    181f3 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   181dd:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   181e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   181e4:	3b 45 10             	cmp    0x10(%ebp),%eax
   181e7:	7d 0a                	jge    181f3 <bitmap_alloc_nbits+0x7a>
   181e9:	8b 45 08             	mov    0x8(%ebp),%eax
   181ec:	8b 00                	mov    (%eax),%eax
   181ee:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   181f1:	7c c7                	jl     181ba <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count) {
   181f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   181f6:	3b 45 10             	cmp    0x10(%ebp),%eax
   181f9:	7c 1c                	jl     18217 <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   181fb:	8b 45 0c             	mov    0xc(%ebp),%eax
   181fe:	f7 d0                	not    %eax
   18200:	50                   	push   %eax
   18201:	ff 75 10             	push   0x10(%ebp)
   18204:	ff 75 f8             	push   -0x8(%ebp)
   18207:	ff 75 08             	push   0x8(%ebp)
   1820a:	e8 5b fe ff ff       	call   1806a <bitmap_set_bit>
   1820f:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   18212:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18215:	eb 13                	jmp    1822a <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   18217:	8b 45 08             	mov    0x8(%ebp),%eax
   1821a:	8b 00                	mov    (%eax),%eax
   1821c:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1821f:	0f 8c 6d ff ff ff    	jl     18192 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   18225:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1822a:	c9                   	leave  
   1822b:	c3                   	ret    

0001822c <hlt>:
static inline void hlt(void) {
   1822c:	55                   	push   %ebp
   1822d:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1822f:	f4                   	hlt    
}
   18230:	90                   	nop
   18231:	5d                   	pop    %ebp
   18232:	c3                   	ret    

00018233 <strings_count>:
#include "comm/cpu_instr.h"

/**
 * @brief 计算字符串的数量
 */
int strings_count (char ** start) {
   18233:	55                   	push   %ebp
   18234:	89 e5                	mov    %esp,%ebp
   18236:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   18239:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   18240:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18244:	74 15                	je     1825b <strings_count+0x28>
        while (*start++) {
   18246:	eb 04                	jmp    1824c <strings_count+0x19>
            count++;
   18248:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   1824c:	8b 45 08             	mov    0x8(%ebp),%eax
   1824f:	8d 50 04             	lea    0x4(%eax),%edx
   18252:	89 55 08             	mov    %edx,0x8(%ebp)
   18255:	8b 00                	mov    (%eax),%eax
   18257:	85 c0                	test   %eax,%eax
   18259:	75 ed                	jne    18248 <strings_count+0x15>
        }
    }
    return count;
   1825b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1825e:	c9                   	leave  
   1825f:	c3                   	ret    

00018260 <get_file_name>:


/**
 * @brief 从路径中解释文件名
 */
char * get_file_name (char * name) {
   18260:	55                   	push   %ebp
   18261:	89 e5                	mov    %esp,%ebp
   18263:	83 ec 10             	sub    $0x10,%esp
    char * s = name;
   18266:	8b 45 08             	mov    0x8(%ebp),%eax
   18269:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0') {
   1826c:	eb 04                	jmp    18272 <get_file_name+0x12>
        s++;
   1826e:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   18272:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18275:	0f b6 00             	movzbl (%eax),%eax
   18278:	84 c0                	test   %al,%al
   1827a:	75 f2                	jne    1826e <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   1827c:	eb 04                	jmp    18282 <get_file_name+0x22>
        s--;
   1827e:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   18282:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18285:	0f b6 00             	movzbl (%eax),%eax
   18288:	3c 5c                	cmp    $0x5c,%al
   1828a:	74 12                	je     1829e <get_file_name+0x3e>
   1828c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1828f:	0f b6 00             	movzbl (%eax),%eax
   18292:	3c 2f                	cmp    $0x2f,%al
   18294:	74 08                	je     1829e <get_file_name+0x3e>
   18296:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18299:	3b 45 08             	cmp    0x8(%ebp),%eax
   1829c:	73 e0                	jae    1827e <get_file_name+0x1e>
    }
    return s + 1;
   1829e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182a1:	83 c0 01             	add    $0x1,%eax
}
   182a4:	c9                   	leave  
   182a5:	c3                   	ret    

000182a6 <kernel_strcpy>:

void kernel_strcpy (char * dest, const char * src) {
   182a6:	55                   	push   %ebp
   182a7:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   182a9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182ad:	74 3b                	je     182ea <kernel_strcpy+0x44>
   182af:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   182b3:	74 35                	je     182ea <kernel_strcpy+0x44>
        return;
    }

    while (*dest && *src) {
   182b5:	eb 17                	jmp    182ce <kernel_strcpy+0x28>
        *dest++ = *src++;
   182b7:	8b 55 0c             	mov    0xc(%ebp),%edx
   182ba:	8d 42 01             	lea    0x1(%edx),%eax
   182bd:	89 45 0c             	mov    %eax,0xc(%ebp)
   182c0:	8b 45 08             	mov    0x8(%ebp),%eax
   182c3:	8d 48 01             	lea    0x1(%eax),%ecx
   182c6:	89 4d 08             	mov    %ecx,0x8(%ebp)
   182c9:	0f b6 12             	movzbl (%edx),%edx
   182cc:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   182ce:	8b 45 08             	mov    0x8(%ebp),%eax
   182d1:	0f b6 00             	movzbl (%eax),%eax
   182d4:	84 c0                	test   %al,%al
   182d6:	74 0a                	je     182e2 <kernel_strcpy+0x3c>
   182d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   182db:	0f b6 00             	movzbl (%eax),%eax
   182de:	84 c0                	test   %al,%al
   182e0:	75 d5                	jne    182b7 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   182e2:	8b 45 08             	mov    0x8(%ebp),%eax
   182e5:	c6 00 00             	movb   $0x0,(%eax)
   182e8:	eb 01                	jmp    182eb <kernel_strcpy+0x45>
        return;
   182ea:	90                   	nop
}
   182eb:	5d                   	pop    %ebp
   182ec:	c3                   	ret    

000182ed <kernel_strncpy>:

void kernel_strncpy(char * dest, const char * src, int size) {
   182ed:	55                   	push   %ebp
   182ee:	89 e5                	mov    %esp,%ebp
   182f0:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   182f3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182f7:	74 61                	je     1835a <kernel_strncpy+0x6d>
   182f9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   182fd:	74 5b                	je     1835a <kernel_strncpy+0x6d>
   182ff:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18303:	74 55                	je     1835a <kernel_strncpy+0x6d>
        return;
    }

    char * d = dest;
   18305:	8b 45 08             	mov    0x8(%ebp),%eax
   18308:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   1830b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1830e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   18311:	eb 17                	jmp    1832a <kernel_strncpy+0x3d>
        *d++ = *s++;
   18313:	8b 55 f8             	mov    -0x8(%ebp),%edx
   18316:	8d 42 01             	lea    0x1(%edx),%eax
   18319:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1831c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1831f:	8d 48 01             	lea    0x1(%eax),%ecx
   18322:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   18325:	0f b6 12             	movzbl (%edx),%edx
   18328:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   1832a:	8b 45 10             	mov    0x10(%ebp),%eax
   1832d:	8d 50 ff             	lea    -0x1(%eax),%edx
   18330:	89 55 10             	mov    %edx,0x10(%ebp)
   18333:	85 c0                	test   %eax,%eax
   18335:	7e 0a                	jle    18341 <kernel_strncpy+0x54>
   18337:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1833a:	0f b6 00             	movzbl (%eax),%eax
   1833d:	84 c0                	test   %al,%al
   1833f:	75 d2                	jne    18313 <kernel_strncpy+0x26>
    }
    if (size == 0) {
   18341:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18345:	75 0b                	jne    18352 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   18347:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1834a:	83 e8 01             	sub    $0x1,%eax
   1834d:	c6 00 00             	movb   $0x0,(%eax)
   18350:	eb 09                	jmp    1835b <kernel_strncpy+0x6e>
    } else {
        *d = '\0';
   18352:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18355:	c6 00 00             	movb   $0x0,(%eax)
   18358:	eb 01                	jmp    1835b <kernel_strncpy+0x6e>
        return;
   1835a:	90                   	nop
    }
}
   1835b:	c9                   	leave  
   1835c:	c3                   	ret    

0001835d <kernel_strlen>:

int kernel_strlen(const char * str) {
   1835d:	55                   	push   %ebp
   1835e:	89 e5                	mov    %esp,%ebp
   18360:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   18363:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18367:	75 07                	jne    18370 <kernel_strlen+0x13>
        return 0;
   18369:	b8 00 00 00 00       	mov    $0x0,%eax
   1836e:	eb 26                	jmp    18396 <kernel_strlen+0x39>
    }

	const char * c = str;
   18370:	8b 45 08             	mov    0x8(%ebp),%eax
   18373:	89 45 fc             	mov    %eax,-0x4(%ebp)

	int len = 0;
   18376:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while (*c++) {
   1837d:	eb 04                	jmp    18383 <kernel_strlen+0x26>
		len++;
   1837f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c++) {
   18383:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18386:	8d 50 01             	lea    0x1(%eax),%edx
   18389:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1838c:	0f b6 00             	movzbl (%eax),%eax
   1838f:	84 c0                	test   %al,%al
   18391:	75 ec                	jne    1837f <kernel_strlen+0x22>
	}

	return len;
   18393:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   18396:	c9                   	leave  
   18397:	c3                   	ret    

00018398 <kernel_strncmp>:

/**
 * 比较两个字符串，最多比较size个字符
 * 如果某一字符串提前比较完成，也算相同
 */
int kernel_strncmp (const char * s1, const char * s2, int size) {
   18398:	55                   	push   %ebp
   18399:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   1839b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1839f:	74 06                	je     183a7 <kernel_strncmp+0xf>
   183a1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   183a5:	75 13                	jne    183ba <kernel_strncmp+0x22>
        return -1;
   183a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   183ac:	eb 66                	jmp    18414 <kernel_strncmp+0x7c>
    }

    // 2023-3-18 这里size没有用到
    while (*s1 && *s2 && (*s1 == *s2) && size) {
    	s1++;
   183ae:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    	s2++;
   183b2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    	size--;
   183b6:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   183ba:	8b 45 08             	mov    0x8(%ebp),%eax
   183bd:	0f b6 00             	movzbl (%eax),%eax
   183c0:	84 c0                	test   %al,%al
   183c2:	74 20                	je     183e4 <kernel_strncmp+0x4c>
   183c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   183c7:	0f b6 00             	movzbl (%eax),%eax
   183ca:	84 c0                	test   %al,%al
   183cc:	74 16                	je     183e4 <kernel_strncmp+0x4c>
   183ce:	8b 45 08             	mov    0x8(%ebp),%eax
   183d1:	0f b6 10             	movzbl (%eax),%edx
   183d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   183d7:	0f b6 00             	movzbl (%eax),%eax
   183da:	38 c2                	cmp    %al,%dl
   183dc:	75 06                	jne    183e4 <kernel_strncmp+0x4c>
   183de:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   183e2:	75 ca                	jne    183ae <kernel_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   183e4:	8b 45 08             	mov    0x8(%ebp),%eax
   183e7:	0f b6 00             	movzbl (%eax),%eax
   183ea:	84 c0                	test   %al,%al
   183ec:	74 21                	je     1840f <kernel_strncmp+0x77>
   183ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   183f1:	0f b6 00             	movzbl (%eax),%eax
   183f4:	84 c0                	test   %al,%al
   183f6:	74 17                	je     1840f <kernel_strncmp+0x77>
   183f8:	8b 45 08             	mov    0x8(%ebp),%eax
   183fb:	0f b6 10             	movzbl (%eax),%edx
   183fe:	8b 45 0c             	mov    0xc(%ebp),%eax
   18401:	0f b6 00             	movzbl (%eax),%eax
   18404:	38 c2                	cmp    %al,%dl
   18406:	74 07                	je     1840f <kernel_strncmp+0x77>
   18408:	b8 01 00 00 00       	mov    $0x1,%eax
   1840d:	eb 05                	jmp    18414 <kernel_strncmp+0x7c>
   1840f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18414:	5d                   	pop    %ebp
   18415:	c3                   	ret    

00018416 <kernel_memcpy>:

void kernel_memcpy (void * dest, void * src, int size) {
   18416:	55                   	push   %ebp
   18417:	89 e5                	mov    %esp,%ebp
   18419:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1841c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18420:	74 40                	je     18462 <kernel_memcpy+0x4c>
   18422:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18426:	74 3a                	je     18462 <kernel_memcpy+0x4c>
   18428:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1842c:	74 34                	je     18462 <kernel_memcpy+0x4c>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   1842e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18431:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   18434:	8b 45 08             	mov    0x8(%ebp),%eax
   18437:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   1843a:	eb 17                	jmp    18453 <kernel_memcpy+0x3d>
        *d++ = *s++;
   1843c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1843f:	8d 42 01             	lea    0x1(%edx),%eax
   18442:	89 45 fc             	mov    %eax,-0x4(%ebp)
   18445:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18448:	8d 48 01             	lea    0x1(%eax),%ecx
   1844b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1844e:	0f b6 12             	movzbl (%edx),%edx
   18451:	88 10                	mov    %dl,(%eax)
    while (size--) {
   18453:	8b 45 10             	mov    0x10(%ebp),%eax
   18456:	8d 50 ff             	lea    -0x1(%eax),%edx
   18459:	89 55 10             	mov    %edx,0x10(%ebp)
   1845c:	85 c0                	test   %eax,%eax
   1845e:	75 dc                	jne    1843c <kernel_memcpy+0x26>
   18460:	eb 01                	jmp    18463 <kernel_memcpy+0x4d>
        return;
   18462:	90                   	nop
    }
}
   18463:	c9                   	leave  
   18464:	c3                   	ret    

00018465 <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   18465:	55                   	push   %ebp
   18466:	89 e5                	mov    %esp,%ebp
   18468:	83 ec 14             	sub    $0x14,%esp
   1846b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1846e:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   18471:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18475:	74 2c                	je     184a3 <kernel_memset+0x3e>
   18477:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1847b:	74 26                	je     184a3 <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   1847d:	8b 45 08             	mov    0x8(%ebp),%eax
   18480:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   18483:	eb 0f                	jmp    18494 <kernel_memset+0x2f>
        *d++ = v;
   18485:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18488:	8d 50 01             	lea    0x1(%eax),%edx
   1848b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1848e:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   18492:	88 10                	mov    %dl,(%eax)
    while (size--) {
   18494:	8b 45 10             	mov    0x10(%ebp),%eax
   18497:	8d 50 ff             	lea    -0x1(%eax),%edx
   1849a:	89 55 10             	mov    %edx,0x10(%ebp)
   1849d:	85 c0                	test   %eax,%eax
   1849f:	75 e4                	jne    18485 <kernel_memset+0x20>
   184a1:	eb 01                	jmp    184a4 <kernel_memset+0x3f>
        return;
   184a3:	90                   	nop
    }
}
   184a4:	c9                   	leave  
   184a5:	c3                   	ret    

000184a6 <kernel_memcmp>:

int kernel_memcmp (void * d1, void * d2, int size) {
   184a6:	55                   	push   %ebp
   184a7:	89 e5                	mov    %esp,%ebp
   184a9:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   184ac:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184b0:	74 06                	je     184b8 <kernel_memcmp+0x12>
   184b2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   184b6:	75 07                	jne    184bf <kernel_memcmp+0x19>
        return 1;
   184b8:	b8 01 00 00 00       	mov    $0x1,%eax
   184bd:	eb 43                	jmp    18502 <kernel_memcmp+0x5c>
    }

	uint8_t * p_d1 = (uint8_t *)d1;
   184bf:	8b 45 08             	mov    0x8(%ebp),%eax
   184c2:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t * p_d2 = (uint8_t *)d2;
   184c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   184c8:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (size--) {
   184cb:	eb 23                	jmp    184f0 <kernel_memcmp+0x4a>
		if (*p_d1++ != *p_d2++) {
   184cd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   184d0:	8d 50 01             	lea    0x1(%eax),%edx
   184d3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   184d6:	0f b6 08             	movzbl (%eax),%ecx
   184d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184dc:	8d 50 01             	lea    0x1(%eax),%edx
   184df:	89 55 f8             	mov    %edx,-0x8(%ebp)
   184e2:	0f b6 00             	movzbl (%eax),%eax
   184e5:	38 c1                	cmp    %al,%cl
   184e7:	74 07                	je     184f0 <kernel_memcmp+0x4a>
			return 1;
   184e9:	b8 01 00 00 00       	mov    $0x1,%eax
   184ee:	eb 12                	jmp    18502 <kernel_memcmp+0x5c>
	while (size--) {
   184f0:	8b 45 10             	mov    0x10(%ebp),%eax
   184f3:	8d 50 ff             	lea    -0x1(%eax),%edx
   184f6:	89 55 10             	mov    %edx,0x10(%ebp)
   184f9:	85 c0                	test   %eax,%eax
   184fb:	75 d0                	jne    184cd <kernel_memcmp+0x27>
		}
	}

	return 0;
   184fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18502:	c9                   	leave  
   18503:	c3                   	ret    

00018504 <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   18504:	55                   	push   %ebp
   18505:	89 e5                	mov    %esp,%ebp
   18507:	53                   	push   %ebx
   18508:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   1850b:	8b 45 08             	mov    0x8(%ebp),%eax
   1850e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   18511:	8b 45 0c             	mov    0xc(%ebp),%eax
   18514:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   18517:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   1851b:	74 1d                	je     1853a <kernel_itoa+0x36>
   1851d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   18521:	74 17                	je     1853a <kernel_itoa+0x36>
   18523:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18527:	74 11                	je     1853a <kernel_itoa+0x36>
   18529:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1852d:	74 0b                	je     1853a <kernel_itoa+0x36>
        *p = '\0';
   1852f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18532:	c6 00 00             	movb   $0x0,(%eax)
        return;
   18535:	e9 03 01 00 00       	jmp    1863d <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   1853a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   18541:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18545:	79 19                	jns    18560 <kernel_itoa+0x5c>
   18547:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1854b:	75 13                	jne    18560 <kernel_itoa+0x5c>
        *p++ = '-';
   1854d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18550:	8d 50 01             	lea    0x1(%eax),%edx
   18553:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18556:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   18559:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   18560:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18564:	74 3b                	je     185a1 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   18566:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   1856c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1856f:	99                   	cltd   
   18570:	f7 7d 10             	idivl  0x10(%ebp)
   18573:	89 d0                	mov    %edx,%eax
   18575:	83 c0 0f             	add    $0xf,%eax
   18578:	01 c8                	add    %ecx,%eax
   1857a:	0f b6 00             	movzbl (%eax),%eax
   1857d:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   18580:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18583:	8d 50 01             	lea    0x1(%eax),%edx
   18586:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18589:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1858d:	88 10                	mov    %dl,(%eax)
            num /= base;
   1858f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18592:	99                   	cltd   
   18593:	f7 7d 10             	idivl  0x10(%ebp)
   18596:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   18599:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1859d:	75 c7                	jne    18566 <kernel_itoa+0x62>
   1859f:	eb 4b                	jmp    185ec <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   185a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   185a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   185a7:	8b 1d 74 a1 01 00    	mov    0x1a174,%ebx
   185ad:	8b 4d 10             	mov    0x10(%ebp),%ecx
   185b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   185b3:	ba 00 00 00 00       	mov    $0x0,%edx
   185b8:	f7 f1                	div    %ecx
   185ba:	89 d0                	mov    %edx,%eax
   185bc:	83 c0 0f             	add    $0xf,%eax
   185bf:	01 d8                	add    %ebx,%eax
   185c1:	0f b6 00             	movzbl (%eax),%eax
   185c4:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   185c7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   185ca:	8d 50 01             	lea    0x1(%eax),%edx
   185cd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185d0:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   185d4:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   185d6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   185d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   185dc:	ba 00 00 00 00       	mov    $0x0,%edx
   185e1:	f7 f3                	div    %ebx
   185e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   185e6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   185ea:	75 bb                	jne    185a7 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   185ec:	8b 45 f8             	mov    -0x8(%ebp),%eax
   185ef:	8d 50 ff             	lea    -0x1(%eax),%edx
   185f2:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185f5:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char * start = (!signed_num) ? buf : buf + 1;
   185f8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   185fc:	74 08                	je     18606 <kernel_itoa+0x102>
   185fe:	8b 45 08             	mov    0x8(%ebp),%eax
   18601:	83 c0 01             	add    $0x1,%eax
   18604:	eb 03                	jmp    18609 <kernel_itoa+0x105>
   18606:	8b 45 08             	mov    0x8(%ebp),%eax
   18609:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   1860c:	eb 27                	jmp    18635 <kernel_itoa+0x131>
        char ch = *start;
   1860e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18611:	0f b6 00             	movzbl (%eax),%eax
   18614:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   18617:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1861a:	0f b6 10             	movzbl (%eax),%edx
   1861d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18620:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   18622:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18625:	8d 50 ff             	lea    -0x1(%eax),%edx
   18628:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1862b:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1862f:	88 10                	mov    %dl,(%eax)
        start++;
   18631:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   18635:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18638:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1863b:	72 d1                	jb     1860e <kernel_itoa+0x10a>
    }
}
   1863d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   18640:	c9                   	leave  
   18641:	c3                   	ret    

00018642 <kernel_sprintf>:

/**
 * @brief 格式化字符串到缓存中
 */
void kernel_sprintf(char * buffer, const char * fmt, ...) {
   18642:	55                   	push   %ebp
   18643:	89 e5                	mov    %esp,%ebp
   18645:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   18648:	8d 45 10             	lea    0x10(%ebp),%eax
   1864b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   1864e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18651:	83 ec 04             	sub    $0x4,%esp
   18654:	50                   	push   %eax
   18655:	ff 75 0c             	push   0xc(%ebp)
   18658:	ff 75 08             	push   0x8(%ebp)
   1865b:	e8 06 00 00 00       	call   18666 <kernel_vsprintf>
   18660:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   18663:	90                   	nop
   18664:	c9                   	leave  
   18665:	c3                   	ret    

00018666 <kernel_vsprintf>:

/**
 * 格式化字符串
 */
void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   18666:	55                   	push   %ebp
   18667:	89 e5                	mov    %esp,%ebp
   18669:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   1866c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   18673:	8b 45 08             	mov    0x8(%ebp),%eax
   18676:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   18679:	e9 17 01 00 00       	jmp    18795 <kernel_vsprintf+0x12f>
        switch (state) {
   1867e:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   18682:	74 0b                	je     1868f <kernel_vsprintf+0x29>
   18684:	83 7d fc 01          	cmpl   $0x1,-0x4(%ebp)
   18688:	74 2b                	je     186b5 <kernel_vsprintf+0x4f>
   1868a:	e9 06 01 00 00       	jmp    18795 <kernel_vsprintf+0x12f>
            // 普通字符
            case NORMAL:
                if (ch == '%') {
   1868f:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   18693:	75 0c                	jne    186a1 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   18695:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1869c:	e9 f4 00 00 00       	jmp    18795 <kernel_vsprintf+0x12f>
                } else {
                    *curr++ = ch;
   186a1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   186a4:	8d 50 01             	lea    0x1(%eax),%edx
   186a7:	89 55 f8             	mov    %edx,-0x8(%ebp)
   186aa:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   186ae:	88 10                	mov    %dl,(%eax)
                }
                break;
   186b0:	e9 e0 00 00 00       	jmp    18795 <kernel_vsprintf+0x12f>
            // 格式化控制字符，只支持部分
            case READ_FMT:
                if (ch == 'd') {
   186b5:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   186b9:	75 31                	jne    186ec <kernel_vsprintf+0x86>
                    int num = va_arg(args, int);
   186bb:	8b 45 10             	mov    0x10(%ebp),%eax
   186be:	8d 50 04             	lea    0x4(%eax),%edx
   186c1:	89 55 10             	mov    %edx,0x10(%ebp)
   186c4:	8b 00                	mov    (%eax),%eax
   186c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   186c9:	6a 0a                	push   $0xa
   186cb:	ff 75 e4             	push   -0x1c(%ebp)
   186ce:	ff 75 f8             	push   -0x8(%ebp)
   186d1:	e8 2e fe ff ff       	call   18504 <kernel_itoa>
   186d6:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   186d9:	ff 75 f8             	push   -0x8(%ebp)
   186dc:	e8 7c fc ff ff       	call   1835d <kernel_strlen>
   186e1:	83 c4 04             	add    $0x4,%esp
   186e4:	01 45 f8             	add    %eax,-0x8(%ebp)
   186e7:	e9 a1 00 00 00       	jmp    1878d <kernel_vsprintf+0x127>
                } else if (ch == 'x') {
   186ec:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   186f0:	75 2e                	jne    18720 <kernel_vsprintf+0xba>
                    int num = va_arg(args, int);
   186f2:	8b 45 10             	mov    0x10(%ebp),%eax
   186f5:	8d 50 04             	lea    0x4(%eax),%edx
   186f8:	89 55 10             	mov    %edx,0x10(%ebp)
   186fb:	8b 00                	mov    (%eax),%eax
   186fd:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   18700:	6a 10                	push   $0x10
   18702:	ff 75 e8             	push   -0x18(%ebp)
   18705:	ff 75 f8             	push   -0x8(%ebp)
   18708:	e8 f7 fd ff ff       	call   18504 <kernel_itoa>
   1870d:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   18710:	ff 75 f8             	push   -0x8(%ebp)
   18713:	e8 45 fc ff ff       	call   1835d <kernel_strlen>
   18718:	83 c4 04             	add    $0x4,%esp
   1871b:	01 45 f8             	add    %eax,-0x8(%ebp)
   1871e:	eb 6d                	jmp    1878d <kernel_vsprintf+0x127>
                } else if (ch == 'c') {
   18720:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   18724:	75 1f                	jne    18745 <kernel_vsprintf+0xdf>
                    char c = va_arg(args, int);
   18726:	8b 45 10             	mov    0x10(%ebp),%eax
   18729:	8d 50 04             	lea    0x4(%eax),%edx
   1872c:	89 55 10             	mov    %edx,0x10(%ebp)
   1872f:	8b 00                	mov    (%eax),%eax
   18731:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   18734:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18737:	8d 50 01             	lea    0x1(%eax),%edx
   1873a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1873d:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   18741:	88 10                	mov    %dl,(%eax)
   18743:	eb 48                	jmp    1878d <kernel_vsprintf+0x127>
                } else if (ch == 's') {
   18745:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   18749:	75 42                	jne    1878d <kernel_vsprintf+0x127>
                    const char * str = va_arg(args, char *);
   1874b:	8b 45 10             	mov    0x10(%ebp),%eax
   1874e:	8d 50 04             	lea    0x4(%eax),%edx
   18751:	89 55 10             	mov    %edx,0x10(%ebp)
   18754:	8b 00                	mov    (%eax),%eax
   18756:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   18759:	ff 75 f4             	push   -0xc(%ebp)
   1875c:	e8 fc fb ff ff       	call   1835d <kernel_strlen>
   18761:	83 c4 04             	add    $0x4,%esp
   18764:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   18767:	eb 17                	jmp    18780 <kernel_vsprintf+0x11a>
                        *curr++ = *str++;
   18769:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1876c:	8d 42 01             	lea    0x1(%edx),%eax
   1876f:	89 45 f4             	mov    %eax,-0xc(%ebp)
   18772:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18775:	8d 48 01             	lea    0x1(%eax),%ecx
   18778:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1877b:	0f b6 12             	movzbl (%edx),%edx
   1877e:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   18780:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18783:	8d 50 ff             	lea    -0x1(%eax),%edx
   18786:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18789:	85 c0                	test   %eax,%eax
   1878b:	75 dc                	jne    18769 <kernel_vsprintf+0x103>
                    }
                }
                state = NORMAL;
   1878d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   18794:	90                   	nop
    while ((ch = *fmt++)) {
   18795:	8b 45 0c             	mov    0xc(%ebp),%eax
   18798:	8d 50 01             	lea    0x1(%eax),%edx
   1879b:	89 55 0c             	mov    %edx,0xc(%ebp)
   1879e:	0f b6 00             	movzbl (%eax),%eax
   187a1:	88 45 ef             	mov    %al,-0x11(%ebp)
   187a4:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   187a8:	0f 85 d0 fe ff ff    	jne    1867e <kernel_vsprintf+0x18>
        }
    }
}
   187ae:	90                   	nop
   187af:	90                   	nop
   187b0:	c9                   	leave  
   187b1:	c3                   	ret    

000187b2 <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   187b2:	55                   	push   %ebp
   187b3:	89 e5                	mov    %esp,%ebp
   187b5:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   187b8:	83 ec 08             	sub    $0x8,%esp
   187bb:	ff 75 14             	push   0x14(%ebp)
   187be:	68 44 9e 01 00       	push   $0x19e44
   187c3:	e8 47 02 00 00       	call   18a0f <log_printf>
   187c8:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   187cb:	ff 75 10             	push   0x10(%ebp)
   187ce:	ff 75 0c             	push   0xc(%ebp)
   187d1:	ff 75 08             	push   0x8(%ebp)
   187d4:	68 56 9e 01 00       	push   $0x19e56
   187d9:	e8 31 02 00 00       	call   18a0f <log_printf>
   187de:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   187e1:	e8 46 fa ff ff       	call   1822c <hlt>
   187e6:	eb f9                	jmp    187e1 <panic+0x2f>

000187e8 <list_is_empty>:
static inline int list_is_empty(list_t *list) {
   187e8:	55                   	push   %ebp
   187e9:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   187eb:	8b 45 08             	mov    0x8(%ebp),%eax
   187ee:	8b 40 08             	mov    0x8(%eax),%eax
   187f1:	85 c0                	test   %eax,%eax
   187f3:	0f 94 c0             	sete   %al
   187f6:	0f b6 c0             	movzbl %al,%eax
}
   187f9:	5d                   	pop    %ebp
   187fa:	c3                   	ret    

000187fb <list_init>:

/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list) {
   187fb:	55                   	push   %ebp
   187fc:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   187fe:	8b 45 08             	mov    0x8(%ebp),%eax
   18801:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18808:	8b 45 08             	mov    0x8(%ebp),%eax
   1880b:	8b 50 04             	mov    0x4(%eax),%edx
   1880e:	8b 45 08             	mov    0x8(%ebp),%eax
   18811:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   18813:	8b 45 08             	mov    0x8(%ebp),%eax
   18816:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   1881d:	90                   	nop
   1881e:	5d                   	pop    %ebp
   1881f:	c3                   	ret    

00018820 <list_insert_first>:
/**
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node) {
   18820:	55                   	push   %ebp
   18821:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   18823:	8b 45 08             	mov    0x8(%ebp),%eax
   18826:	8b 10                	mov    (%eax),%edx
   18828:	8b 45 0c             	mov    0xc(%ebp),%eax
   1882b:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   1882e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18831:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list)) {
   18837:	ff 75 08             	push   0x8(%ebp)
   1883a:	e8 a9 ff ff ff       	call   187e8 <list_is_empty>
   1883f:	83 c4 04             	add    $0x4,%esp
   18842:	85 c0                	test   %eax,%eax
   18844:	74 15                	je     1885b <list_insert_first+0x3b>
        list->last = list->first = node;
   18846:	8b 45 08             	mov    0x8(%ebp),%eax
   18849:	8b 55 0c             	mov    0xc(%ebp),%edx
   1884c:	89 10                	mov    %edx,(%eax)
   1884e:	8b 45 08             	mov    0x8(%ebp),%eax
   18851:	8b 10                	mov    (%eax),%edx
   18853:	8b 45 08             	mov    0x8(%ebp),%eax
   18856:	89 50 04             	mov    %edx,0x4(%eax)
   18859:	eb 12                	jmp    1886d <list_insert_first+0x4d>
    } else {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   1885b:	8b 45 08             	mov    0x8(%ebp),%eax
   1885e:	8b 00                	mov    (%eax),%eax
   18860:	8b 55 0c             	mov    0xc(%ebp),%edx
   18863:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   18865:	8b 45 08             	mov    0x8(%ebp),%eax
   18868:	8b 55 0c             	mov    0xc(%ebp),%edx
   1886b:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   1886d:	8b 45 08             	mov    0x8(%ebp),%eax
   18870:	8b 40 08             	mov    0x8(%eax),%eax
   18873:	8d 50 01             	lea    0x1(%eax),%edx
   18876:	8b 45 08             	mov    0x8(%ebp),%eax
   18879:	89 50 08             	mov    %edx,0x8(%eax)
}
   1887c:	90                   	nop
   1887d:	c9                   	leave  
   1887e:	c3                   	ret    

0001887f <list_insert_last>:
/**
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node) {
   1887f:	55                   	push   %ebp
   18880:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   18882:	8b 45 08             	mov    0x8(%ebp),%eax
   18885:	8b 50 04             	mov    0x4(%eax),%edx
   18888:	8b 45 0c             	mov    0xc(%ebp),%eax
   1888b:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   1888d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18890:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list)) {
   18897:	ff 75 08             	push   0x8(%ebp)
   1889a:	e8 49 ff ff ff       	call   187e8 <list_is_empty>
   1889f:	83 c4 04             	add    $0x4,%esp
   188a2:	85 c0                	test   %eax,%eax
   188a4:	74 16                	je     188bc <list_insert_last+0x3d>
        list->first = list->last = node;
   188a6:	8b 45 08             	mov    0x8(%ebp),%eax
   188a9:	8b 55 0c             	mov    0xc(%ebp),%edx
   188ac:	89 50 04             	mov    %edx,0x4(%eax)
   188af:	8b 45 08             	mov    0x8(%ebp),%eax
   188b2:	8b 50 04             	mov    0x4(%eax),%edx
   188b5:	8b 45 08             	mov    0x8(%ebp),%eax
   188b8:	89 10                	mov    %edx,(%eax)
   188ba:	eb 15                	jmp    188d1 <list_insert_last+0x52>
    } else {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   188bc:	8b 45 08             	mov    0x8(%ebp),%eax
   188bf:	8b 40 04             	mov    0x4(%eax),%eax
   188c2:	8b 55 0c             	mov    0xc(%ebp),%edx
   188c5:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   188c8:	8b 45 08             	mov    0x8(%ebp),%eax
   188cb:	8b 55 0c             	mov    0xc(%ebp),%edx
   188ce:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   188d1:	8b 45 08             	mov    0x8(%ebp),%eax
   188d4:	8b 40 08             	mov    0x8(%eax),%eax
   188d7:	8d 50 01             	lea    0x1(%eax),%edx
   188da:	8b 45 08             	mov    0x8(%ebp),%eax
   188dd:	89 50 08             	mov    %edx,0x8(%eax)
}
   188e0:	90                   	nop
   188e1:	c9                   	leave  
   188e2:	c3                   	ret    

000188e3 <list_remove_first>:
/**
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t* list_remove_first(list_t *list) {
   188e3:	55                   	push   %ebp
   188e4:	89 e5                	mov    %esp,%ebp
   188e6:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list)) {
   188e9:	ff 75 08             	push   0x8(%ebp)
   188ec:	e8 f7 fe ff ff       	call   187e8 <list_is_empty>
   188f1:	83 c4 04             	add    $0x4,%esp
   188f4:	85 c0                	test   %eax,%eax
   188f6:	74 07                	je     188ff <list_remove_first+0x1c>
        return (list_node_t*)0;
   188f8:	b8 00 00 00 00       	mov    $0x0,%eax
   188fd:	eb 5a                	jmp    18959 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t * remove_node = list->first;
   188ff:	8b 45 08             	mov    0x8(%ebp),%eax
   18902:	8b 00                	mov    (%eax),%eax
   18904:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   18907:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1890a:	8b 50 04             	mov    0x4(%eax),%edx
   1890d:	8b 45 08             	mov    0x8(%ebp),%eax
   18910:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   18912:	8b 45 08             	mov    0x8(%ebp),%eax
   18915:	8b 00                	mov    (%eax),%eax
   18917:	85 c0                	test   %eax,%eax
   18919:	75 0c                	jne    18927 <list_remove_first+0x44>
        // node为最后一个结点
        list->last = (list_node_t*)0;
   1891b:	8b 45 08             	mov    0x8(%ebp),%eax
   1891e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18925:	eb 0c                	jmp    18933 <list_remove_first+0x50>
    } else {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   18927:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1892a:	8b 40 04             	mov    0x4(%eax),%eax
   1892d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t*)0;
   18933:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18936:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   1893c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1893f:	8b 10                	mov    (%eax),%edx
   18941:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18944:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   18947:	8b 45 08             	mov    0x8(%ebp),%eax
   1894a:	8b 40 08             	mov    0x8(%eax),%eax
   1894d:	8d 50 ff             	lea    -0x1(%eax),%edx
   18950:	8b 45 08             	mov    0x8(%ebp),%eax
   18953:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   18956:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18959:	c9                   	leave  
   1895a:	c3                   	ret    

0001895b <list_remove>:

/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   1895b:	55                   	push   %ebp
   1895c:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first) {
   1895e:	8b 45 08             	mov    0x8(%ebp),%eax
   18961:	8b 00                	mov    (%eax),%eax
   18963:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18966:	75 0b                	jne    18973 <list_remove+0x18>
        list->first = remove_node->next;
   18968:	8b 45 0c             	mov    0xc(%ebp),%eax
   1896b:	8b 50 04             	mov    0x4(%eax),%edx
   1896e:	8b 45 08             	mov    0x8(%ebp),%eax
   18971:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last) {
   18973:	8b 45 08             	mov    0x8(%ebp),%eax
   18976:	8b 40 04             	mov    0x4(%eax),%eax
   18979:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1897c:	75 0b                	jne    18989 <list_remove+0x2e>
        list->last = remove_node->pre;
   1897e:	8b 45 0c             	mov    0xc(%ebp),%eax
   18981:	8b 10                	mov    (%eax),%edx
   18983:	8b 45 08             	mov    0x8(%ebp),%eax
   18986:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre) {
   18989:	8b 45 0c             	mov    0xc(%ebp),%eax
   1898c:	8b 00                	mov    (%eax),%eax
   1898e:	85 c0                	test   %eax,%eax
   18990:	74 0e                	je     189a0 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   18992:	8b 45 0c             	mov    0xc(%ebp),%eax
   18995:	8b 00                	mov    (%eax),%eax
   18997:	8b 55 0c             	mov    0xc(%ebp),%edx
   1899a:	8b 52 04             	mov    0x4(%edx),%edx
   1899d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next) {
   189a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   189a3:	8b 40 04             	mov    0x4(%eax),%eax
   189a6:	85 c0                	test   %eax,%eax
   189a8:	74 0d                	je     189b7 <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   189aa:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ad:	8b 40 04             	mov    0x4(%eax),%eax
   189b0:	8b 55 0c             	mov    0xc(%ebp),%edx
   189b3:	8b 12                	mov    (%edx),%edx
   189b5:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t*)0;
   189b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   189c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   189c4:	8b 50 04             	mov    0x4(%eax),%edx
   189c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ca:	89 10                	mov    %edx,(%eax)
    --list->count;
   189cc:	8b 45 08             	mov    0x8(%ebp),%eax
   189cf:	8b 40 08             	mov    0x8(%eax),%eax
   189d2:	8d 50 ff             	lea    -0x1(%eax),%edx
   189d5:	8b 45 08             	mov    0x8(%ebp),%eax
   189d8:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   189db:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   189de:	5d                   	pop    %ebp
   189df:	c3                   	ret    

000189e0 <log_init>:
static int log_dev_id;

/**
 * @brief 初始化日志输出
 */
void log_init (void) {
   189e0:	55                   	push   %ebp
   189e1:	89 e5                	mov    %esp,%ebp
   189e3:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   189e6:	83 ec 0c             	sub    $0xc,%esp
   189e9:	68 a8 e0 05 00       	push   $0x5e0a8
   189ee:	e8 41 f3 ff ff       	call   17d34 <mutex_init>
   189f3:	83 c4 10             	add    $0x10,%esp

    log_dev_id = dev_open(DEV_TTY, 0, 0);
   189f6:	83 ec 04             	sub    $0x4,%esp
   189f9:	6a 00                	push   $0x0
   189fb:	6a 00                	push   $0x0
   189fd:	6a 01                	push   $0x1
   189ff:	e8 7f b4 ff ff       	call   13e83 <dev_open>
   18a04:	83 c4 10             	add    $0x10,%esp
   18a07:	a3 bc e0 05 00       	mov    %eax,0x5e0bc
  
    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
#endif
}
   18a0c:	90                   	nop
   18a0d:	c9                   	leave  
   18a0e:	c3                   	ret    

00018a0f <log_printf>:

/**
 * @brief 日志打印
 */
void log_printf(const char * fmt, ...) {
   18a0f:	55                   	push   %ebp
   18a10:	89 e5                	mov    %esp,%ebp
   18a12:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   18a18:	83 ec 04             	sub    $0x4,%esp
   18a1b:	68 80 00 00 00       	push   $0x80
   18a20:	6a 00                	push   $0x0
   18a22:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a28:	50                   	push   %eax
   18a29:	e8 37 fa ff ff       	call   18465 <kernel_memset>
   18a2e:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   18a31:	8d 45 0c             	lea    0xc(%ebp),%eax
   18a34:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   18a3a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   18a40:	83 ec 04             	sub    $0x4,%esp
   18a43:	50                   	push   %eax
   18a44:	ff 75 08             	push   0x8(%ebp)
   18a47:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a4d:	50                   	push   %eax
   18a4e:	e8 13 fc ff ff       	call   18666 <kernel_vsprintf>
   18a53:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 显示，如果发送速度太慢，会造成这里关中断太长时间
    // 所以，这里这样做不是好办法
    mutex_lock(&mutex);
   18a56:	83 ec 0c             	sub    $0xc,%esp
   18a59:	68 a8 e0 05 00       	push   $0x5e0a8
   18a5e:	e8 ff f2 ff ff       	call   17d62 <mutex_lock>
   18a63:	83 c4 10             	add    $0x10,%esp

    outb(COM1_PORT, '\r');
    outb(COM1_PORT, '\n');
#else
    //console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, "log:", 4);
   18a66:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18a6b:	6a 04                	push   $0x4
   18a6d:	68 94 9e 01 00       	push   $0x19e94
   18a72:	6a 00                	push   $0x0
   18a74:	50                   	push   %eax
   18a75:	e8 9f b5 ff ff       	call   14019 <dev_write>
   18a7a:	83 c4 10             	add    $0x10,%esp
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   18a7d:	83 ec 0c             	sub    $0xc,%esp
   18a80:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a86:	50                   	push   %eax
   18a87:	e8 d1 f8 ff ff       	call   1835d <kernel_strlen>
   18a8c:	83 c4 10             	add    $0x10,%esp
   18a8f:	8b 15 bc e0 05 00    	mov    0x5e0bc,%edx
   18a95:	50                   	push   %eax
   18a96:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a9c:	50                   	push   %eax
   18a9d:	6a 00                	push   $0x0
   18a9f:	52                   	push   %edx
   18aa0:	e8 74 b5 ff ff       	call   14019 <dev_write>
   18aa5:	83 c4 10             	add    $0x10,%esp

    char c = '\n';
   18aa8:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    //console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   18aaf:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18ab4:	6a 01                	push   $0x1
   18ab6:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   18abc:	52                   	push   %edx
   18abd:	6a 00                	push   $0x0
   18abf:	50                   	push   %eax
   18ac0:	e8 54 b5 ff ff       	call   14019 <dev_write>
   18ac5:	83 c4 10             	add    $0x10,%esp

#endif
    mutex_unlock(&mutex);
   18ac8:	83 ec 0c             	sub    $0xc,%esp
   18acb:	68 a8 e0 05 00       	push   $0x5e0a8
   18ad0:	e8 24 f3 ff ff       	call   17df9 <mutex_unlock>
   18ad5:	83 c4 10             	add    $0x10,%esp
}
   18ad8:	90                   	nop
   18ad9:	c9                   	leave  
   18ada:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
 * 联系邮箱: 527676163@qq.com
 */
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main (void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
        print_msg("task id = %d", pid);
        msleep(1000);
    }
#endif

    for (int i = 0; i < TTY_NR; i++) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
        int pid = fork();
80000022:	e8 62 01 00 00       	call   80000189 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 99 9e 01 00       	push   $0x19e99
8000003a:	e8 23 01 00 00       	call   80000162 <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        } else if (pid == 0) {
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 b2 9e 01 00       	push   $0x19eb2
80000082:	e8 1d 01 00 00       	call   800001a4 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 99 9e 01 00       	push   $0x19e99
80000094:	e8 c9 00 00 00       	call   80000162 <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1) {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++) {
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>
    }

    while (1) {
        // 不断收集孤儿进程
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 24 01 00 00       	call   800001ec <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    while (1) {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:
#include "malloc.h"

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep (int ms) {
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7f 07                	jg     8000012c <msleep+0x13>
        return 0;
80000125:	b8 00 00 00 00       	mov    $0x0,%eax
8000012a:	eb 19                	jmp    80000145 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000012c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000133:	8b 45 08             	mov    0x8(%ebp),%eax
80000136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000139:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013c:	50                   	push   %eax
8000013d:	e8 8b ff ff ff       	call   800000cd <sys_call>
80000142:	83 c4 04             	add    $0x4,%esp
}
80000145:	c9                   	leave  
80000146:	c3                   	ret    

80000147 <getpid>:

int getpid() {
80000147:	55                   	push   %ebp
80000148:	89 e5                	mov    %esp,%ebp
8000014a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000154:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000157:	50                   	push   %eax
80000158:	e8 70 ff ff ff       	call   800000cd <sys_call>
8000015d:	83 c4 04             	add    $0x4,%esp
}
80000160:	c9                   	leave  
80000161:	c3                   	ret    

80000162 <print_msg>:

int print_msg(char * fmt, int arg) {
80000162:	55                   	push   %ebp
80000163:	89 e5                	mov    %esp,%ebp
80000165:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000168:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016f:	8b 45 08             	mov    0x8(%ebp),%eax
80000172:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000175:	8b 45 0c             	mov    0xc(%ebp),%eax
80000178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8000017b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017e:	50                   	push   %eax
8000017f:	e8 49 ff ff ff       	call   800000cd <sys_call>
80000184:	83 c4 04             	add    $0x4,%esp
}
80000187:	c9                   	leave  
80000188:	c3                   	ret    

80000189 <fork>:

int fork() {
80000189:	55                   	push   %ebp
8000018a:	89 e5                	mov    %esp,%ebp
8000018c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018f:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000196:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000199:	50                   	push   %eax
8000019a:	e8 2e ff ff ff       	call   800000cd <sys_call>
8000019f:	83 c4 04             	add    $0x4,%esp
}
800001a2:	c9                   	leave  
800001a3:	c3                   	ret    

800001a4 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
800001a4:	55                   	push   %ebp
800001a5:	89 e5                	mov    %esp,%ebp
800001a7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001aa:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b1:	8b 45 08             	mov    0x8(%ebp),%eax
800001b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b7:	8b 45 0c             	mov    0xc(%ebp),%eax
800001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bd:	8b 45 10             	mov    0x10(%ebp),%eax
800001c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c6:	50                   	push   %eax
800001c7:	e8 01 ff ff ff       	call   800000cd <sys_call>
800001cc:	83 c4 04             	add    $0x4,%esp
}
800001cf:	c9                   	leave  
800001d0:	c3                   	ret    

800001d1 <yield>:

int yield (void) {
800001d1:	55                   	push   %ebp
800001d2:	89 e5                	mov    %esp,%ebp
800001d4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001de:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e1:	50                   	push   %eax
800001e2:	e8 e6 fe ff ff       	call   800000cd <sys_call>
800001e7:	83 c4 04             	add    $0x4,%esp
}
800001ea:	c9                   	leave  
800001eb:	c3                   	ret    

800001ec <wait>:

int wait(int* status) {
800001ec:	55                   	push   %ebp
800001ed:	89 e5                	mov    %esp,%ebp
800001ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
800001f2:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
800001f9:	8b 45 08             	mov    0x8(%ebp),%eax
800001fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800001ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000202:	50                   	push   %eax
80000203:	e8 c5 fe ff ff       	call   800000cd <sys_call>
80000208:	83 c4 04             	add    $0x4,%esp
}
8000020b:	c9                   	leave  
8000020c:	c3                   	ret    

8000020d <_exit>:

void _exit(int status) {
8000020d:	55                   	push   %ebp
8000020e:	89 e5                	mov    %esp,%ebp
80000210:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000213:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8000021a:	8b 45 08             	mov    0x8(%ebp),%eax
8000021d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000220:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000223:	50                   	push   %eax
80000224:	e8 a4 fe ff ff       	call   800000cd <sys_call>
80000229:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
8000022c:	eb fe                	jmp    8000022c <_exit+0x1f>

8000022e <open>:
}

int open(const char *name, int flags, ...) {
8000022e:	55                   	push   %ebp
8000022f:	89 e5                	mov    %esp,%ebp
80000231:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000234:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000023b:	8b 45 08             	mov    0x8(%ebp),%eax
8000023e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000241:	8b 45 0c             	mov    0xc(%ebp),%eax
80000244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000247:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024a:	50                   	push   %eax
8000024b:	e8 7d fe ff ff       	call   800000cd <sys_call>
80000250:	83 c4 04             	add    $0x4,%esp
}
80000253:	c9                   	leave  
80000254:	c3                   	ret    

80000255 <read>:

int read(int file, char *ptr, int len) {
80000255:	55                   	push   %ebp
80000256:	89 e5                	mov    %esp,%ebp
80000258:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000025b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000262:	8b 45 08             	mov    0x8(%ebp),%eax
80000265:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000268:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000026e:	8b 45 10             	mov    0x10(%ebp),%eax
80000271:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000274:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000277:	50                   	push   %eax
80000278:	e8 50 fe ff ff       	call   800000cd <sys_call>
8000027d:	83 c4 04             	add    $0x4,%esp
}
80000280:	c9                   	leave  
80000281:	c3                   	ret    

80000282 <write>:

int write(int file, char *ptr, int len) {
80000282:	55                   	push   %ebp
80000283:	89 e5                	mov    %esp,%ebp
80000285:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000288:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000028f:	8b 45 08             	mov    0x8(%ebp),%eax
80000292:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000295:	8b 45 0c             	mov    0xc(%ebp),%eax
80000298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000029b:	8b 45 10             	mov    0x10(%ebp),%eax
8000029e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a4:	50                   	push   %eax
800002a5:	e8 23 fe ff ff       	call   800000cd <sys_call>
800002aa:	83 c4 04             	add    $0x4,%esp
}
800002ad:	c9                   	leave  
800002ae:	c3                   	ret    

800002af <close>:

int close(int file) {
800002af:	55                   	push   %ebp
800002b0:	89 e5                	mov    %esp,%ebp
800002b2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002b5:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002bc:	8b 45 08             	mov    0x8(%ebp),%eax
800002bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c5:	50                   	push   %eax
800002c6:	e8 02 fe ff ff       	call   800000cd <sys_call>
800002cb:	83 c4 04             	add    $0x4,%esp
}
800002ce:	c9                   	leave  
800002cf:	c3                   	ret    

800002d0 <lseek>:

int lseek(int file, int ptr, int dir) {
800002d0:	55                   	push   %ebp
800002d1:	89 e5                	mov    %esp,%ebp
800002d3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002d6:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002dd:	8b 45 08             	mov    0x8(%ebp),%eax
800002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002e3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002e9:	8b 45 10             	mov    0x10(%ebp),%eax
800002ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f2:	50                   	push   %eax
800002f3:	e8 d5 fd ff ff       	call   800000cd <sys_call>
800002f8:	83 c4 04             	add    $0x4,%esp
}
800002fb:	c9                   	leave  
800002fc:	c3                   	ret    

800002fd <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
800002fd:	55                   	push   %ebp
800002fe:	89 e5                	mov    %esp,%ebp
80000300:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000303:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000030a:	8b 45 08             	mov    0x8(%ebp),%eax
8000030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000310:	8b 45 0c             	mov    0xc(%ebp),%eax
80000313:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000316:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000319:	50                   	push   %eax
8000031a:	e8 ae fd ff ff       	call   800000cd <sys_call>
8000031f:	83 c4 04             	add    $0x4,%esp
}
80000322:	c9                   	leave  
80000323:	c3                   	ret    

80000324 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
80000324:	55                   	push   %ebp
80000325:	89 e5                	mov    %esp,%ebp
80000327:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000032a:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000331:	8b 45 08             	mov    0x8(%ebp),%eax
80000334:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000337:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033a:	50                   	push   %eax
8000033b:	e8 8d fd ff ff       	call   800000cd <sys_call>
80000340:	83 c4 04             	add    $0x4,%esp
}
80000343:	c9                   	leave  
80000344:	c3                   	ret    

80000345 <sbrk>:

void * sbrk(ptrdiff_t incr) {
80000345:	55                   	push   %ebp
80000346:	89 e5                	mov    %esp,%ebp
80000348:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000034b:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000352:	8b 45 08             	mov    0x8(%ebp),%eax
80000355:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000358:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035b:	50                   	push   %eax
8000035c:	e8 6c fd ff ff       	call   800000cd <sys_call>
80000361:	83 c4 04             	add    $0x4,%esp
}
80000364:	c9                   	leave  
80000365:	c3                   	ret    

80000366 <dup>:

int dup (int file) {
80000366:	55                   	push   %ebp
80000367:	89 e5                	mov    %esp,%ebp
80000369:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000036c:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000373:	8b 45 08             	mov    0x8(%ebp),%eax
80000376:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000379:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037c:	50                   	push   %eax
8000037d:	e8 4b fd ff ff       	call   800000cd <sys_call>
80000382:	83 c4 04             	add    $0x4,%esp
}
80000385:	c9                   	leave  
80000386:	c3                   	ret    
