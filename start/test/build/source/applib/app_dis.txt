In archive /home/hsa/x86-code/start/test/build/source/applib/libapp.a:

crt0.S.o:     file format elf32-i386
rw-r--r-- 0/0   1552 Jan  1 08:00 1970 crt0.S.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  3 .debug_line   0000004e  00000000  00000000  00000044  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_line_str 0000006c  00000000  00000000  00000092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   00000024  00000000  00000000  000000fe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 00000014  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000020  00000000  00000000  00000138  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  8 .debug_str    00000071  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_str	00000000 .debug_str
00000000 g       .text	00000000 _start
00000000         *UND*	00000000 cstart



Disassembly of section .text:

00000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
   0:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
   3:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   5:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   7:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   9:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
   b:	e9 fc ff ff ff       	jmp    c <_start+0xc>
			c: R_386_PC32	cstart

cstart.c.o:     file format elf32-i386
rw-r--r-- 0/0   3224 Jan  1 08:00 1970 cstart.c.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000072  2**0
                  ALLOC
  3 .debug_info   00000129  00000000  00000000  00000072  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 000000db  00000000  00000000  0000019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000020  00000000  00000000  00000276  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  6 .debug_line   0000006d  00000000  00000000  00000296  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000172  00000000  00000000  00000303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 0000014b  00000000  00000000  00000475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002c  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY
 10 .note.GNU-stack 00000000  00000000  00000000  000005ec  2**0
                  CONTENTS, READONLY
 11 .debug_frame  0000002c  00000000  00000000  000005ec  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 g     F .text	0000003e cstart
00000000         *UND*	00000000 __bss_start__
00000000         *UND*	00000000 __bss_end__
00000000         *UND*	00000000 main
00000000         *UND*	00000000 exit



Disassembly of section .text:

00000000 <cstart>:
extern uint8_t __bss_start__[], __bss_end__[];

/**
 * @brief 应用的初始化，C部分
 */
void cstart (int argc, char ** argv) {
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 18             	sub    $0x18,%esp
    // 清空bss区，注意这是必须的！！！
    // 像newlib库中有些代码就依赖于此，未清空时数据未知，导致调用sbrk时申请很大内存空间
    uint8_t * start = __bss_start__;
   6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			9: R_386_32	__bss_start__
    while (start < __bss_end__) {
   d:	eb 0c                	jmp    1b <cstart+0x1b>
        *start++ = 0;
   f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  12:	8d 50 01             	lea    0x1(%eax),%edx
  15:	89 55 f4             	mov    %edx,-0xc(%ebp)
  18:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__) {
  1b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
			1e: R_386_32	__bss_end__
  22:	72 eb                	jb     f <cstart+0xf>
    }

    exit(main(argc, argv));
  24:	83 ec 08             	sub    $0x8,%esp
  27:	ff 75 0c             	push   0xc(%ebp)
  2a:	ff 75 08             	push   0x8(%ebp)
  2d:	e8 fc ff ff ff       	call   2e <cstart+0x2e>
			2e: R_386_PC32	main
  32:	83 c4 10             	add    $0x10,%esp
  35:	83 ec 0c             	sub    $0xc,%esp
  38:	50                   	push   %eax
  39:	e8 fc ff ff ff       	call   3a <cstart+0x3a>
			3a: R_386_PC32	exit

lib_syscall.c.o:     file format elf32-i386
rw-r--r-- 0/0  10516 Jan  1 08:00 1970 lib_syscall.c.o
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ed  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000421  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000421  2**0
                  ALLOC
  3 .debug_info   0000099e  00000000  00000000  00000421  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 000001bc  00000000  00000000  00000dbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_aranges 00000020  00000000  00000000  00000f7b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  6 .debug_line   00000269  00000000  00000000  00000f9b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
  7 .debug_str    000003b2  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 00000226  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002c  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY
 10 .note.GNU-stack 00000000  00000000  00000000  00001808  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000002f8  00000000  00000000  00001808  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 lib_syscall.c
00000000 l    d  .text	00000000 .text
00000000 l     F .text	0000004c sys_call
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    d  .debug_frame	00000000 .debug_frame
0000004c g     F .text	0000002e msleep
0000007a g     F .text	0000001b getpid
00000095 g     F .text	00000027 print_msg
000000bc g     F .text	0000001b fork
000000d7 g     F .text	0000002d execve
00000104 g     F .text	0000001b yield
0000011f g     F .text	00000021 wait
00000140 g     F .text	00000021 _exit
00000161 g     F .text	00000027 open
00000188 g     F .text	0000002d read
000001b5 g     F .text	0000002d write
000001e2 g     F .text	00000021 close
00000203 g     F .text	0000002d lseek
00000230 g     F .text	00000027 fstat
00000257 g     F .text	00000021 isatty
00000278 g     F .text	00000021 sbrk
00000299 g     F .text	00000021 dup
000002ba g     F .text	00000033 ioctl
000002ed g     F .text	0000006b opendir
00000000         *UND*	00000000 malloc
00000000         *UND*	00000000 free
00000358 g     F .text	00000040 readdir
00000398 g     F .text	00000034 closedir
000003cc g     F .text	00000021 unlink



Disassembly of section .text:

00000000 <sys_call>:
#include <string.h>

/**
 * 执行系统调用
 */
static inline int sys_call (syscall_args_t * args) {
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	57                   	push   %edi
   4:	56                   	push   %esi
   5:	53                   	push   %ebx
   6:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};  // 使用特权级0
   9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
  17:	8b 45 08             	mov    0x8(%ebp),%eax
  1a:	8b 40 10             	mov    0x10(%eax),%eax
  1d:	8b 55 08             	mov    0x8(%ebp),%edx
  20:	8b 52 0c             	mov    0xc(%edx),%edx
  23:	8b 4d 08             	mov    0x8(%ebp),%ecx
  26:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
  29:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2c:	8b 5b 04             	mov    0x4(%ebx),%ebx
  2f:	8b 75 08             	mov    0x8(%ebp),%esi
  32:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
  34:	8d 7d e8             	lea    -0x18(%ebp),%edi
  37:	50                   	push   %eax
  38:	52                   	push   %edx
  39:	51                   	push   %ecx
  3a:	53                   	push   %ebx
  3b:	56                   	push   %esi
  3c:	ff 1f                	lcall  *(%edi)
  3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
  41:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  44:	83 c4 10             	add    $0x10,%esp
  47:	5b                   	pop    %ebx
  48:	5e                   	pop    %esi
  49:	5f                   	pop    %edi
  4a:	5d                   	pop    %ebp
  4b:	c3                   	ret    

0000004c <msleep>:

int msleep (int ms) {
  4c:	55                   	push   %ebp
  4d:	89 e5                	mov    %esp,%ebp
  4f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
  52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  56:	7f 07                	jg     5f <msleep+0x13>
        return 0;
  58:	b8 00 00 00 00       	mov    $0x0,%eax
  5d:	eb 19                	jmp    78 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
  5f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
  66:	8b 45 08             	mov    0x8(%ebp),%eax
  69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
  6c:	8d 45 ec             	lea    -0x14(%ebp),%eax
  6f:	50                   	push   %eax
  70:	e8 8b ff ff ff       	call   0 <sys_call>
  75:	83 c4 04             	add    $0x4,%esp
}
  78:	c9                   	leave  
  79:	c3                   	ret    

0000007a <getpid>:

int getpid() {
  7a:	55                   	push   %ebp
  7b:	89 e5                	mov    %esp,%ebp
  7d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
  80:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
  87:	8d 45 ec             	lea    -0x14(%ebp),%eax
  8a:	50                   	push   %eax
  8b:	e8 70 ff ff ff       	call   0 <sys_call>
  90:	83 c4 04             	add    $0x4,%esp
}
  93:	c9                   	leave  
  94:	c3                   	ret    

00000095 <print_msg>:

int print_msg(char * fmt, int arg) {
  95:	55                   	push   %ebp
  96:	89 e5                	mov    %esp,%ebp
  98:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
  9b:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
  a2:	8b 45 08             	mov    0x8(%ebp),%eax
  a5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
  a8:	8b 45 0c             	mov    0xc(%ebp),%eax
  ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
  ae:	8d 45 ec             	lea    -0x14(%ebp),%eax
  b1:	50                   	push   %eax
  b2:	e8 49 ff ff ff       	call   0 <sys_call>
  b7:	83 c4 04             	add    $0x4,%esp
}
  ba:	c9                   	leave  
  bb:	c3                   	ret    

000000bc <fork>:

int fork() {
  bc:	55                   	push   %ebp
  bd:	89 e5                	mov    %esp,%ebp
  bf:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
  c2:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
  c9:	8d 45 ec             	lea    -0x14(%ebp),%eax
  cc:	50                   	push   %eax
  cd:	e8 2e ff ff ff       	call   0 <sys_call>
  d2:	83 c4 04             	add    $0x4,%esp
}
  d5:	c9                   	leave  
  d6:	c3                   	ret    

000000d7 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
  d7:	55                   	push   %ebp
  d8:	89 e5                	mov    %esp,%ebp
  da:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
  dd:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
  e4:	8b 45 08             	mov    0x8(%ebp),%eax
  e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
  ea:	8b 45 0c             	mov    0xc(%ebp),%eax
  ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
  f0:	8b 45 10             	mov    0x10(%ebp),%eax
  f3:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
  f6:	8d 45 ec             	lea    -0x14(%ebp),%eax
  f9:	50                   	push   %eax
  fa:	e8 01 ff ff ff       	call   0 <sys_call>
  ff:	83 c4 04             	add    $0x4,%esp
}
 102:	c9                   	leave  
 103:	c3                   	ret    

00000104 <yield>:

int yield (void) {
 104:	55                   	push   %ebp
 105:	89 e5                	mov    %esp,%ebp
 107:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
 10a:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
 111:	8d 45 ec             	lea    -0x14(%ebp),%eax
 114:	50                   	push   %eax
 115:	e8 e6 fe ff ff       	call   0 <sys_call>
 11a:	83 c4 04             	add    $0x4,%esp
}
 11d:	c9                   	leave  
 11e:	c3                   	ret    

0000011f <wait>:

int wait(int* status) {
 11f:	55                   	push   %ebp
 120:	89 e5                	mov    %esp,%ebp
 122:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
 125:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
 12c:	8b 45 08             	mov    0x8(%ebp),%eax
 12f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 132:	8d 45 ec             	lea    -0x14(%ebp),%eax
 135:	50                   	push   %eax
 136:	e8 c5 fe ff ff       	call   0 <sys_call>
 13b:	83 c4 04             	add    $0x4,%esp
}
 13e:	c9                   	leave  
 13f:	c3                   	ret    

00000140 <_exit>:

void _exit(int status) {
 140:	55                   	push   %ebp
 141:	89 e5                	mov    %esp,%ebp
 143:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
 146:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
 14d:	8b 45 08             	mov    0x8(%ebp),%eax
 150:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
 153:	8d 45 ec             	lea    -0x14(%ebp),%eax
 156:	50                   	push   %eax
 157:	e8 a4 fe ff ff       	call   0 <sys_call>
 15c:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
 15f:	eb fe                	jmp    15f <_exit+0x1f>

00000161 <open>:
}

int open(const char *name, int flags, ...) {
 161:	55                   	push   %ebp
 162:	89 e5                	mov    %esp,%ebp
 164:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
 167:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
 16e:	8b 45 08             	mov    0x8(%ebp),%eax
 171:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
 174:	8b 45 0c             	mov    0xc(%ebp),%eax
 177:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 17a:	8d 45 ec             	lea    -0x14(%ebp),%eax
 17d:	50                   	push   %eax
 17e:	e8 7d fe ff ff       	call   0 <sys_call>
 183:	83 c4 04             	add    $0x4,%esp
}
 186:	c9                   	leave  
 187:	c3                   	ret    

00000188 <read>:

int read(int file, char *ptr, int len) {
 188:	55                   	push   %ebp
 189:	89 e5                	mov    %esp,%ebp
 18b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
 18e:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
 195:	8b 45 08             	mov    0x8(%ebp),%eax
 198:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 19b:	8b 45 0c             	mov    0xc(%ebp),%eax
 19e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
 1a1:	8b 45 10             	mov    0x10(%ebp),%eax
 1a4:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 1a7:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1aa:	50                   	push   %eax
 1ab:	e8 50 fe ff ff       	call   0 <sys_call>
 1b0:	83 c4 04             	add    $0x4,%esp
}
 1b3:	c9                   	leave  
 1b4:	c3                   	ret    

000001b5 <write>:

int write(int file, char *ptr, int len) {
 1b5:	55                   	push   %ebp
 1b6:	89 e5                	mov    %esp,%ebp
 1b8:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
 1bb:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
 1c2:	8b 45 08             	mov    0x8(%ebp),%eax
 1c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 1c8:	8b 45 0c             	mov    0xc(%ebp),%eax
 1cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
 1ce:	8b 45 10             	mov    0x10(%ebp),%eax
 1d1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 1d4:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1d7:	50                   	push   %eax
 1d8:	e8 23 fe ff ff       	call   0 <sys_call>
 1dd:	83 c4 04             	add    $0x4,%esp
}
 1e0:	c9                   	leave  
 1e1:	c3                   	ret    

000001e2 <close>:

int close(int file) {
 1e2:	55                   	push   %ebp
 1e3:	89 e5                	mov    %esp,%ebp
 1e5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
 1e8:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
 1ef:	8b 45 08             	mov    0x8(%ebp),%eax
 1f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 1f5:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1f8:	50                   	push   %eax
 1f9:	e8 02 fe ff ff       	call   0 <sys_call>
 1fe:	83 c4 04             	add    $0x4,%esp
}
 201:	c9                   	leave  
 202:	c3                   	ret    

00000203 <lseek>:

int lseek(int file, int ptr, int dir) {
 203:	55                   	push   %ebp
 204:	89 e5                	mov    %esp,%ebp
 206:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
 209:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
 210:	8b 45 08             	mov    0x8(%ebp),%eax
 213:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 216:	8b 45 0c             	mov    0xc(%ebp),%eax
 219:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
 21c:	8b 45 10             	mov    0x10(%ebp),%eax
 21f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 222:	8d 45 ec             	lea    -0x14(%ebp),%eax
 225:	50                   	push   %eax
 226:	e8 d5 fd ff ff       	call   0 <sys_call>
 22b:	83 c4 04             	add    $0x4,%esp
}
 22e:	c9                   	leave  
 22f:	c3                   	ret    

00000230 <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st) {
 230:	55                   	push   %ebp
 231:	89 e5                	mov    %esp,%ebp
 233:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
 236:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
 23d:	8b 45 08             	mov    0x8(%ebp),%eax
 240:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
 243:	8b 45 0c             	mov    0xc(%ebp),%eax
 246:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 249:	8d 45 ec             	lea    -0x14(%ebp),%eax
 24c:	50                   	push   %eax
 24d:	e8 ae fd ff ff       	call   0 <sys_call>
 252:	83 c4 04             	add    $0x4,%esp
}
 255:	c9                   	leave  
 256:	c3                   	ret    

00000257 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file) {
 257:	55                   	push   %ebp
 258:	89 e5                	mov    %esp,%ebp
 25a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
 25d:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
 264:	8b 45 08             	mov    0x8(%ebp),%eax
 267:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 26a:	8d 45 ec             	lea    -0x14(%ebp),%eax
 26d:	50                   	push   %eax
 26e:	e8 8d fd ff ff       	call   0 <sys_call>
 273:	83 c4 04             	add    $0x4,%esp
}
 276:	c9                   	leave  
 277:	c3                   	ret    

00000278 <sbrk>:

void * sbrk(ptrdiff_t incr) {
 278:	55                   	push   %ebp
 279:	89 e5                	mov    %esp,%ebp
 27b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
 27e:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
 285:	8b 45 08             	mov    0x8(%ebp),%eax
 288:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
 28b:	8d 45 ec             	lea    -0x14(%ebp),%eax
 28e:	50                   	push   %eax
 28f:	e8 6c fd ff ff       	call   0 <sys_call>
 294:	83 c4 04             	add    $0x4,%esp
}
 297:	c9                   	leave  
 298:	c3                   	ret    

00000299 <dup>:

int dup (int file) {
 299:	55                   	push   %ebp
 29a:	89 e5                	mov    %esp,%ebp
 29c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
 29f:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
 2a6:	8b 45 08             	mov    0x8(%ebp),%eax
 2a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 2ac:	8d 45 ec             	lea    -0x14(%ebp),%eax
 2af:	50                   	push   %eax
 2b0:	e8 4b fd ff ff       	call   0 <sys_call>
 2b5:	83 c4 04             	add    $0x4,%esp
}
 2b8:	c9                   	leave  
 2b9:	c3                   	ret    

000002ba <ioctl>:

int ioctl(int fd, int cmd, int arg0, int arg1) {
 2ba:	55                   	push   %ebp
 2bb:	89 e5                	mov    %esp,%ebp
 2bd:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_ioctl;
 2c0:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = fd;
 2c7:	8b 45 08             	mov    0x8(%ebp),%eax
 2ca:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = cmd;
 2cd:	8b 45 0c             	mov    0xc(%ebp),%eax
 2d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = arg0;
 2d3:	8b 45 10             	mov    0x10(%ebp),%eax
 2d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
    args.arg3 = arg1;
 2d9:	8b 45 14             	mov    0x14(%ebp),%eax
 2dc:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sys_call(&args);
 2df:	8d 45 ec             	lea    -0x14(%ebp),%eax
 2e2:	50                   	push   %eax
 2e3:	e8 18 fd ff ff       	call   0 <sys_call>
 2e8:	83 c4 04             	add    $0x4,%esp
}
 2eb:	c9                   	leave  
 2ec:	c3                   	ret    

000002ed <opendir>:

DIR * opendir(const char * name) {
 2ed:	55                   	push   %ebp
 2ee:	89 e5                	mov    %esp,%ebp
 2f0:	83 ec 28             	sub    $0x28,%esp
    DIR * dir = (DIR *)malloc(sizeof(DIR));
 2f3:	83 ec 0c             	sub    $0xc,%esp
 2f6:	68 10 01 00 00       	push   $0x110
 2fb:	e8 fc ff ff ff       	call   2fc <opendir+0xf>
			2fc: R_386_PC32	malloc
 300:	83 c4 10             	add    $0x10,%esp
 303:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == (DIR *)0) {
 306:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
 30a:	75 07                	jne    313 <opendir+0x26>
        return (DIR *)0;
 30c:	b8 00 00 00 00       	mov    $0x0,%eax
 311:	eb 43                	jmp    356 <opendir+0x69>
    }

    syscall_args_t args;
    args.id = SYS_opendir;
 313:	c7 45 dc 3c 00 00 00 	movl   $0x3c,-0x24(%ebp)
    args.arg0 = (int)name;
 31a:	8b 45 08             	mov    0x8(%ebp),%eax
 31d:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
 320:	8b 45 f4             	mov    -0xc(%ebp),%eax
 323:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = sys_call(&args);
 326:	83 ec 0c             	sub    $0xc,%esp
 329:	8d 45 dc             	lea    -0x24(%ebp),%eax
 32c:	50                   	push   %eax
 32d:	e8 ce fc ff ff       	call   0 <sys_call>
 332:	83 c4 10             	add    $0x10,%esp
 335:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
 338:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
 33c:	79 15                	jns    353 <opendir+0x66>
        free(dir);
 33e:	83 ec 0c             	sub    $0xc,%esp
 341:	ff 75 f4             	push   -0xc(%ebp)
 344:	e8 fc ff ff ff       	call   345 <opendir+0x58>
			345: R_386_PC32	free
 349:	83 c4 10             	add    $0x10,%esp
        return (DIR *)0;
 34c:	b8 00 00 00 00       	mov    $0x0,%eax
 351:	eb 03                	jmp    356 <opendir+0x69>
    }
    return dir;
 353:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
 356:	c9                   	leave  
 357:	c3                   	ret    

00000358 <readdir>:

struct dirent* readdir(DIR* dir) {
 358:	55                   	push   %ebp
 359:	89 e5                	mov    %esp,%ebp
 35b:	83 ec 20             	sub    $0x20,%esp

    syscall_args_t args;
    args.id = SYS_readdir;
 35e:	c7 45 e8 3d 00 00 00 	movl   $0x3d,-0x18(%ebp)
    args.arg0 = (int)dir;
 365:	8b 45 08             	mov    0x8(%ebp),%eax
 368:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&dir->dirent;
 36b:	8b 45 08             	mov    0x8(%ebp),%eax
 36e:	83 c0 04             	add    $0x4,%eax
 371:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = sys_call(&args);
 374:	8d 45 e8             	lea    -0x18(%ebp),%eax
 377:	50                   	push   %eax
 378:	e8 83 fc ff ff       	call   0 <sys_call>
 37d:	83 c4 04             	add    $0x4,%esp
 380:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (err < 0) {
 383:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
 387:	79 07                	jns    390 <readdir+0x38>
        return (struct dirent *)0;
 389:	b8 00 00 00 00       	mov    $0x0,%eax
 38e:	eb 06                	jmp    396 <readdir+0x3e>
    }
    return &dir->dirent;
 390:	8b 45 08             	mov    0x8(%ebp),%eax
 393:	83 c0 04             	add    $0x4,%eax
}
 396:	c9                   	leave  
 397:	c3                   	ret    

00000398 <closedir>:

int closedir(DIR *dir) {
 398:	55                   	push   %ebp
 399:	89 e5                	mov    %esp,%ebp
 39b:	83 ec 28             	sub    $0x28,%esp
    syscall_args_t args;
    args.id = SYS_closedir;
 39e:	c7 45 e4 3e 00 00 00 	movl   $0x3e,-0x1c(%ebp)
    args.arg0 = (int)dir;
 3a5:	8b 45 08             	mov    0x8(%ebp),%eax
 3a8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    sys_call(&args);
 3ab:	8d 45 e4             	lea    -0x1c(%ebp),%eax
 3ae:	50                   	push   %eax
 3af:	e8 4c fc ff ff       	call   0 <sys_call>
 3b4:	83 c4 04             	add    $0x4,%esp

    free(dir);
 3b7:	83 ec 0c             	sub    $0xc,%esp
 3ba:	ff 75 08             	push   0x8(%ebp)
 3bd:	e8 fc ff ff ff       	call   3be <closedir+0x26>
			3be: R_386_PC32	free
 3c2:	83 c4 10             	add    $0x10,%esp
    return 0;
 3c5:	b8 00 00 00 00       	mov    $0x0,%eax
}
 3ca:	c9                   	leave  
 3cb:	c3                   	ret    

000003cc <unlink>:

int unlink(const char *path) {
 3cc:	55                   	push   %ebp
 3cd:	89 e5                	mov    %esp,%ebp
 3cf:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_unlink;
 3d2:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)path;
 3d9:	8b 45 08             	mov    0x8(%ebp),%eax
 3dc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 3df:	8d 45 ec             	lea    -0x14(%ebp),%eax
 3e2:	50                   	push   %eax
 3e3:	e8 18 fc ff ff       	call   0 <sys_call>
 3e8:	83 c4 04             	add    $0x4,%esp
}
 3eb:	c9                   	leave  
 3ec:	c3                   	ret    
