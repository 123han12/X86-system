
/home/hsa/x86-code/start/test/build/source/loader/loader.elf:     file format elf32-i386
/home/hsa/x86-code/start/test/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000006b8 memsz 0x000006b8 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00000039 memsz 0x00000039 flags r--
    LOAD off    0x00003000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00002000 memsz 0x00002054 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b8  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000039  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002000  0000b000  0000b000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000d000  0000d000  00005000  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000009cf  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000003cb  00000000  00000000  00005a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000444  00000000  00000000  00005e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000320  00000000  00000000  00006270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000437  00000000  00000000  00006590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 0000012f  00000000  00000000  000069c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000017  00000000  00000000  00006af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	00000030 outb
00008072 l     F .text	0000000b cli
0000807d l     F .text	00000036 lgdt
000080b3 l     F .text	0000001a read_cr0
000080cd l     F .text	00000012 write_cr0
000080df l     F .text	0000002b far_jump
0000810a l     F .text	0000003c show_msg
00008146 l     F .text	00000139 detect_memory
0000827f l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008334 l     F .text	0000001d inb
00008351 l     F .text	0000001f inw
00008370 l     F .text	00000021 outb
00008391 l     F .text	00000011 read_cr0
000083a2 l     F .text	0000000c write_cr0
000083ae l     F .text	0000000c write_cr3
000083ba l     F .text	00000011 read_cr4
000083cb l     F .text	0000000c write_cr4
000083d7 l     F .text	00000130 read_disk
00008507 l     F .text	0000011a reload_elf_file
00008621 l     F .text	00000005 die
0000c000 l     O .data	00001000 page_dir.0
00008311 g     F .text	00000023 loader_entry
0000b000 g     O .data	00000018 gdt_table
00008667 g     F .text	00000051 load_kernel
00008626 g     F .text	00000041 enable_page_mode
0000d000 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000d000 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000d000 g       .data	00000000 _edata
0000d054 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
_start:
	// 栈和段等沿用之前的设置,也可以重新设置
	// 这里简单起见，就不做任何设置了
	// 你可能会想，直接跳到loader_entry，但这样需要先知识loader_entry在哪儿
	// boot没有这个能力做到，所以直接用汇编，以便_start处于整个bin文件开头，这样boot直接跳到开头就可以
	jmp loader_entry
    8000:	e9 0e 03             	jmp    8311 <loader_entry>

00008003 <protect_mode_entry>:
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	// 重新加载所有的数据段描述符
	mov $16, %ax		// 16为数据段选择子
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
    mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
    mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
    mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
    mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs

    // 长跳转进入到32位内核加载模式中
    jmp $8, $load_kernel
    8011:	ea 67 86 00 00       	ljmp   $0x0,$0x8667
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#ifndef CPU_INSTR_H
#define CPU_INSTR_H

#include "types.h"

static inline uint8_t inb(uint16_t  port) {
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
	uint8_t rv;
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
	return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
	return rv;
}

static inline void outb(uint16_t port, uint8_t data) {
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8050:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    8055:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    8059:	66 89 d0             	mov    %edx,%eax
    805c:	67 88 45 f8          	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
    8060:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8066:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    806c:	ee                   	out    %al,(%dx)
}
    806d:	90                   	nop
    806e:	66 c9                	leavel 
    8070:	66 c3                	retl   

00008072 <cli>:

static inline void outw(uint16_t port, uint16_t data) {
	__asm__ __volatile__("out %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
}

static inline void cli() {
    8072:	66 55                	push   %ebp
    8074:	66 89 e5             	mov    %esp,%ebp
	__asm__ __volatile__("cli");
    8077:	fa                   	cli    
}
    8078:	90                   	nop
    8079:	66 5d                	pop    %ebp
    807b:	66 c3                	retl   

0000807d <lgdt>:

static inline void sti() {
	__asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size) {
    807d:	66 55                	push   %ebp
    807f:	66 89 e5             	mov    %esp,%ebp
    8082:	66 83 ec 10          	sub    $0x10,%esp
		uint16_t limit;
		uint16_t start15_0;
		uint16_t start31_16;
	} gdt;

	gdt.start31_16 = start >> 16;
    8086:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    808b:	66 c1 e8 10          	shr    $0x10,%eax
    808f:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
    8093:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8098:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
    809c:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a1:	66 83 e8 01          	sub    $0x1,%eax
    80a5:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80a9:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ae:	90                   	nop
    80af:	66 c9                	leavel 
    80b1:	66 c3                	retl   

000080b3 <read_cr0>:

static inline uint32_t read_cr0() {
    80b3:	66 55                	push   %ebp
    80b5:	66 89 e5             	mov    %esp,%ebp
    80b8:	66 83 ec 10          	sub    $0x10,%esp
	uint32_t cr0;
	__asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    80bc:	0f 20 c0             	mov    %cr0,%eax
    80bf:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
	return cr0;
    80c4:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c9:	66 c9                	leavel 
    80cb:	66 c3                	retl   

000080cd <write_cr0>:

static inline void write_cr0(uint32_t v) {
    80cd:	66 55                	push   %ebp
    80cf:	66 89 e5             	mov    %esp,%ebp
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    80d2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d7:	0f 22 c0             	mov    %eax,%cr0
}
    80da:	90                   	nop
    80db:	66 5d                	pop    %ebp
    80dd:	66 c3                	retl   

000080df <far_jump>:

static inline void write_cr4(uint32_t v) {
    __asm__ __volatile__("mov %[v], %%cr4"::[v]"r"(v));
}

static inline void far_jump(uint32_t selector, uint32_t offset) {
    80df:	66 55                	push   %ebp
    80e1:	66 89 e5             	mov    %esp,%ebp
    80e4:	66 83 ec 10          	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
    80e8:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ed:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f7:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    80fc:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8101:	67 66 ff 28          	ljmpl  *(%eax)
}
    8105:	90                   	nop
    8106:	66 c9                	leavel 
    8108:	66 c3                	retl   

0000810a <show_msg>:
boot_info_t boot_info;			// 启动参数信息

/**
 * BIOS下显示字符串
 */
static void show_msg (const char * msg) {
    810a:	66 55                	push   %ebp
    810c:	66 89 e5             	mov    %esp,%ebp
    810f:	66 83 ec 10          	sub    $0x10,%esp
    char c;

	// 使用bios写显存，持续往下写
	while ((c = *msg++) != '\0') {
    8113:	eb 0c                	jmp    8121 <show_msg+0x17>
		__asm__ __volatile__(
    8115:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    811b:	b4 0e                	mov    $0xe,%ah
    811d:	88 c0                	mov    %al,%al
    811f:	cd 10                	int    $0x10
	while ((c = *msg++) != '\0') {
    8121:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8126:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    812b:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8130:	67 66 0f b6 00       	movzbl (%eax),%eax
    8135:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8139:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813e:	75 d5                	jne    8115 <show_msg+0xb>
				"mov $0xe, %%ah\n\t"
				"mov %[ch], %%al\n\t"
				"int $0x10"::[ch]"r"(c));
	}
}
    8140:	90                   	nop
    8141:	90                   	nop
    8142:	66 c9                	leavel 
    8144:	66 c3                	retl   

00008146 <detect_memory>:

// 参考：https://wiki.osdev.org/Memory_Map_(x86)
// 1MB以下比较标准, 在1M以上会有差别
// 检测：https://wiki.osdev.org/Detecting_Memory_(x86)#BIOS_Function:_INT_0x15.2C_AH_.3D_0xC7
static void  detect_memory(void) {
    8146:	66 55                	push   %ebp
    8148:	66 89 e5             	mov    %esp,%ebp
    814b:	66 57                	push   %edi
    814d:	66 56                	push   %esi
    814f:	66 53                	push   %ebx
    8151:	66 83 ec 30          	sub    $0x30,%esp
	uint32_t contID = 0;
    8155:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    815c:	00 00 
	SMAP_entry_t smap_entry;
	int signature, bytes;

    show_msg("try to detect memory:");
    815e:	66 68 00 90 00 00    	pushl  $0x9000
    8164:	66 e8 a0 ff ff ff    	calll  810a <show_msg>
    816a:	66 83 c4 04          	add    $0x4,%esp

	// 初次：EDX=0x534D4150,EAX=0xE820,ECX=24,INT 0x15, EBX=0（初次）
	// 后续：EAX=0xE820,ECX=24,
	// 结束判断：EBX=0
	boot_info.ram_region_count = 0;
    816e:	66 c7 06 50 d0 00 00 	movl   $0x0,-0x2fb0
    8175:	00 00 
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8177:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817e:	00 00 
    8180:	e9 d0 00             	jmp    8253 <detect_memory+0x10d>
		SMAP_entry_t * entry = &smap_entry;
    8183:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8188:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

		__asm__ __volatile__("int  $0x15"
    818d:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8193:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8198:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819e:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a4:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a9:	66 89 f7             	mov    %esi,%edi
    81ac:	cd 15                	int    $0x15
    81ae:	66 89 da             	mov    %ebx,%edx
    81b1:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b6:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81bb:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
			: "=a"(signature), "=c"(bytes), "=b"(contID)
			: "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
		if (signature != 0x534D4150) {
    81c0:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c7:	4d 53 
    81c9:	74 13                	je     81de <detect_memory+0x98>
            show_msg("failed.\r\n");
    81cb:	66 68 16 90 00 00    	pushl  $0x9016
    81d1:	66 e8 33 ff ff ff    	calll  810a <show_msg>
    81d7:	66 83 c4 04          	add    $0x4,%esp
    81db:	e9 92 00             	jmp    8270 <detect_memory+0x12a>
			return;
		}

		// todo: 20字节
		if (bytes > 20 && (entry->ACPI & 0x0001) == 0){
    81de:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e4:	7e 13                	jle    81f9 <detect_memory+0xb3>
    81e6:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81eb:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f0:	66 83 e0 01          	and    $0x1,%eax
    81f4:	66 85 c0             	test   %eax,%eax
    81f7:	74 53                	je     824c <detect_memory+0x106>
			continue;
		}

        // 保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {
    81f9:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fe:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8203:	66 83 f8 01          	cmp    $0x1,%eax
    8207:	75 39                	jne    8242 <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8209:	66 a1 50 d0          	mov    0xd050,%eax
    820d:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8212:	67 66 8b 12          	mov    (%edx),%edx
    8216:	67 66 89 14 c5 00 d0 	mov    %edx,0xd000(,%eax,8)
    821d:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821f:	66 a1 50 d0          	mov    0xd050,%eax
    8223:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8228:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    822d:	67 66 89 14 c5 04 d0 	mov    %edx,0xd004(,%eax,8)
    8234:	00 00 
            boot_info.ram_region_count++;
    8236:	66 a1 50 d0          	mov    0xd050,%eax
    823a:	66 83 c0 01          	add    $0x1,%eax
    823e:	66 a3 50 d0          	mov    %eax,0xd050
        }

		if (contID == 0) {
    8242:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8248:	74 15                	je     825f <detect_memory+0x119>
    824a:	eb 01                	jmp    824d <detect_memory+0x107>
			continue;
    824c:	90                   	nop
	for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    824d:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8253:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8259:	0f 8e 26 ff          	jle    8183 <detect_memory+0x3d>
    825d:	eb 01                	jmp    8260 <detect_memory+0x11a>
			break;
    825f:	90                   	nop
		}
	}
    show_msg("ok.\r\n");
    8260:	66 68 20 90 00 00    	pushl  $0x9020
    8266:	66 e8 9e fe ff ff    	calll  810a <show_msg>
    826c:	66 83 c4 04          	add    $0x4,%esp
}
    8270:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8275:	66 5b                	pop    %ebx
    8277:	66 5e                	pop    %esi
    8279:	66 5f                	pop    %edi
    827b:	66 5d                	pop    %ebp
    827d:	66 c3                	retl   

0000827f <enter_protect_mode>:
};

/**
 * 进入保护模式
 */
static void  enter_protect_mode() {
    827f:	66 55                	push   %ebp
    8281:	66 89 e5             	mov    %esp,%ebp
    8284:	66 83 ec 10          	sub    $0x10,%esp
    // 关中断
    cli();
    8288:	66 e8 e4 fd ff ff    	calll  8072 <cli>

    // 开启A20地址线，使得可访问1M以上空间
    // 使用的是Fast A20 Gate方式，见https://wiki.osdev.org/A20#Fast_A20_Gate
    uint8_t v = inb(0x92);
    828e:	66 68 92 00 00 00    	pushl  $0x92
    8294:	66 e8 7e fd ff ff    	calll  8018 <inb>
    829a:	66 83 c4 04          	add    $0x4,%esp
    829e:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    82a2:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a8:	66 83 c8 02          	or     $0x2,%eax
    82ac:	66 0f b6 c0          	movzbl %al,%eax
    82b0:	66 50                	push   %eax
    82b2:	66 68 92 00 00 00    	pushl  $0x92
    82b8:	66 e8 84 fd ff ff    	calll  8042 <outb>
    82be:	66 83 c4 08          	add    $0x8,%esp

    // 加载GDT。由于中断已经关掉，IDT不需要加载
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82c2:	66 b8 00 b0 00 00    	mov    $0xb000,%eax
    82c8:	66 6a 18             	pushl  $0x18
    82cb:	66 50                	push   %eax
    82cd:	66 e8 aa fd ff ff    	calll  807d <lgdt>
    82d3:	66 83 c4 08          	add    $0x8,%esp

    // 打开CR0的保护模式位，进入保持模式
    uint32_t cr0 = read_cr0();
    82d7:	66 e8 d6 fd ff ff    	calll  80b3 <read_cr0>
    82dd:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e2:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e7:	66 83 c8 01          	or     $0x1,%eax
    82eb:	66 50                	push   %eax
    82ed:	66 e8 da fd ff ff    	calll  80cd <write_cr0>
    82f3:	66 83 c4 04          	add    $0x4,%esp


    // 长跳转进入到保护模式
    // 使用长跳转，以便清空流水线，将里面的16位代码给清空
    far_jump(8, (uint32_t)protect_mode_entry);
    82f7:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 6a 08             	pushl  $0x8
    8302:	66 e8 d7 fd ff ff    	calll  80df <far_jump>
    8308:	66 83 c4 08          	add    $0x8,%esp
}
    830c:	90                   	nop
    830d:	66 c9                	leavel 
    830f:	66 c3                	retl   

00008311 <loader_entry>:

void loader_entry(void) {
    8311:	66 55                	push   %ebp
    8313:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading.....\r\n");
    8316:	66 68 26 90 00 00    	pushl  $0x9026
    831c:	66 e8 e8 fd ff ff    	calll  810a <show_msg>
    8322:	66 83 c4 04          	add    $0x4,%esp
	detect_memory();
    8326:	66 e8 1a fe ff ff    	calll  8146 <detect_memory>
    enter_protect_mode();
    832c:	66 e8 4d ff ff ff    	calll  827f <enter_protect_mode>
    for(;;) {}
    8332:	eb fe                	jmp    8332 <loader_entry+0x21>

00008334 <inb>:
static inline uint8_t inb(uint16_t  port) {
    8334:	55                   	push   %bp
    8335:	89 e5                	mov    %sp,%bp
    8337:	83 ec 14             	sub    $0x14,%sp
    833a:	8b 45 08             	mov    0x8(%di),%ax
    833d:	66 89 45 ec          	mov    %eax,-0x14(%di)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
    8341:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8345:	89 c2                	mov    %ax,%dx
    8347:	ec                   	in     (%dx),%al
    8348:	88 45 ff             	mov    %al,-0x1(%di)
	return rv;
    834b:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    834f:	c9                   	leave  
    8350:	c3                   	ret    

00008351 <inw>:
static inline uint16_t inw(uint16_t  port) {
    8351:	55                   	push   %bp
    8352:	89 e5                	mov    %sp,%bp
    8354:	83 ec 14             	sub    $0x14,%sp
    8357:	8b 45 08             	mov    0x8(%di),%ax
    835a:	66 89 45 ec          	mov    %eax,-0x14(%di)
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
    835e:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8362:	89 c2                	mov    %ax,%dx
    8364:	66 ed                	in     (%dx),%eax
    8366:	66 89 45 fe          	mov    %eax,-0x2(%di)
	return rv;
    836a:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    836e:	c9                   	leave  
    836f:	c3                   	ret    

00008370 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
    8370:	55                   	push   %bp
    8371:	89 e5                	mov    %sp,%bp
    8373:	83 ec 08             	sub    $0x8,%sp
    8376:	8b 45 08             	mov    0x8(%di),%ax
    8379:	8b 55 0c             	mov    0xc(%di),%dx
    837c:	66 89 45 fc          	mov    %eax,-0x4(%di)
    8380:	89 d0                	mov    %dx,%ax
    8382:	88 45 f8             	mov    %al,-0x8(%di)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
    8385:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8389:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838d:	ee                   	out    %al,(%dx)
}
    838e:	90                   	nop
    838f:	c9                   	leave  
    8390:	c3                   	ret    

00008391 <read_cr0>:
static inline uint32_t read_cr0() {
    8391:	55                   	push   %bp
    8392:	89 e5                	mov    %sp,%bp
    8394:	83 ec 10             	sub    $0x10,%sp
	__asm__ __volatile__("mov %%cr0, %[v]":[v]"=r"(cr0));
    8397:	0f 20 c0             	mov    %cr0,%eax
    839a:	89 45 fc             	mov    %ax,-0x4(%di)
	return cr0;
    839d:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83a0:	c9                   	leave  
    83a1:	c3                   	ret    

000083a2 <write_cr0>:
static inline void write_cr0(uint32_t v) {
    83a2:	55                   	push   %bp
    83a3:	89 e5                	mov    %sp,%bp
	__asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(v));
    83a5:	8b 45 08             	mov    0x8(%di),%ax
    83a8:	0f 22 c0             	mov    %eax,%cr0
}
    83ab:	90                   	nop
    83ac:	5d                   	pop    %bp
    83ad:	c3                   	ret    

000083ae <write_cr3>:
static inline void write_cr3(uint32_t v) {
    83ae:	55                   	push   %bp
    83af:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
    83b1:	8b 45 08             	mov    0x8(%di),%ax
    83b4:	0f 22 d8             	mov    %eax,%cr3
}
    83b7:	90                   	nop
    83b8:	5d                   	pop    %bp
    83b9:	c3                   	ret    

000083ba <read_cr4>:
static inline uint32_t read_cr4() {
    83ba:	55                   	push   %bp
    83bb:	89 e5                	mov    %sp,%bp
    83bd:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr4, %[v]":[v]"=r"(cr4));
    83c0:	0f 20 e0             	mov    %cr4,%eax
    83c3:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr4;
    83c6:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83c9:	c9                   	leave  
    83ca:	c3                   	ret    

000083cb <write_cr4>:
static inline void write_cr4(uint32_t v) {
    83cb:	55                   	push   %bp
    83cc:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr4"::[v]"r"(v));
    83ce:	8b 45 08             	mov    0x8(%di),%ax
    83d1:	0f 22 e0             	mov    %eax,%cr4
}
    83d4:	90                   	nop
    83d5:	5d                   	pop    %bp
    83d6:	c3                   	ret    

000083d7 <read_disk>:
#include "comm/elf.h"

/**
* 使用LBA48位模式读取磁盘
*/
static void read_disk(int sector, int sector_count, uint8_t * buf) {
    83d7:	55                   	push   %bp
    83d8:	89 e5                	mov    %sp,%bp
    83da:	53                   	push   %bx
    83db:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    83de:	68 e0 00             	push   $0xe0
    83e1:	00 00                	add    %al,(%bx,%si)
    83e3:	68 f6 01             	push   $0x1f6
    83e6:	00 00                	add    %al,(%bx,%si)
    83e8:	e8 83 ff             	call   836e <inw+0x1d>
    83eb:	ff                   	(bad)  
    83ec:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F2, (uint8_t) (sector_count >> 8));
    83f0:	8b 45 0c             	mov    0xc(%di),%ax
    83f3:	c1 f8 08             	sar    $0x8,%ax
    83f6:	0f b6 c0             	movzbw %al,%ax
    83f9:	50                   	push   %ax
    83fa:	68 f2 01             	push   $0x1f2
    83fd:	00 00                	add    %al,(%bx,%si)
    83ff:	e8 6c ff             	call   836e <inw+0x1d>
    8402:	ff                   	(bad)  
    8403:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    8407:	8b 45 08             	mov    0x8(%di),%ax
    840a:	c1 f8 18             	sar    $0x18,%ax
    840d:	0f b6 c0             	movzbw %al,%ax
    8410:	50                   	push   %ax
    8411:	68 f3 01             	push   $0x1f3
    8414:	00 00                	add    %al,(%bx,%si)
    8416:	e8 55 ff             	call   836e <inw+0x1d>
    8419:	ff                   	(bad)  
    841a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    841e:	6a 00                	push   $0x0
    8420:	68 f4 01             	push   $0x1f4
    8423:	00 00                	add    %al,(%bx,%si)
    8425:	e8 46 ff             	call   836e <inw+0x1d>
    8428:	ff                   	(bad)  
    8429:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    842d:	6a 00                	push   $0x0
    842f:	68 f5 01             	push   $0x1f5
    8432:	00 00                	add    %al,(%bx,%si)
    8434:	e8 37 ff             	call   836e <inw+0x1d>
    8437:	ff                   	(bad)  
    8438:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t) (sector_count));
    843c:	8b 45 0c             	mov    0xc(%di),%ax
    843f:	0f b6 c0             	movzbw %al,%ax
    8442:	50                   	push   %ax
    8443:	68 f2 01             	push   $0x1f2
    8446:	00 00                	add    %al,(%bx,%si)
    8448:	e8 23 ff             	call   836e <inw+0x1d>
    844b:	ff                   	(bad)  
    844c:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    8450:	8b 45 08             	mov    0x8(%di),%ax
    8453:	0f b6 c0             	movzbw %al,%ax
    8456:	50                   	push   %ax
    8457:	68 f3 01             	push   $0x1f3
    845a:	00 00                	add    %al,(%bx,%si)
    845c:	e8 0f ff             	call   836e <inw+0x1d>
    845f:	ff                   	(bad)  
    8460:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    8464:	8b 45 08             	mov    0x8(%di),%ax
    8467:	c1 f8 08             	sar    $0x8,%ax
    846a:	0f b6 c0             	movzbw %al,%ax
    846d:	50                   	push   %ax
    846e:	68 f4 01             	push   $0x1f4
    8471:	00 00                	add    %al,(%bx,%si)
    8473:	e8 f8 fe             	call   836e <inw+0x1d>
    8476:	ff                   	(bad)  
    8477:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    847b:	8b 45 08             	mov    0x8(%di),%ax
    847e:	c1 f8 10             	sar    $0x10,%ax
    8481:	0f b6 c0             	movzbw %al,%ax
    8484:	50                   	push   %ax
    8485:	68 f5 01             	push   $0x1f5
    8488:	00 00                	add    %al,(%bx,%si)
    848a:	e8 e1 fe             	call   836e <inw+0x1d>
    848d:	ff                   	(bad)  
    848e:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F7, (uint8_t) 0x24);
    8492:	6a 24                	push   $0x24
    8494:	68 f7 01             	push   $0x1f7
    8497:	00 00                	add    %al,(%bx,%si)
    8499:	e8 d2 fe             	call   836e <inw+0x1d>
    849c:	ff                   	(bad)  
    849d:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	// 读取数据
	uint16_t *data_buf = (uint16_t*) buf;
    84a1:	8b 45 10             	mov    0x10(%di),%ax
    84a4:	89 45 f8             	mov    %ax,-0x8(%di)
	while (sector_count-- > 0) {
    84a7:	eb 4a                	jmp    84f3 <read_disk+0x11c>
		// 每次扇区读之前都要检查，等待数据就绪
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    84a9:	90                   	nop
    84aa:	68 f7 01             	push   $0x1f7
    84ad:	00 00                	add    %al,(%bx,%si)
    84af:	e8 80 fe             	call   8332 <loader_entry+0x21>
    84b2:	ff                   	(bad)  
    84b3:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84b7:	0f b6 c0             	movzbw %al,%ax
    84ba:	25 88 00             	and    $0x88,%ax
    84bd:	00 00                	add    %al,(%bx,%si)
    84bf:	83 f8 08             	cmp    $0x8,%ax
    84c2:	75 e6                	jne    84aa <read_disk+0xd3>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84c4:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84c9:	00 00                	add    %al,(%bx,%si)
    84cb:	eb 1d                	jmp    84ea <read_disk+0x113>
			*data_buf++ = inw(0x1F0);
    84cd:	8b 5d f8             	mov    -0x8(%di),%bx
    84d0:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84d3:	89 45 f8             	mov    %ax,-0x8(%di)
    84d6:	68 f0 01             	push   $0x1f0
    84d9:	00 00                	add    %al,(%bx,%si)
    84db:	e8 71 fe             	call   834f <inb+0x1b>
    84de:	ff                   	(bad)  
    84df:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84e3:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84e6:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84ea:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84ef:	00 00                	add    %al,(%bx,%si)
    84f1:	7e da                	jle    84cd <read_disk+0xf6>
	while (sector_count-- > 0) {
    84f3:	8b 45 0c             	mov    0xc(%di),%ax
    84f6:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84f9:	89 55 0c             	mov    %dx,0xc(%di)
    84fc:	85 c0                	test   %ax,%ax
    84fe:	7f a9                	jg     84a9 <read_disk+0xd2>
		}
	}
}
    8500:	90                   	nop
    8501:	90                   	nop
    8502:	8b 5d fc             	mov    -0x4(%di),%bx
    8505:	c9                   	leave  
    8506:	c3                   	ret    

00008507 <reload_elf_file>:
 * 解析elf文件，提取内容到相应的内存中
 * https://wiki.osdev.org/ELF
 * @param file_buffer
 * @return
 */
static uint32_t reload_elf_file (uint8_t * file_buffer) {
    8507:	55                   	push   %bp
    8508:	89 e5                	mov    %sp,%bp
    850a:	83 ec 20             	sub    $0x20,%sp
    // 读取的只是ELF文件，不像BIN那样可直接运行，需要从中加载出有效数据和代码
    // 简单判断是否是合法的ELF文件
    Elf32_Ehdr * elf_hdr = (Elf32_Ehdr *)file_buffer;
    850d:	8b 45 08             	mov    0x8(%di),%ax
    8510:	89 45 e8             	mov    %ax,-0x18(%di)
    if ((elf_hdr->e_ident[0] != ELF_MAGIC) || (elf_hdr->e_ident[1] != 'E')
    8513:	8b 45 e8             	mov    -0x18(%di),%ax
    8516:	0f b6 00             	movzbw (%bx,%si),%ax
    8519:	3c 7f                	cmp    $0x7f,%al
    851b:	75 21                	jne    853e <reload_elf_file+0x37>
    851d:	8b 45 e8             	mov    -0x18(%di),%ax
    8520:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    8524:	3c 45                	cmp    $0x45,%al
    8526:	75 16                	jne    853e <reload_elf_file+0x37>
        || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')) {
    8528:	8b 45 e8             	mov    -0x18(%di),%ax
    852b:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    852f:	3c 4c                	cmp    $0x4c,%al
    8531:	75 0b                	jne    853e <reload_elf_file+0x37>
    8533:	8b 45 e8             	mov    -0x18(%di),%ax
    8536:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    853a:	3c 46                	cmp    $0x46,%al
    853c:	74 0a                	je     8548 <reload_elf_file+0x41>
        return 0;
    853e:	b8 00 00             	mov    $0x0,%ax
    8541:	00 00                	add    %al,(%bx,%si)
    8543:	e9 d7 00             	jmp    861d <reload_elf_file+0x116>
    8546:	00 00                	add    %al,(%bx,%si)
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    for (int i = 0; i < elf_hdr->e_phnum; i++) {
    8548:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    854d:	00 00                	add    %al,(%bx,%si)
    854f:	e9 b2 00             	jmp    8604 <reload_elf_file+0xfd>
    8552:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr * phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    8554:	8b 45 e8             	mov    -0x18(%di),%ax
    8557:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    855a:	8b 45 fc             	mov    -0x4(%di),%ax
    855d:	c1 e0 05             	shl    $0x5,%ax
    8560:	01 c2                	add    %ax,%dx
    8562:	8b 45 08             	mov    0x8(%di),%ax
    8565:	01 d0                	add    %dx,%ax
    8567:	89 45 e4             	mov    %ax,-0x1c(%di)
        if (phdr->p_type != PT_LOAD) {
    856a:	8b 45 e4             	mov    -0x1c(%di),%ax
    856d:	8b 00                	mov    (%bx,%si),%ax
    856f:	83 f8 01             	cmp    $0x1,%ax
    8572:	0f 85 89 00          	jne    85ff <reload_elf_file+0xf8>
    8576:	00 00                	add    %al,(%bx,%si)
            continue;
        }

		// 全部使用物理地址，此时分页机制还未打开
        uint8_t * src = file_buffer + phdr->p_offset;
    8578:	8b 45 e4             	mov    -0x1c(%di),%ax
    857b:	8b 50 04             	mov    0x4(%bx,%si),%dx
    857e:	8b 45 08             	mov    0x8(%di),%ax
    8581:	01 d0                	add    %dx,%ax
    8583:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t * dest = (uint8_t *)phdr->p_paddr;
    8586:	8b 45 e4             	mov    -0x1c(%di),%ax
    8589:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    858c:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_filesz; j++) {
    858f:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    8594:	00 00                	add    %al,(%bx,%si)
    8596:	eb 1b                	jmp    85b3 <reload_elf_file+0xac>
            *dest++ = *src++;
    8598:	8b 55 f8             	mov    -0x8(%di),%dx
    859b:	8d 42 01             	lea    0x1(%bp,%si),%ax
    859e:	89 45 f8             	mov    %ax,-0x8(%di)
    85a1:	8b 45 f4             	mov    -0xc(%di),%ax
    85a4:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85a7:	89 4d f4             	mov    %cx,-0xc(%di)
    85aa:	0f b6 12             	movzbw (%bp,%si),%dx
    85ad:	88 10                	mov    %dl,(%bx,%si)
        for (int j = 0; j < phdr->p_filesz; j++) {
    85af:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85b3:	8b 45 e4             	mov    -0x1c(%di),%ax
    85b6:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85b9:	8b 45 f0             	mov    -0x10(%di),%ax
    85bc:	39 c2                	cmp    %ax,%dx
    85be:	77 d8                	ja     8598 <reload_elf_file+0x91>
        }

		// memsz和filesz不同时，后续要填0
		dest= (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    85c0:	8b 45 e4             	mov    -0x1c(%di),%ax
    85c3:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85c6:	8b 45 e4             	mov    -0x1c(%di),%ax
    85c9:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85cc:	01 d0                	add    %dx,%ax
    85ce:	89 45 f4             	mov    %ax,-0xc(%di)
		for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++) {
    85d1:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85d6:	00 00                	add    %al,(%bx,%si)
    85d8:	eb 10                	jmp    85ea <reload_elf_file+0xe3>
			*dest++ = 0;
    85da:	8b 45 f4             	mov    -0xc(%di),%ax
    85dd:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85e0:	89 55 f4             	mov    %dx,-0xc(%di)
    85e3:	c6 00 00             	movb   $0x0,(%bx,%si)
		for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++) {
    85e6:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85ea:	8b 45 e4             	mov    -0x1c(%di),%ax
    85ed:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85f0:	8b 45 e4             	mov    -0x1c(%di),%ax
    85f3:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85f6:	29 c2                	sub    %ax,%dx
    85f8:	8b 45 ec             	mov    -0x14(%di),%ax
    85fb:	39 c2                	cmp    %ax,%dx
    85fd:	77 db                	ja     85da <reload_elf_file+0xd3>
    85ff:	eb 01                	jmp    8602 <reload_elf_file+0xfb>
            continue;
    8601:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; i++) {
    8602:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    8606:	8b 45 e8             	mov    -0x18(%di),%ax
    8609:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    860d:	0f b7 c0             	movzww %ax,%ax
    8610:	39 45 fc             	cmp    %ax,-0x4(%di)
    8613:	0f 8c 3b ff          	jl     8552 <reload_elf_file+0x4b>
    8617:	ff                   	(bad)  
    8618:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
		}
    }

    return elf_hdr->e_entry;
    861c:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    861f:	c9                   	leave  
    8620:	c3                   	ret    

00008621 <die>:

/**
 * 死机
 */
static void die (int code) {
    8621:	55                   	push   %bp
    8622:	89 e5                	mov    %sp,%bp
    for (;;) {}
    8624:	eb fe                	jmp    8624 <die+0x3>

00008626 <enable_page_mode>:
 * @brief 开启分页机制
 * 将0-4M空间映射到0-4M和SYS_KERNEL_BASE_ADDR~+4MB空间
 * 0-4MB的映射主要用于保护loader自己还能正常工作
 * SYS_KERNEL_BASE_ADDR+4MB则用于为内核提供正确的虚拟地址空间
 */
void enable_page_mode (void) {
    8626:	55                   	push   %bp
    8627:	89 e5                	mov    %sp,%bp
    8629:	83 ec 10             	sub    $0x10,%sp
    static uint32_t page_dir[1024] __attribute__((aligned(4096))) = {
        [0] = PDE_P | PDE_PS | PDE_W,			// PDE_PS，开启4MB的页
    };

    // 设置PSE，以便启用4M的页，而不是4KB
    uint32_t cr4 = read_cr4();
    862c:	e8 89 fd             	call   83b8 <write_cr3+0xa>
    862f:	ff                   	(bad)  
    8630:	ff 89 45 fc          	decw   -0x3bb(%bx,%di)
    write_cr4(cr4 | CR4_PSE);
    8634:	8b 45 fc             	mov    -0x4(%di),%ax
    8637:	83 c8 10             	or     $0x10,%ax
    863a:	50                   	push   %ax
    863b:	e8 8b fd             	call   83c9 <read_cr4+0xf>
    863e:	ff                   	(bad)  
    863f:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    // 设置页表地址
    write_cr3((uint32_t)page_dir);
    8643:	b8 00 c0             	mov    $0xc000,%ax
    8646:	00 00                	add    %al,(%bx,%si)
    8648:	50                   	push   %ax
    8649:	e8 60 fd             	call   83ac <write_cr0+0xa>
    864c:	ff                   	(bad)  
    864d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    // 开启分页机制
    write_cr0(read_cr0() | CR0_PG);
    8651:	e8 3b fd             	call   838f <outb+0x1f>
    8654:	ff                   	(bad)  
    8655:	ff 0d                	decw   (%di)
    8657:	00 00                	add    %al,(%bx,%si)
    8659:	00 80 50 e8          	add    %al,-0x17b0(%bx,%si)
    865d:	41                   	inc    %cx
    865e:	fd                   	std    
    865f:	ff                   	(bad)  
    8660:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
}
    8664:	90                   	nop
    8665:	c9                   	leave  
    8666:	c3                   	ret    

00008667 <load_kernel>:

/**
 * 从磁盘上加载内核
 */
void load_kernel(void) {
    8667:	55                   	push   %bp
    8668:	89 e5                	mov    %sp,%bp
    866a:	83 ec 18             	sub    $0x18,%sp
    // 读取的扇区数一定要大一些，保不准kernel.elf大小会变得很大
    // 我就吃过亏，只读了100个扇区，结果运行后发现kernel的一些初始化的变量值为空，程序也会跑飞
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_LOAD_ADDR);
    866d:	68 00 00             	push   $0x0
    8670:	10 00                	adc    %al,(%bx,%si)
    8672:	68 f4 01             	push   $0x1f4
    8675:	00 00                	add    %al,(%bx,%si)
    8677:	6a 64                	push   $0x64
    8679:	e8 59 fd             	call   83d5 <write_cr4+0xa>
    867c:	ff                   	(bad)  
    867d:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

     // 解析ELF文件，并通过调用的方式，进入到内核中去执行，同时传递boot参数
	 // 临时将elf文件先读到SYS_KERNEL_LOAD_ADDR处，再进行解析
    uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    8681:	68 00 00             	push   $0x0
    8684:	10 00                	adc    %al,(%bx,%si)
    8686:	e8 7c fe             	call   8505 <read_disk+0x12e>
    8689:	ff                   	(bad)  
    868a:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    868e:	89 45 f4             	mov    %ax,-0xc(%di)
	if (kernel_entry == 0) {
    8691:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    8695:	75 0a                	jne    86a1 <load_kernel+0x3a>
		die(-1);
    8697:	6a ff                	push   $0xffff
    8699:	e8 83 ff             	call   861f <reload_elf_file+0x118>
    869c:	ff                   	(bad)  
    869d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
	}

	// 开启分页机制
	enable_page_mode();
    86a1:	e8 80 ff             	call   8624 <die+0x3>
    86a4:	ff                   	(bad)  
    86a5:	ff 8b 45 f4          	decw   -0xbbb(%bp,%di)

    ((void (*)(boot_info_t *))kernel_entry)(&boot_info);
    86a9:	83 ec 0c             	sub    $0xc,%sp
    86ac:	68 00 d0             	push   $0xd000
    86af:	00 00                	add    %al,(%bx,%si)
    86b1:	ff d0                	call   *%ax
    86b3:	83 c4 10             	add    $0x10,%sp
    for (;;) {}
    86b6:	eb fe                	jmp    86b6 <load_kernel+0x4f>
