
/home/hsa/X86-system/start/start/build/source/loader/loader.elf:     file format elf32-i386
/home/hsa/X86-system/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000339 memsz 0x00000339 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000007a memsz 0x0000007a flags r--
    LOAD off    0x0000207c vaddr 0x0000a07c paddr 0x0000a07c align 2**12
         filesz 0x00000018 memsz 0x00000078 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000339  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000007a  00009000  00009000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000a07c  0000a07c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000a0a0  0000a0a0  00002094  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000020c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   00000477  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000211  00000000  00000000  00002597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000020b  00000000  00000000  000027a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  000001a4  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    000002b6  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000138  00000000  00000000  00002e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000017  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 load_32.c
00000000 l    df *ABS*	00000000 loader_16.c
0000801d l     F .text	0000002a inb
00008047 l     F .text	00000030 outb
00008077 l     F .text	0000000b cli
00008082 l     F .text	00000036 lgdt
000080b8 l     F .text	0000001a read_cr0
000080d2 l     F .text	00000012 write_cr0
000080e4 l     F .text	0000002b far_jump
0000810f l     F .text	0000003c show_msg
0000a0a0 l     O .bss	00000054 boot_info
0000814b l     F .text	00000139 detect_memory
00008284 l     F .text	00000092 enter_protect_mode
00008316 g     F .text	00000023 loader_entry
0000a07c g     O .data	00000018 gdt_table
00008003 g       .text	00000000 protected_mode_entry
00008018 g     F .text	00000005 load_kernel
00008000 g       .text	00000000 _start
0000a094 g       .bss	00000000 __bss_start
0000a094 g       .data	00000000 _edata
0000a0f4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text
	.global _start
	.extern loader_entry

_start: 
	jmp loader_entry 
    8000:	e9 13 03             	jmp    8316 <loader_entry>

00008003 <protected_mode_entry>:
	.code32
	.text 
	.global protected_mode_entry 
	.extern load_kernel
protected_mode_entry:
	mov $16 , %ax 
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax , %ds 
	mov %ax , %ss 
    8009:	8e d0                	mov    %ax,%ss
	mov %ax , %es 
    800b:	8e c0                	mov    %ax,%es
	mov %ax , %fs 
    800d:	8e e0                	mov    %ax,%fs
	mov %ax , %gs 
    800f:	8e e8                	mov    %ax,%gs

	jmp $8 , $load_kernel 
    8011:	ea 18 80 00 00       	ljmp   $0x0,$0x8018
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <load_kernel>:
void load_kernel(void)
{
    8018:	55                   	push   %bp
    8019:	89 e5                	mov    %sp,%bp
    for( ;; ) {} 
    801b:	eb fe                	jmp    801b <load_kernel+0x3>

0000801d <inb>:
#include "types.h"


// 从指定的端口中读入一个字节的数据返回
static inline uint8_t inb(uint16_t port )   
{
    801d:	66 55                	push   %ebp
    801f:	66 89 e5             	mov    %esp,%ebp
    8022:	66 83 ec 14          	sub    $0x14,%esp
    8026:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    802b:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv ; 
    __asm__  __volatile__ 
    802f:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8035:	66 89 c2             	mov    %eax,%edx
    8038:	ec                   	in     (%dx),%al
    8039:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    (
        "inb %[p] , %[v] \n\t" 
        : [v]"=a"(rv)
        : [p]"d"(port)
    ) ; 
    return rv ; 
    803d:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8043:	66 c9                	leavel 
    8045:	66 c3                	retl   

00008047 <outb>:

// 向指定端口输出数据
static inline void outb(uint16_t port , uint8_t data )
{   
    8047:	66 55                	push   %ebp
    8049:	66 89 e5             	mov    %esp,%ebp
    804c:	66 83 ec 08          	sub    $0x8,%esp
    8050:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8055:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    805a:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    805e:	66 89 d0             	mov    %edx,%eax
    8061:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__ (
    8065:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    806b:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8071:	ee                   	out    %al,(%dx)
        "outb %[v] , %[p]\n\t"
        : 
        : [p]"d"(port) , [v]"a"(data) 
    ) ; 
}   
    8072:	90                   	nop
    8073:	66 c9                	leavel 
    8075:	66 c3                	retl   

00008077 <cli>:

static inline void cli(void)
{
    8077:	66 55                	push   %ebp
    8079:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli") ; 
    807c:	fa                   	cli    
}
    807d:	90                   	nop
    807e:	66 5d                	pop    %ebp
    8080:	66 c3                	retl   

00008082 <lgdt>:
{
    __asm__ __volatile__("sti") ; 
}

static inline void lgdt(uint32_t start , uint32_t size ) 
{
    8082:	66 55                	push   %ebp
    8084:	66 89 e5             	mov    %esp,%ebp
    8087:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit ; 
        uint16_t start15_0 ; 
        uint16_t start31_16 ; 
    } gdt ; 
    
    gdt.start31_16 = start >> 16 ; 
    808b:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8090:	66 c1 e8 10          	shr    $0x10,%eax
    8094:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF ; 
    8098:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    809d:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1 ; 
    80a1:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a6:	66 83 e8 01          	sub    $0x1,%eax
    80aa:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__ (
    80ae:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
        "lgdt %[g]"
        :
        :[g]"m"(gdt) 
    ) ; 
}
    80b3:	90                   	nop
    80b4:	66 c9                	leavel 
    80b6:	66 c3                	retl   

000080b8 <read_cr0>:

static inline uint32_t read_cr0() 
{
    80b8:	66 55                	push   %ebp
    80ba:	66 89 e5             	mov    %esp,%ebp
    80bd:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0 ; 
    __asm__ __volatile__(
    80c1:	0f 20 c0             	mov    %cr0,%eax
    80c4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
        "movl %%cr0 , %[p]\n\t"
        : [p]"=r"(cr0) 
        : 
        : 
    ) ; 
    return cr0 ; 
    80c9:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80ce:	66 c9                	leavel 
    80d0:	66 c3                	retl   

000080d2 <write_cr0>:

static inline uint32_t write_cr0(uint32_t v )
{
    80d2:	66 55                	push   %ebp
    80d4:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__(
    80d7:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80dc:	0f 22 c0             	mov    %eax,%cr0
        "movl %[v] , %%cr0 \n\t"
        :
        :[v]"r"(v) 
        :
    ) ; 
}
    80df:	90                   	nop
    80e0:	66 5d                	pop    %ebp
    80e2:	66 c3                	retl   

000080e4 <far_jump>:

static inline void far_jump(uint32_t selector , uint32_t offset )
{
    80e4:	66 55                	push   %ebp
    80e6:	66 89 e5             	mov    %esp,%ebp
    80e9:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset , selector } ; 
    80ed:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80f2:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f7:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80fc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)

    __asm__ __volatile__(
    8101:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8106:	67 66 ff 28          	ljmpl  *(%eax)
        "ljmpl *(%[a]) \n\t"
        :
        : [a]"r"(addr) 
        :
    ) ; 
}
    810a:	90                   	nop
    810b:	66 c9                	leavel 
    810d:	66 c3                	retl   

0000810f <show_msg>:

#include "loader.h"
void protected_mode_entry (void);

static void show_msg(const char *msg)
{
    810f:	66 55                	push   %ebp
    8111:	66 89 e5             	mov    %esp,%ebp
    8114:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while ((c = *msg++) != '\0')
    8118:	eb 0c                	jmp    8126 <show_msg+0x17>
    {
        // 如果内联汇编有多条指令，则每一行都要加上双引号，并且该行以 \n\t 结尾 , 请将内联汇编写为标准的格式
        __asm__ __volatile__(
    811a:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8120:	b4 0e                	mov    $0xe,%ah
    8122:	88 c0                	mov    %al,%al
    8124:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0')
    8126:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    812b:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8130:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8135:	67 66 0f b6 00       	movzbl (%eax),%eax
    813a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    813e:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    8143:	75 d5                	jne    811a <show_msg+0xb>
            :
            : [ch] "r"(c)
            :
        );
    }
}
    8145:	90                   	nop
    8146:	90                   	nop
    8147:	66 c9                	leavel 
    8149:	66 c3                	retl   

0000814b <detect_memory>:

static boot_info_t boot_info; // 这个结构体变量用来存储返回的信息。

static void detect_memory(void)
{
    814b:	66 55                	push   %ebp
    814d:	66 89 e5             	mov    %esp,%ebp
    8150:	66 57                	push   %edi
    8152:	66 56                	push   %esi
    8154:	66 53                	push   %ebx
    8156:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID = 0;
    815a:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8161:	00 00 
    SMAP_entry_t smap_entry;
    int signature, bytes;

    show_msg("try to detect memory.......\r\n");
    8163:	66 68 00 90 00 00    	pushl  $0x9000
    8169:	66 e8 a0 ff ff ff    	calll  810f <show_msg>
    816f:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    8173:	66 c7 06 f0 a0 00 00 	movl   $0x0,-0x5f10
    817a:	00 00 
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++)
    817c:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8183:	00 00 
    8185:	e9 d0 00             	jmp    8258 <detect_memory+0x10d>
    {
        SMAP_entry_t *entry = &smap_entry;
    8188:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    818d:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

        __asm__ __volatile__("int  $0x15"
    8192:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8198:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    819d:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    81a3:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a9:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81ae:	66 89 f7             	mov    %esi,%edi
    81b1:	cd 15                	int    $0x15
    81b3:	66 89 da             	mov    %ebx,%edx
    81b6:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81bb:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81c0:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
                             : "=a"(signature), "=c"(bytes), "=b"(contID)
                             : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)
                            );

        if (signature != 0x534D4150)
    81c5:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81cc:	4d 53 
    81ce:	74 13                	je     81e3 <detect_memory+0x98>
        {
            show_msg("failed.\r\n");
    81d0:	66 68 1e 90 00 00    	pushl  $0x901e
    81d6:	66 e8 33 ff ff ff    	calll  810f <show_msg>
    81dc:	66 83 c4 04          	add    $0x4,%esp
    81e0:	e9 92 00             	jmp    8275 <detect_memory+0x12a>
            return;
        }

        if (bytes > 20 && (entry->ACPI & 0x0001) == 0)
    81e3:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e9:	7e 13                	jle    81fe <detect_memory+0xb3>
    81eb:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81f0:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f5:	66 83 e0 01          	and    $0x1,%eax
    81f9:	66 85 c0             	test   %eax,%eax
    81fc:	74 53                	je     8251 <detect_memory+0x106>
        {
            continue;
        }

        if (entry->Type == 1)
    81fe:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8203:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8208:	66 83 f8 01          	cmp    $0x1,%eax
    820c:	75 39                	jne    8247 <detect_memory+0xfc>
        {
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    820e:	66 a1 f0 a0          	mov    0xa0f0,%eax
    8212:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8217:	67 66 8b 12          	mov    (%edx),%edx
    821b:	67 66 89 14 c5 a0 a0 	mov    %edx,0xa0a0(,%eax,8)
    8222:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    8224:	66 a1 f0 a0          	mov    0xa0f0,%eax
    8228:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    822d:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8232:	67 66 89 14 c5 a4 a0 	mov    %edx,0xa0a4(,%eax,8)
    8239:	00 00 
            boot_info.ram_region_count++;
    823b:	66 a1 f0 a0          	mov    0xa0f0,%eax
    823f:	66 83 c0 01          	add    $0x1,%eax
    8243:	66 a3 f0 a0          	mov    %eax,0xa0f0
        }
        if (contID == 0)
    8247:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    824d:	74 15                	je     8264 <detect_memory+0x119>
    824f:	eb 01                	jmp    8252 <detect_memory+0x107>
            continue;
    8251:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++)
    8252:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8258:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    825e:	0f 8e 26 ff          	jle    8188 <detect_memory+0x3d>
    8262:	eb 01                	jmp    8265 <detect_memory+0x11a>
            break;
    8264:	90                   	nop
    }

    show_msg("great we are complete the thing that userful detect memory");
    8265:	66 68 28 90 00 00    	pushl  $0x9028
    826b:	66 e8 9e fe ff ff    	calll  810f <show_msg>
    8271:	66 83 c4 04          	add    $0x4,%esp
}
    8275:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    827a:	66 5b                	pop    %ebx
    827c:	66 5e                	pop    %esi
    827e:	66 5f                	pop    %edi
    8280:	66 5d                	pop    %ebp
    8282:	66 c3                	retl   

00008284 <enter_protect_mode>:
    {0xFFFF , 0x0000 , 0x9200 , 0x00CF } , 
} ; 


static void enter_protect_mode() 
{
    8284:	66 55                	push   %ebp
    8286:	66 89 e5             	mov    %esp,%ebp
    8289:	66 83 ec 10          	sub    $0x10,%esp
    // 关中断
    cli() ; 
    828d:	66 e8 e4 fd ff ff    	calll  8077 <cli>

    // 打开A20 地址线
    uint8_t val = inb(0x92) ; 
    8293:	66 68 92 00 00 00    	pushl  $0x92
    8299:	66 e8 7e fd ff ff    	calll  801d <inb>
    829f:	66 83 c4 04          	add    $0x4,%esp
    82a3:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92 , val | 0x2 ) ; 
    82a7:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82ad:	66 83 c8 02          	or     $0x2,%eax
    82b1:	66 0f b6 c0          	movzbl %al,%eax
    82b5:	66 50                	push   %eax
    82b7:	66 68 92 00 00 00    	pushl  $0x92
    82bd:	66 e8 84 fd ff ff    	calll  8047 <outb>
    82c3:	66 83 c4 08          	add    $0x8,%esp

    // 设置 gdt 表
    lgdt((uint32_t)gdt_table , sizeof(gdt_table) ) ; 
    82c7:	66 b8 7c a0 00 00    	mov    $0xa07c,%eax
    82cd:	66 6a 18             	pushl  $0x18
    82d0:	66 50                	push   %eax
    82d2:	66 e8 aa fd ff ff    	calll  8082 <lgdt>
    82d8:	66 83 c4 08          	add    $0x8,%esp

    // 设置 cr0 的最低位
    uint32_t  CR0 = read_cr0() ; 
    82dc:	66 e8 d6 fd ff ff    	calll  80b8 <read_cr0>
    82e2:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(CR0 | (1 << 0 ) ) ;
    82e7:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82ec:	66 83 c8 01          	or     $0x1,%eax
    82f0:	66 50                	push   %eax
    82f2:	66 e8 da fd ff ff    	calll  80d2 <write_cr0>
    82f8:	66 83 c4 04          	add    $0x4,%esp

    // 实现远跳转
    far_jump(8 , (uint32_t)protected_mode_entry ) ; 
    82fc:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    8302:	66 50                	push   %eax
    8304:	66 6a 08             	pushl  $0x8
    8307:	66 e8 d7 fd ff ff    	calll  80e4 <far_jump>
    830d:	66 83 c4 08          	add    $0x8,%esp

}
    8311:	90                   	nop
    8312:	66 c9                	leavel 
    8314:	66 c3                	retl   

00008316 <loader_entry>:



void loader_entry(void) // 对操作系统的运行环境初始化，加载操作系统到内存中去
{
    8316:	66 55                	push   %ebp
    8318:	66 89 e5             	mov    %esp,%ebp
    show_msg("......loading.......\n\r");
    831b:	66 68 63 90 00 00    	pushl  $0x9063
    8321:	66 e8 e8 fd ff ff    	calll  810f <show_msg>
    8327:	66 83 c4 04          	add    $0x4,%esp

    // 添加代码，实现对内存容量的检测
    detect_memory();
    832b:	66 e8 1a fe ff ff    	calll  814b <detect_memory>

    // 进入保护模式代码
    enter_protect_mode() ; 
    8331:	66 e8 4d ff ff ff    	calll  8284 <enter_protect_mode>

    for(; ; ) {} 
    8337:	eb fe                	jmp    8337 <loader_entry+0x21>
