
/home/hsa/X86-system/start/start/build/source/loader/loader.elf:     file format elf32-i386
/home/hsa/X86-system/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000293 memsz 0x00000293 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000007a memsz 0x0000007a flags r--
    LOAD off    0x0000207c vaddr 0x0000a07c paddr 0x0000a07c align 2**12
         filesz 0x00000018 memsz 0x00000078 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000293  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000007a  00009000  00009000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000018  0000a07c  0000a07c  0000207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000a0a0  0000a0a0  00002094  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000020c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   0000037d  00000000  00000000  00002100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 0000019e  00000000  00000000  0000247d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   0000018e  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000118  00000000  00000000  000027ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000264  00000000  00000000  000028c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000138  00000000  00000000  00002b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000017  00000000  00000000  00002c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 load_32.c
00000000 l    df *ABS*	00000000 loader_16.c
00008003 l     F .text	0000002a inb
0000802d l     F .text	00000030 outb
0000805d l     F .text	0000000b cli
00008068 l     F .text	00000036 lgdt
0000809e l     F .text	0000003c show_msg
0000a0a0 l     O .bss	00000054 boot_info
000080da l     F .text	00000139 detect_memory
00008213 l     F .text	0000005d enter_protect_mode
00008270 g     F .text	00000023 loader_entry
0000a07c g     O .data	00000018 gdt_table
00008000 g       .text	00000000 _start
0000a094 g       .bss	00000000 __bss_start
0000a094 g       .data	00000000 _edata
0000a0f4 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
 	.text
	.global _start
	.extern loader_entry

_start: 
	jmp loader_entry 
    8000:	e9 6d 02             	jmp    8270 <loader_entry>

00008003 <inb>:
#include "types.h"


// 从指定的端口中读入一个字节的数据返回
static inline uint8_t inb(uint16_t port )   
{
    8003:	66 55                	push   %ebp
    8005:	66 89 e5             	mov    %esp,%ebp
    8008:	66 83 ec 14          	sub    $0x14,%esp
    800c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8011:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv ; 
    __asm__  __volatile__ 
    8015:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    801b:	66 89 c2             	mov    %eax,%edx
    801e:	ec                   	in     (%dx),%al
    801f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    (
        "inb %[p] , %[v] \n\t" 
        : [v]"=a"(rv)
        : [p]"d"(port)
    ) ; 
    return rv ; 
    8023:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8029:	66 c9                	leavel 
    802b:	66 c3                	retl   

0000802d <outb>:

// 向指定端口输出数据
static inline void outb(uint16_t port , uint8_t data )
{   
    802d:	66 55                	push   %ebp
    802f:	66 89 e5             	mov    %esp,%ebp
    8032:	66 83 ec 08          	sub    $0x8,%esp
    8036:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    803b:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    8040:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    8044:	66 89 d0             	mov    %edx,%eax
    8047:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__ (
    804b:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8051:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8057:	ee                   	out    %al,(%dx)
        "outb %[v] , %[p]\n\t"
        : 
        : [p]"d"(port) , [v]"a"(data) 
    ) ; 
}   
    8058:	90                   	nop
    8059:	66 c9                	leavel 
    805b:	66 c3                	retl   

0000805d <cli>:

static inline void cli(void)
{
    805d:	66 55                	push   %ebp
    805f:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli") ; 
    8062:	fa                   	cli    
}
    8063:	90                   	nop
    8064:	66 5d                	pop    %ebp
    8066:	66 c3                	retl   

00008068 <lgdt>:
{
    __asm__ __volatile__("sti") ; 
}

static inline void lgdt(uint32_t start , uint32_t size ) 
{
    8068:	66 55                	push   %ebp
    806a:	66 89 e5             	mov    %esp,%ebp
    806d:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit ; 
        uint16_t start15_0 ; 
        uint16_t start31_16 ; 
    } gdt ; 
    
    gdt.start31_16 = start >> 16 ; 
    8071:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8076:	66 c1 e8 10          	shr    $0x10,%eax
    807a:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF ; 
    807e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8083:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1 ; 
    8087:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    808c:	66 83 e8 01          	sub    $0x1,%eax
    8090:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__ (
    8094:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
        "lgdt %[g]"
        :
        :[g]"m"(gdt) 
    ) ; 
}
    8099:	90                   	nop
    809a:	66 c9                	leavel 
    809c:	66 c3                	retl   

0000809e <show_msg>:
__asm__(".code16gcc");

#include "loader.h"

static void show_msg(const char *msg)
{
    809e:	66 55                	push   %ebp
    80a0:	66 89 e5             	mov    %esp,%ebp
    80a3:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while ((c = *msg++) != '\0')
    80a7:	eb 0c                	jmp    80b5 <show_msg+0x17>
    {
        // 如果内联汇编有多条指令，则每一行都要加上双引号，并且该行以 \n\t 结尾 , 请将内联汇编写为标准的格式
        __asm__ __volatile__(
    80a9:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    80af:	b4 0e                	mov    $0xe,%ah
    80b1:	88 c0                	mov    %al,%al
    80b3:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0')
    80b5:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80ba:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    80bf:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    80c4:	67 66 0f b6 00       	movzbl (%eax),%eax
    80c9:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    80cd:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    80d2:	75 d5                	jne    80a9 <show_msg+0xb>
            :
            : [ch] "r"(c)
            :
        );
    }
}
    80d4:	90                   	nop
    80d5:	90                   	nop
    80d6:	66 c9                	leavel 
    80d8:	66 c3                	retl   

000080da <detect_memory>:

static boot_info_t boot_info; // 这个结构体变量用来存储返回的信息。

static void detect_memory(void)
{
    80da:	66 55                	push   %ebp
    80dc:	66 89 e5             	mov    %esp,%ebp
    80df:	66 57                	push   %edi
    80e1:	66 56                	push   %esi
    80e3:	66 53                	push   %ebx
    80e5:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID = 0;
    80e9:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    80f0:	00 00 
    SMAP_entry_t smap_entry;
    int signature, bytes;

    show_msg("try to detect memory.......\r\n");
    80f2:	66 68 00 90 00 00    	pushl  $0x9000
    80f8:	66 e8 a0 ff ff ff    	calll  809e <show_msg>
    80fe:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    8102:	66 c7 06 f0 a0 00 00 	movl   $0x0,-0x5f10
    8109:	00 00 
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++)
    810b:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    8112:	00 00 
    8114:	e9 d0 00             	jmp    81e7 <detect_memory+0x10d>
    {
        SMAP_entry_t *entry = &smap_entry;
    8117:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    811c:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

        __asm__ __volatile__("int  $0x15"
    8121:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8127:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    812c:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    8132:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    8138:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    813d:	66 89 f7             	mov    %esi,%edi
    8140:	cd 15                	int    $0x15
    8142:	66 89 da             	mov    %ebx,%edx
    8145:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    814a:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    814f:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
                             : "=a"(signature), "=c"(bytes), "=b"(contID)
                             : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry)
                            );

        if (signature != 0x534D4150)
    8154:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    815b:	4d 53 
    815d:	74 13                	je     8172 <detect_memory+0x98>
        {
            show_msg("failed.\r\n");
    815f:	66 68 1e 90 00 00    	pushl  $0x901e
    8165:	66 e8 33 ff ff ff    	calll  809e <show_msg>
    816b:	66 83 c4 04          	add    $0x4,%esp
    816f:	e9 92 00             	jmp    8204 <detect_memory+0x12a>
            return;
        }

        if (bytes > 20 && (entry->ACPI & 0x0001) == 0)
    8172:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    8178:	7e 13                	jle    818d <detect_memory+0xb3>
    817a:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    817f:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    8184:	66 83 e0 01          	and    $0x1,%eax
    8188:	66 85 c0             	test   %eax,%eax
    818b:	74 53                	je     81e0 <detect_memory+0x106>
        {
            continue;
        }

        if (entry->Type == 1)
    818d:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    8192:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8197:	66 83 f8 01          	cmp    $0x1,%eax
    819b:	75 39                	jne    81d6 <detect_memory+0xfc>
        {
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    819d:	66 a1 f0 a0          	mov    0xa0f0,%eax
    81a1:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    81a6:	67 66 8b 12          	mov    (%edx),%edx
    81aa:	67 66 89 14 c5 a0 a0 	mov    %edx,0xa0a0(,%eax,8)
    81b1:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    81b3:	66 a1 f0 a0          	mov    0xa0f0,%eax
    81b7:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    81bc:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    81c1:	67 66 89 14 c5 a4 a0 	mov    %edx,0xa0a4(,%eax,8)
    81c8:	00 00 
            boot_info.ram_region_count++;
    81ca:	66 a1 f0 a0          	mov    0xa0f0,%eax
    81ce:	66 83 c0 01          	add    $0x1,%eax
    81d2:	66 a3 f0 a0          	mov    %eax,0xa0f0
        }
        if (contID == 0)
    81d6:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    81dc:	74 15                	je     81f3 <detect_memory+0x119>
    81de:	eb 01                	jmp    81e1 <detect_memory+0x107>
            continue;
    81e0:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++)
    81e1:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    81e7:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    81ed:	0f 8e 26 ff          	jle    8117 <detect_memory+0x3d>
    81f1:	eb 01                	jmp    81f4 <detect_memory+0x11a>
            break;
    81f3:	90                   	nop
    }

    show_msg("great we are complete the thing that userful detect memory");
    81f4:	66 68 28 90 00 00    	pushl  $0x9028
    81fa:	66 e8 9e fe ff ff    	calll  809e <show_msg>
    8200:	66 83 c4 04          	add    $0x4,%esp
}
    8204:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8209:	66 5b                	pop    %ebx
    820b:	66 5e                	pop    %esi
    820d:	66 5f                	pop    %edi
    820f:	66 5d                	pop    %ebp
    8211:	66 c3                	retl   

00008213 <enter_protect_mode>:
    {0xFFFF , 0x0000 , 0x9200 , 0x00CF } , 
} ; 


static void enter_protect_mode() 
{
    8213:	66 55                	push   %ebp
    8215:	66 89 e5             	mov    %esp,%ebp
    8218:	66 83 ec 10          	sub    $0x10,%esp
    // 关中断
    cli() ; 
    821c:	66 e8 3b fe ff ff    	calll  805d <cli>

    // 打开A20 地址线
    uint8_t val = inb(0x92) ; 
    8222:	66 68 92 00 00 00    	pushl  $0x92
    8228:	66 e8 d5 fd ff ff    	calll  8003 <inb>
    822e:	66 83 c4 04          	add    $0x4,%esp
    8232:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92 , val | 0x2 ) ; 
    8236:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    823c:	66 83 c8 02          	or     $0x2,%eax
    8240:	66 0f b6 c0          	movzbl %al,%eax
    8244:	66 50                	push   %eax
    8246:	66 68 92 00 00 00    	pushl  $0x92
    824c:	66 e8 db fd ff ff    	calll  802d <outb>
    8252:	66 83 c4 08          	add    $0x8,%esp

    // 设置 gdt 表
    lgdt((uint32_t)gdt_table , sizeof(gdt_table) ) ; 
    8256:	66 b8 7c a0 00 00    	mov    $0xa07c,%eax
    825c:	66 6a 18             	pushl  $0x18
    825f:	66 50                	push   %eax
    8261:	66 e8 01 fe ff ff    	calll  8068 <lgdt>
    8267:	66 83 c4 08          	add    $0x8,%esp

}
    826b:	90                   	nop
    826c:	66 c9                	leavel 
    826e:	66 c3                	retl   

00008270 <loader_entry>:

void loader_entry(void) // 对操作系统的运行环境初始化，加载操作系统到内存中去
{
    8270:	66 55                	push   %ebp
    8272:	66 89 e5             	mov    %esp,%ebp
    show_msg("......loading.......\n\r");
    8275:	66 68 63 90 00 00    	pushl  $0x9063
    827b:	66 e8 1d fe ff ff    	calll  809e <show_msg>
    8281:	66 83 c4 04          	add    $0x4,%esp

    // 添加代码，实现对内存容量的检测

    detect_memory();
    8285:	66 e8 4f fe ff ff    	calll  80da <detect_memory>

    enter_protect_mode() ; 
    828b:	66 e8 82 ff ff ff    	calll  8213 <enter_protect_mode>

    for(; ; ) {} 
    8291:	eb fe                	jmp    8291 <loader_entry+0x21>
