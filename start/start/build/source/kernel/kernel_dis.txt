
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00100000

Program Header:
    LOAD off    0x00000000 vaddr 0x000ff000 paddr 0x000ff000 align 2**12
         filesz 0x00000094 memsz 0x00000094 flags r--
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000014 memsz 0x00000014 flags r-x
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000014  00100000  00100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      0000002b  00000000  00000000  00001014  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000040  00000000  00000000  00001040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_info   0000010a  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_abbrev 000000c6  00000000  00000000  0000118a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line   000000a6  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_frame  00000034  00000000  00000000  000012f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000194  00000000  00000000  0000132c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line_str 000000ef  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 init.c
0010000e g     F .text	00000006 kernel_init
00100000 g       .text	00000000 _start
00101000 g       .text	00000000 __bss_start
00101000 g       .text	00000000 _edata
00101000 g       .text	00000000 _end



Disassembly of section .text:

00100000 <_start>:
_start: 



	# 假设boot_info_ *  指针存放在 eax 中
	push %ebp 
  100000:	55                   	push   %ebp
	mov %esp , %ebp 
  100001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp) , %eax 
  100003:	8b 45 08             	mov    0x8(%ebp),%eax

	# 这里进行参数的压栈
	push %eax   
  100006:	50                   	push   %eax
	call kernel_init
  100007:	e8 02 00 00 00       	call   10000e <kernel_init>
  10000c:	eb fe                	jmp    10000c <_start+0xc>

0010000e <kernel_init>:
#include "common/boot_info.h"
#include "init.h"


void kernel_init(boot_info_t* boot_info )  
{
  10000e:	55                   	push   %ebp
  10000f:	89 e5                	mov    %esp,%ebp
     
  100011:	90                   	nop
  100012:	5d                   	pop    %ebp
  100013:	c3                   	ret    
