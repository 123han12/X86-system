
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000029d memsz 0x00002eb0 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000284  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000019  00010284  00010284  00001284  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .bss          00002c10  000102a0  000102a0  0000129d  2**5
                  ALLOC
  3 .debug_line   0000029a  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_line_str 000001e7  00000000  00000000  00001537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_info   000005d9  00000000  00000000  0000171e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_abbrev 000003ac  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_aranges 00000080  00000000  00000000  000020a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_str    000002f4  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .comment      0000002b  00000000  00000000  0000241c  2**0
                  CONTENTS, READONLY
 10 .debug_frame  0000018c  00000000  00000000  00002448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
0001003f l     F .text	00000028 lgdt
000102a0 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000101b6 l     F .text	00000030 lidt
00010aa0 l     O .bss	00000400 idt_table
00010239 l     F .text	00000005 do_default_handler
00000000 l    df *ABS*	00000000 init.c
00010ea0 l     O .bss	00000004 init_boot_info
000100f4 g     F .text	00000047 gate_dest_set
000101ab g     F .text	0000000b cpu_init
0001026c g     F .text	00000018 init_main
00010eb0 g     O .bss	00002000 stack
0001002b g       .text	00000000 exception_handler_unkown
00010251 g     F .text	0000001b kernel_init
00010000 g       .text	00000000 _start
0001013b g     F .text	00000070 init_gdt
000101e6 g     F .text	00000053 irq_init
0001023e g     F .text	00000013 do_handler_unkown
00010067 g     F .text	0000008d segment_desc_set



Disassembly of section .text:

00010000 <_start>:
	.extern kernel_init
	.extern init_main
_start: 

	# 假设boot_info_ *  指针存放在 eax 中
	push %ebp 
   10000:	55                   	push   %ebp
	mov %esp , %ebp 
   10001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp) , %eax 
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

	# 这里进行参数的压栈
	push %eax   
   10006:	50                   	push   %eax
	call kernel_init
   10007:	e8 45 02 00 00       	call   10251 <kernel_init>

	jmp $KERNEL_SELECTOR_CS , $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS , %ax 
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	mov $(stack + KERNEL_STACK_SIZE) , %esp 
   10021:	bc b0 2e 01 00       	mov    $0x12eb0,%esp

	# 栈和段沿用之前的设置
	jmp init_main  
   10026:	e9 41 02 00 00       	jmp    1026c <init_main>

0001002b <exception_handler_unkown>:
	.extern do_handler_unkown
	.global exception_handler_unkown
exception_handler_unkown:

	# 保存现场
	pusha 
   1002b:	60                   	pusha  
	push %ds 
   1002c:	1e                   	push   %ds
	push %es 
   1002d:	06                   	push   %es
	push %fs 
   1002e:	0f a0                	push   %fs
	push %gs 
   10030:	0f a8                	push   %gs
	

	call do_handler_unkown
   10032:	e8 07 02 00 00       	call   1023e <do_handler_unkown>

	# 恢复现场
	pop %gs 
   10037:	0f a9                	pop    %gs
	pop %fs 
   10039:	0f a1                	pop    %fs
	pop %es 
   1003b:	07                   	pop    %es
	pop %ds 
   1003c:	1f                   	pop    %ds
	popa 
   1003d:	61                   	popa   
	iret 
   1003e:	cf                   	iret   

0001003f <lgdt>:
{
    __asm__ __volatile__("sti") ; 
}

static inline void lgdt(uint32_t start , uint32_t size ) 
{
   1003f:	55                   	push   %ebp
   10040:	89 e5                	mov    %esp,%ebp
   10042:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit ; 
        uint16_t start15_0 ; 
        uint16_t start31_16 ; 
    } gdt ; 
    
    gdt.start31_16 = start >> 16 ; 
   10045:	8b 45 08             	mov    0x8(%ebp),%eax
   10048:	c1 e8 10             	shr    $0x10,%eax
   1004b:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF ; 
   1004f:	8b 45 08             	mov    0x8(%ebp),%eax
   10052:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1 ; 
   10056:	8b 45 0c             	mov    0xc(%ebp),%eax
   10059:	83 e8 01             	sub    $0x1,%eax
   1005c:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__ (
   10060:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
        "lgdt %[g]"
        :
        :[g]"m"(gdt) 
    ) ; 
}
   10064:	90                   	nop
   10065:	c9                   	leave  
   10066:	c3                   	ret    

00010067 <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE] ; 


void segment_desc_set( uint16_t selector , uint32_t base , uint32_t limit , uint16_t attr ) 
{
   10067:	55                   	push   %ebp
   10068:	89 e5                	mov    %esp,%ebp
   1006a:	83 ec 18             	sub    $0x18,%esp
   1006d:	8b 55 08             	mov    0x8(%ebp),%edx
   10070:	8b 45 14             	mov    0x14(%ebp),%eax
   10073:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10077:	66 89 45 e8          	mov    %ax,-0x18(%ebp)

    // 根据提供的信息设置当前的GDT 表项

    if(limit > 0xFFFFF ) 
   1007b:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   10082:	76 0a                	jbe    1008e <segment_desc_set+0x27>
    {
        limit >>= 12 ; 
   10084:	c1 6d 10 0c          	shrl   $0xc,0x10(%ebp)
        attr |= SEG_G ;  
   10088:	66 81 4d e8 00 80    	orw    $0x8000,-0x18(%ebp)
    }
    segment_desc_t * desc = gdt_table + (selector >> 3 ); 
   1008e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   10092:	66 c1 e8 03          	shr    $0x3,%ax
   10096:	0f b7 c0             	movzwl %ax,%eax
   10099:	c1 e0 03             	shl    $0x3,%eax
   1009c:	05 a0 02 01 00       	add    $0x102a0,%eax
   100a1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    desc->limit15_0 = limit & 0xFFFF ; 
   100a4:	8b 45 10             	mov    0x10(%ebp),%eax
   100a7:	89 c2                	mov    %eax,%edx
   100a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100ac:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF ; 
   100af:	8b 45 0c             	mov    0xc(%ebp),%eax
   100b2:	89 c2                	mov    %eax,%edx
   100b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100b7:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16 ) & 0xFF ; 
   100bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   100be:	c1 e8 10             	shr    $0x10,%eax
   100c1:	89 c2                	mov    %eax,%edx
   100c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100c6:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr |  ( (( limit >> 16 ) & 0xF) << 8 ) ;   
   100c9:	8b 45 10             	mov    0x10(%ebp),%eax
   100cc:	c1 e8 10             	shr    $0x10,%eax
   100cf:	c1 e0 08             	shl    $0x8,%eax
   100d2:	66 25 00 0f          	and    $0xf00,%ax
   100d6:	66 0b 45 e8          	or     -0x18(%ebp),%ax
   100da:	89 c2                	mov    %eax,%edx
   100dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100df:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24 ) & 0xFF ; 
   100e3:	8b 45 0c             	mov    0xc(%ebp),%eax
   100e6:	c1 e8 18             	shr    $0x18,%eax
   100e9:	89 c2                	mov    %eax,%edx
   100eb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100ee:	88 50 07             	mov    %dl,0x7(%eax)
}
   100f1:	90                   	nop
   100f2:	c9                   	leave  
   100f3:	c3                   	ret    

000100f4 <gate_dest_set>:

void gate_dest_set(gate_desc_t* desc , uint16_t selector , uint32_t offset , uint16_t attr )
{
   100f4:	55                   	push   %ebp
   100f5:	89 e5                	mov    %esp,%ebp
   100f7:	83 ec 08             	sub    $0x8,%esp
   100fa:	8b 55 0c             	mov    0xc(%ebp),%edx
   100fd:	8b 45 14             	mov    0x14(%ebp),%eax
   10100:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10104:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF ; 
   10108:	8b 45 10             	mov    0x10(%ebp),%eax
   1010b:	89 c2                	mov    %eax,%edx
   1010d:	8b 45 08             	mov    0x8(%ebp),%eax
   10110:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector ; 
   10113:	8b 45 08             	mov    0x8(%ebp),%eax
   10116:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1011a:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr ; 
   1011e:	8b 45 08             	mov    0x8(%ebp),%eax
   10121:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   10125:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFF ; 
   10129:	8b 45 10             	mov    0x10(%ebp),%eax
   1012c:	c1 e8 10             	shr    $0x10,%eax
   1012f:	89 c2                	mov    %eax,%edx
   10131:	8b 45 08             	mov    0x8(%ebp),%eax
   10134:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   10138:	90                   	nop
   10139:	c9                   	leave  
   1013a:	c3                   	ret    

0001013b <init_gdt>:

void init_gdt(void)
{
   1013b:	55                   	push   %ebp
   1013c:	89 e5                	mov    %esp,%ebp
   1013e:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0 ; i < GDT_TABLE_SIZE ; ++ i )
   10141:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   10148:	eb 1c                	jmp    10166 <init_gdt+0x2b>
    {
        segment_desc_set(i << 3 , 0 , 0 , 0 ) ; 
   1014a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1014d:	c1 e0 03             	shl    $0x3,%eax
   10150:	0f b7 c0             	movzwl %ax,%eax
   10153:	6a 00                	push   $0x0
   10155:	6a 00                	push   $0x0
   10157:	6a 00                	push   $0x0
   10159:	50                   	push   %eax
   1015a:	e8 08 ff ff ff       	call   10067 <segment_desc_set>
   1015f:	83 c4 10             	add    $0x10,%esp
    for(int i = 0 ; i < GDT_TABLE_SIZE ; ++ i )
   10162:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10166:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   1016d:	7e db                	jle    1014a <init_gdt+0xf>
    }

    // 设置代码段和数据段。
    segment_desc_set(KERNEL_SELECTOR_CS , 0x00000000 , 0xFFFFFFFF , 
   1016f:	68 9a c0 00 00       	push   $0xc09a
   10174:	6a ff                	push   $0xffffffff
   10176:	6a 00                	push   $0x0
   10178:	6a 08                	push   $0x8
   1017a:	e8 e8 fe ff ff       	call   10067 <segment_desc_set>
   1017f:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D | SEG_G 
    ) ;
    segment_desc_set(KERNEL_SELECTOR_DS , 0x00000000 , 0xFFFFFFFF ,  
   10182:	68 92 c0 00 00       	push   $0xc092
   10187:	6a ff                	push   $0xffffffff
   10189:	6a 00                	push   $0x0
   1018b:	6a 10                	push   $0x10
   1018d:	e8 d5 fe ff ff       	call   10067 <segment_desc_set>
   10192:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D | SEG_G 
    ) ;  

    lgdt((uint32_t)gdt_table , sizeof(gdt_table) ) ;  // 将 gdt_table 表的起始地址放入到 gdtr 寄存器中
   10195:	b8 a0 02 01 00       	mov    $0x102a0,%eax
   1019a:	68 00 08 00 00       	push   $0x800
   1019f:	50                   	push   %eax
   101a0:	e8 9a fe ff ff       	call   1003f <lgdt>
   101a5:	83 c4 08             	add    $0x8,%esp

}
   101a8:	90                   	nop
   101a9:	c9                   	leave  
   101aa:	c3                   	ret    

000101ab <cpu_init>:

void cpu_init(void)
{
   101ab:	55                   	push   %ebp
   101ac:	89 e5                	mov    %esp,%ebp
    init_gdt() ; 
   101ae:	e8 88 ff ff ff       	call   1013b <init_gdt>
}
   101b3:	90                   	nop
   101b4:	5d                   	pop    %ebp
   101b5:	c3                   	ret    

000101b6 <lidt>:
        :
    ) ; 
}

static inline void lidt(uint32_t idt_addr , uint16_t idt_size ) 
{
   101b6:	55                   	push   %ebp
   101b7:	89 e5                	mov    %esp,%ebp
   101b9:	83 ec 14             	sub    $0x14,%esp
   101bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   101bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
        uint16_t limit ; 
        uint16_t start15_0 ; 
        uint16_t start31_16 ; 
    } idt ; 

    idt.limit = idt_size - 1 ; 
   101c3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   101c7:	83 e8 01             	sub    $0x1,%eax
   101ca:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    idt.start15_0 = idt_addr & 0xFFFF ; 
   101ce:	8b 45 08             	mov    0x8(%ebp),%eax
   101d1:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.start31_16 = (idt_addr >> 16) & 0xFFFF ;   
   101d5:	8b 45 08             	mov    0x8(%ebp),%eax
   101d8:	c1 e8 10             	shr    $0x10,%eax
   101db:	66 89 45 fe          	mov    %ax,-0x2(%ebp)

    __asm__ __volatile__ (
   101df:	0f 01 5d fa          	lidtl  -0x6(%ebp)
        "lidt %[g]"
        :
        :[g]"m"(idt)
    ) ;
}
   101e3:	90                   	nop
   101e4:	c9                   	leave  
   101e5:	c3                   	ret    

000101e6 <irq_init>:

static gate_desc_t idt_table[IDT_TABLE_NR] ; 

void exception_handler_unkown(void) ; 
void irq_init(void)
{
   101e6:	55                   	push   %ebp
   101e7:	89 e5                	mov    %esp,%ebp
   101e9:	83 ec 18             	sub    $0x18,%esp
    // 初始化每一个表项
    for(int i = 0 ; i < IDT_TABLE_NR ; i ++ )
   101ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   101f3:	eb 25                	jmp    1021a <irq_init+0x34>
    {
        gate_dest_set(( idt_table + i ) , KERNEL_SELECTOR_CS , (uint32_t)exception_handler_unkown , 
   101f5:	ba 2b 00 01 00       	mov    $0x1002b,%edx
   101fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   101fd:	c1 e0 03             	shl    $0x3,%eax
   10200:	05 a0 0a 01 00       	add    $0x10aa0,%eax
   10205:	68 00 8e 00 00       	push   $0x8e00
   1020a:	52                   	push   %edx
   1020b:	6a 08                	push   $0x8
   1020d:	50                   	push   %eax
   1020e:	e8 e1 fe ff ff       	call   100f4 <gate_dest_set>
   10213:	83 c4 10             	add    $0x10,%esp
    for(int i = 0 ; i < IDT_TABLE_NR ; i ++ )
   10216:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1021a:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   1021e:	7e d5                	jle    101f5 <irq_init+0xf>
            GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_INT ) ;  
    }

    // 将 idt_table 地址加载到 idtr 寄存器
    lidt((uint32_t)idt_table , sizeof(idt_table) ) ; 
   10220:	b8 a0 0a 01 00       	mov    $0x10aa0,%eax
   10225:	83 ec 08             	sub    $0x8,%esp
   10228:	68 00 04 00 00       	push   $0x400
   1022d:	50                   	push   %eax
   1022e:	e8 83 ff ff ff       	call   101b6 <lidt>
   10233:	83 c4 10             	add    $0x10,%esp
}
   10236:	90                   	nop
   10237:	c9                   	leave  
   10238:	c3                   	ret    

00010239 <do_default_handler>:

static void do_default_handler(const char* message )
{
   10239:	55                   	push   %ebp
   1023a:	89 e5                	mov    %esp,%ebp
    for(; ;){ }
   1023c:	eb fe                	jmp    1023c <do_default_handler+0x3>

0001023e <do_handler_unkown>:
}


void do_handler_unkown(void)
{
   1023e:	55                   	push   %ebp
   1023f:	89 e5                	mov    %esp,%ebp
    do_default_handler("unkown exception........") ; 
   10241:	68 84 02 01 00       	push   $0x10284
   10246:	e8 ee ff ff ff       	call   10239 <do_default_handler>
   1024b:	83 c4 04             	add    $0x4,%esp
   1024e:	90                   	nop
   1024f:	c9                   	leave  
   10250:	c3                   	ret    

00010251 <kernel_init>:


static boot_info_t* init_boot_info ; 

void kernel_init(boot_info_t* boot_info )  
{   
   10251:	55                   	push   %ebp
   10252:	89 e5                	mov    %esp,%ebp
   10254:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info ; 
   10257:	8b 45 08             	mov    0x8(%ebp),%eax
   1025a:	a3 a0 0e 01 00       	mov    %eax,0x10ea0
    cpu_init() ; 
   1025f:	e8 47 ff ff ff       	call   101ab <cpu_init>
    irq_init() ; 
   10264:	e8 7d ff ff ff       	call   101e6 <irq_init>
}
   10269:	90                   	nop
   1026a:	c9                   	leave  
   1026b:	c3                   	ret    

0001026c <init_main>:

void init_main()
{
   1026c:	55                   	push   %ebp
   1026d:	89 e5                	mov    %esp,%ebp
   1026f:	83 ec 10             	sub    $0x10,%esp
    int a = 3 / 0 ;  
   10272:	b8 03 00 00 00       	mov    $0x3,%eax
   10277:	b9 00 00 00 00       	mov    $0x0,%ecx
   1027c:	99                   	cltd   
   1027d:	f7 f9                	idiv   %ecx
   1027f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int b ; 
    for( ; ; ) { }
   10282:	eb fe                	jmp    10282 <init_main+0x16>
