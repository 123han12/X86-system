
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000176 memsz 0x00002990 flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00002810  00010180  00010180  00001176  2**5
                  ALLOC
  2 .debug_line   000001af  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  3 .debug_line_str 000001a8  00000000  00000000  00001325  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  4 .debug_info   00000334  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_abbrev 00000227  00000000  00000000  00001801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_aranges 00000060  00000000  00000000  00001a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_str    00000250  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .comment      0000002b  00000000  00000000  00001cd8  2**0
                  CONTENTS, READONLY
  9 .debug_frame  000000e0  00000000  00000000  00001d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.S.o
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 cpu.c
0001002b l     F .text	00000028 lgdt
00010180 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 init.c
00010980 l     O .bss	00000004 init_boot_info
00010150 g     F .text	0000000b cpu_init
00010171 g     F .text	00000005 init_main
00010990 g     O .bss	00002000 stack
0001015b g     F .text	00000016 kernel_init
00010000 g       .text	00000000 _start
000100e0 g     F .text	00000070 init_gdt
00010053 g     F .text	0000008d segment_desc_set



Disassembly of section .text:

00010000 <_start>:
	.extern kernel_init
	.extern init_main
_start: 

	# 假设boot_info_ *  指针存放在 eax 中
	push %ebp 
   10000:	55                   	push   %ebp
	mov %esp , %ebp 
   10001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp) , %eax 
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

	# 这里进行参数的压栈
	push %eax   
   10006:	50                   	push   %eax
	call kernel_init
   10007:	e8 4f 01 00 00       	call   1015b <kernel_init>

	jmp $KERNEL_SELECTOR_CS , $gdt_reload
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS , %ax 
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

	mov $(stack + KERNEL_STACK_SIZE) , %esp 
   10021:	bc 90 29 01 00       	mov    $0x12990,%esp

	# 栈和段沿用之前的设置
	jmp init_main  
   10026:	e9 46 01 00 00       	jmp    10171 <init_main>

0001002b <lgdt>:
{
    __asm__ __volatile__("sti") ; 
}

static inline void lgdt(uint32_t start , uint32_t size ) 
{
   1002b:	55                   	push   %ebp
   1002c:	89 e5                	mov    %esp,%ebp
   1002e:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit ; 
        uint16_t start15_0 ; 
        uint16_t start31_16 ; 
    } gdt ; 
    
    gdt.start31_16 = start >> 16 ; 
   10031:	8b 45 08             	mov    0x8(%ebp),%eax
   10034:	c1 e8 10             	shr    $0x10,%eax
   10037:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF ; 
   1003b:	8b 45 08             	mov    0x8(%ebp),%eax
   1003e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1 ; 
   10042:	8b 45 0c             	mov    0xc(%ebp),%eax
   10045:	83 e8 01             	sub    $0x1,%eax
   10048:	66 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__ (
   1004c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
        "lgdt %[g]"
        :
        :[g]"m"(gdt) 
    ) ; 
}
   10050:	90                   	nop
   10051:	c9                   	leave  
   10052:	c3                   	ret    

00010053 <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE] ; 


void segment_desc_set( uint16_t selector , uint32_t base , uint32_t limit , uint16_t attr ) 
{
   10053:	55                   	push   %ebp
   10054:	89 e5                	mov    %esp,%ebp
   10056:	83 ec 18             	sub    $0x18,%esp
   10059:	8b 55 08             	mov    0x8(%ebp),%edx
   1005c:	8b 45 14             	mov    0x14(%ebp),%eax
   1005f:	66 89 55 ec          	mov    %dx,-0x14(%ebp)
   10063:	66 89 45 e8          	mov    %ax,-0x18(%ebp)

    // 根据提供的信息设置当前的GDT 表项

    if(limit > 0xFFFFF ) 
   10067:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   1006e:	76 0a                	jbe    1007a <segment_desc_set+0x27>
    {
        limit >>= 12 ; 
   10070:	c1 6d 10 0c          	shrl   $0xc,0x10(%ebp)
        attr |= SEG_G ;  
   10074:	66 81 4d e8 00 80    	orw    $0x8000,-0x18(%ebp)
    }
    segment_desc_t * desc = gdt_table + (selector >> 3 ); 
   1007a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1007e:	66 c1 e8 03          	shr    $0x3,%ax
   10082:	0f b7 c0             	movzwl %ax,%eax
   10085:	c1 e0 03             	shl    $0x3,%eax
   10088:	05 80 01 01 00       	add    $0x10180,%eax
   1008d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    desc->limit15_0 = limit & 0xFFFF ; 
   10090:	8b 45 10             	mov    0x10(%ebp),%eax
   10093:	89 c2                	mov    %eax,%edx
   10095:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10098:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF ; 
   1009b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1009e:	89 c2                	mov    %eax,%edx
   100a0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100a3:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16 ) & 0xFF ; 
   100a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   100aa:	c1 e8 10             	shr    $0x10,%eax
   100ad:	89 c2                	mov    %eax,%edx
   100af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100b2:	88 50 04             	mov    %dl,0x4(%eax)
    desc->attr = attr |  ( (( limit >> 16 ) & 0xF) << 8 ) ;   
   100b5:	8b 45 10             	mov    0x10(%ebp),%eax
   100b8:	c1 e8 10             	shr    $0x10,%eax
   100bb:	c1 e0 08             	shl    $0x8,%eax
   100be:	66 25 00 0f          	and    $0xf00,%ax
   100c2:	66 0b 45 e8          	or     -0x18(%ebp),%ax
   100c6:	89 c2                	mov    %eax,%edx
   100c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100cb:	66 89 50 05          	mov    %dx,0x5(%eax)
    desc->base31_24 = (base >> 24 ) & 0xFF ; 
   100cf:	8b 45 0c             	mov    0xc(%ebp),%eax
   100d2:	c1 e8 18             	shr    $0x18,%eax
   100d5:	89 c2                	mov    %eax,%edx
   100d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100da:	88 50 07             	mov    %dl,0x7(%eax)
}
   100dd:	90                   	nop
   100de:	c9                   	leave  
   100df:	c3                   	ret    

000100e0 <init_gdt>:

void init_gdt(void)
{
   100e0:	55                   	push   %ebp
   100e1:	89 e5                	mov    %esp,%ebp
   100e3:	83 ec 10             	sub    $0x10,%esp
    for(int i = 0 ; i < GDT_TABLE_SIZE ; ++ i )
   100e6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   100ed:	eb 1c                	jmp    1010b <init_gdt+0x2b>
    {
        segment_desc_set(i << 3 , 0 , 0 , 0 ) ; 
   100ef:	8b 45 fc             	mov    -0x4(%ebp),%eax
   100f2:	c1 e0 03             	shl    $0x3,%eax
   100f5:	0f b7 c0             	movzwl %ax,%eax
   100f8:	6a 00                	push   $0x0
   100fa:	6a 00                	push   $0x0
   100fc:	6a 00                	push   $0x0
   100fe:	50                   	push   %eax
   100ff:	e8 4f ff ff ff       	call   10053 <segment_desc_set>
   10104:	83 c4 10             	add    $0x10,%esp
    for(int i = 0 ; i < GDT_TABLE_SIZE ; ++ i )
   10107:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1010b:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10112:	7e db                	jle    100ef <init_gdt+0xf>
    }

    // 设置代码段和数据段。
    segment_desc_set(KERNEL_SELECTOR_CS , 0x00000000 , 0xFFFFFFFF , 
   10114:	68 9a c0 00 00       	push   $0xc09a
   10119:	6a ff                	push   $0xffffffff
   1011b:	6a 00                	push   $0x0
   1011d:	6a 08                	push   $0x8
   1011f:	e8 2f ff ff ff       	call   10053 <segment_desc_set>
   10124:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D | SEG_G 
    ) ;
    segment_desc_set(KERNEL_SELECTOR_DS , 0x00000000 , 0xFFFFFFFF ,  
   10127:	68 92 c0 00 00       	push   $0xc092
   1012c:	6a ff                	push   $0xffffffff
   1012e:	6a 00                	push   $0x0
   10130:	6a 10                	push   $0x10
   10132:	e8 1c ff ff ff       	call   10053 <segment_desc_set>
   10137:	83 c4 10             	add    $0x10,%esp
        SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D | SEG_G 
    ) ;  

    lgdt((uint32_t)gdt_table , sizeof(gdt_table) ) ;  // 将 gdt_table 表的起始地址放入到 gdtr 寄存器中
   1013a:	b8 80 01 01 00       	mov    $0x10180,%eax
   1013f:	68 00 08 00 00       	push   $0x800
   10144:	50                   	push   %eax
   10145:	e8 e1 fe ff ff       	call   1002b <lgdt>
   1014a:	83 c4 08             	add    $0x8,%esp

}
   1014d:	90                   	nop
   1014e:	c9                   	leave  
   1014f:	c3                   	ret    

00010150 <cpu_init>:


void cpu_init(void)
{
   10150:	55                   	push   %ebp
   10151:	89 e5                	mov    %esp,%ebp
    init_gdt() ; 
   10153:	e8 88 ff ff ff       	call   100e0 <init_gdt>
}
   10158:	90                   	nop
   10159:	5d                   	pop    %ebp
   1015a:	c3                   	ret    

0001015b <kernel_init>:


static boot_info_t* init_boot_info ; 

void kernel_init(boot_info_t* boot_info )  
{   
   1015b:	55                   	push   %ebp
   1015c:	89 e5                	mov    %esp,%ebp
   1015e:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info ; 
   10161:	8b 45 08             	mov    0x8(%ebp),%eax
   10164:	a3 80 09 01 00       	mov    %eax,0x10980
    cpu_init() ; 
   10169:	e8 e2 ff ff ff       	call   10150 <cpu_init>
}
   1016e:	90                   	nop
   1016f:	c9                   	leave  
   10170:	c3                   	ret    

00010171 <init_main>:

void init_main()
{
   10171:	55                   	push   %ebp
   10172:	89 e5                	mov    %esp,%ebp
    for( ; ; ) { }
   10174:	eb fe                	jmp    10174 <init_main+0x3>
