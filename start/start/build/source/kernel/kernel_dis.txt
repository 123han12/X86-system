
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
/home/hsa/X86-system/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000030 memsz 0x0000003c flags rwx
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000013  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000000c  00010014  00010014  00001014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000010  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0000000c  00010030  00010030  00001030  2**2
                  ALLOC
  4 .debug_line   000000ae  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  5 .debug_line_str 000000ef  00000000  00000000  000010de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000001b0  00000000  00000000  000011cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000127  00000000  00000000  0000137d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_aranges 00000040  00000000  00000000  000014a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_str    00000207  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .comment      0000002b  00000000  00000000  000016ef  2**0
                  CONTENTS, READONLY
 11 .debug_frame  0000002c  00000000  00000000  0000171c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 init.c
00010024 l     O .data	00000004 static_global_var
00010034 l     O .bss	00000004 static_global_var_zero
00010038 l     O .bss	00000004 static_local_var_zero.1
0001002c l     O .data	00000004 static_local_var.0
00010020 g     O .data	00000004 global_var
00010030 g     O .bss	00000004 globa_var_zero
00010014 g     O .rodata	00000004 const_int
0001000e g     F .text	00000005 kernel_init
00010000 g       .text	00000000 _start
00010028 g     O .data	00000004 str



Disassembly of section .text:

00010000 <_start>:
_start: 



	# 假设boot_info_ *  指针存放在 eax 中
	push %ebp 
   10000:	55                   	push   %ebp
	mov %esp , %ebp 
   10001:	89 e5                	mov    %esp,%ebp
	mov 0x8(%ebp) , %eax 
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

	# 这里进行参数的压栈
	push %eax   
   10006:	50                   	push   %eax
	call kernel_init
   10007:	e8 02 00 00 00       	call   1000e <kernel_init>
   1000c:	eb fe                	jmp    1000c <_start+0xc>

0001000e <kernel_init>:

const int const_int = 0x33;
const char * str = "abcdefg";

void kernel_init(boot_info_t* boot_info )  
{   
   1000e:	55                   	push   %ebp
   1000f:	89 e5                	mov    %esp,%ebp
    int locar_var;
    static int static_local_var = 0x33;
    static int static_local_var_zero; 
    for (;;) {}
   10011:	eb fe                	jmp    10011 <kernel_init+0x3>
