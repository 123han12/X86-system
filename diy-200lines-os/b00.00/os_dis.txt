
os.elf:     file format elf32-i386
os.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00007c00

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00006000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00000c00 vaddr 0x00007c00 paddr 0x00007c00 align 2**12
         filesz 0x00000570 memsz 0x00000570 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x0000010c memsz 0x0000010c flags r--
    LOAD off    0x00003000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00003910 memsz 0x00008120 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000570  00007c00  00007c00  00000c00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000001c  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .eh_frame     000000f0  0000901c  0000901c  0000201c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .data         00003910  0000b000  0000b000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00004800  0000e920  0000e920  00006910  2**5
                  ALLOC
  5 .comment      0000002b  00000000  00000000  00006910  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00006940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_info   000004ac  00000000  00000000  00006980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00000197  00000000  00000000  00006e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_line   00000219  00000000  00000000  00006fc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    00000285  00000000  00000000  000071dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000045  00000000  00000000  00007461  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 start.o
00007c13 l       .text	00000000 read_self_all
00007e00 l       .text	00000000 _start_32
00007e96 l       .text	00000000 gdt_desc
00007e9c l       .text	00000000 idt_desc
00007e56 l       .text	00000000 task_0_entry
00000000 l    df *ABS*	00000000 os.c
0000e908 l     O .data	00000004 row.1
0000c000 l     O .data	00001000 page_table
0000e90c l     O .data	00000004 task_tss.0
0000e020 g     O .data	00000800 gdt_table
0000e920 g     O .bss	00001000 task0_dpl3_stack
00010920 g     O .bss	00001000 task1_dpl3_stack
00007f45 g     F .text	0000002e sys_show
0000e010 g     O .data	00000010 task1_ldt_table
00007f73 g     F .text	0000002e task_0
0000e820 g     O .data	00000068 task0_tss
0000b000 g     O .data	00001000 map_phy_buffer
00007e62 g       .text	00000000 time_int
00008026 g     F .text	0000014a os_init
00011920 g     O .bss	00001000 task1_dpl0_stack
0000e8a0 g     O .data	00000068 task1_tss
0000e000 g     O .data	00000010 task0_ldt_table
00007ea2 g     F .text	000000a3 do_syscall
00007c00 g       .text	00000000 _start
00007fcf g     F .text	0000001f outb
0000e910 g       .bss	00000000 __bss_start
0000d000 g     O .data	00001000 pg_dir
0000e910 g       .data	00000000 _edata
00013120 g       .bss	00000000 _end
00007e76 g       .text	00000000 syscall_handler
00007fa1 g     F .text	0000002e task_1
00012920 g     O .bss	00000800 idt_table
0000f920 g     O .bss	00001000 task0_dpl0_stack
00007fee g     F .text	00000038 task_sched



Disassembly of section .text:

00007c00 <_start>:
	// 指定以下的代码生成16位的机器指令，这样才能在启动时的实模式下运行
  	.code16
	// 以下是代码区
 	.text
_start: 
	mov $0 , %ax 
    7c00:	b8 00 00 8e d8       	mov    $0xd88e0000,%eax
	mov %ax , %ds 
	mov %ax , %es
    7c05:	8e c0                	mov    %eax,%es
	mov %ax , %ss 
    7c07:	8e d0                	mov    %eax,%ss
	mov %ax , %gs 
    7c09:	8e e8                	mov    %eax,%gs
	mov %ax , %fs 
    7c0b:	8e e0                	mov    %eax,%fs
	mov $_start , %esp 
    7c0d:	66 bc 00 7c          	mov    $0x7c00,%sp
	...

00007c13 <read_self_all>:

read_self_all:
	mov $_start_32 , %bx 
    7c13:	bb 00 7e b9 02       	mov    $0x2b97e00,%ebx
	mov $0x2 , %cx 
    7c18:	00 b8 40 02 ba 80    	add    %bh,-0x7f45fdc0(%eax)
	mov $0x0240 , %ax 
	mov $0x80 , %dx 
    7c1e:	00 cd                	add    %cl,%ch
	int $0x13 
    7c20:	13 72 f0             	adc    -0x10(%edx),%esi
	jc read_self_all


	# 进入保护模式的固定流程

	cli    # 关中断
    7c23:	fa                   	cli    
	lgdt gdt_desc  # 将 gdt表的基址存放到gdtr寄存器中去 
    7c24:	0f 01 16             	lgdtl  (%esi)
    7c27:	96                   	xchg   %eax,%esi
    7c28:	7e 0f                	jle    7c39 <read_self_all+0x26>
	lidt idt_desc
    7c2a:	01 1e                	add    %ebx,(%esi)
    7c2c:	9c                   	pushf  
    7c2d:	7e 66                	jle    7c95 <read_self_all+0x82>

	# 将 CR0的D0 位置为1 表示进入保护模式
	mov $1 , %eax 
    7c2f:	b8 01 00 00 00       	mov    $0x1,%eax
	lmsw %ax     
    7c34:	0f 01 f0             	lmsw   %ax

	jmp $KERNEL_CODE_SEG , $_start_32   # 设置 cs = 8 , _start_32 为段内偏移地址
    7c37:	ea 00 7e 08 00 00 00 	ljmp   $0x0,$0x87e00
	...
    7dfe:	55                   	push   %ebp
    7dff:	aa                   	stos   %al,%es:(%edi)

00007e00 <_start_32>:
	.text  

_start_32:
	
	# 对各个寄存器进行初始化
	mov $KERNEL_DATA_SEG ,  %ax 
    7e00:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax , %ds 
    7e04:	8e d8                	mov    %eax,%ds
	mov %ax , %es
    7e06:	8e c0                	mov    %eax,%es
	mov %ax , %ss 
    7e08:	8e d0                	mov    %eax,%ss
	mov %ax , %gs 
    7e0a:	8e e8                	mov    %eax,%gs
	mov %ax , %fs 
    7e0c:	8e e0                	mov    %eax,%fs
	mov $_start , %esp
    7e0e:	bc 00 7c 00 00       	mov    $0x7c00,%esp



	call os_init   # 调用初始化函数
    7e13:	e8 0e 02 00 00       	call   8026 <os_init>

	# 打开页表机制
	mov $pg_dir , %eax 
    7e18:	b8 00 d0 00 00       	mov    $0xd000,%eax
	mov %eax , %cr3      # 注意 pg_dir 的地址是4kB的倍数
    7e1d:	0f 22 d8             	mov    %eax,%cr3



	
	mov %cr4 , %eax   # 将CR4的D4置位 
    7e20:	0f 20 e0             	mov    %cr4,%eax
	orl $(1 << 4 ) , %eax 
    7e23:	83 c8 10             	or     $0x10,%eax
	mov %eax , %cr4  
    7e26:	0f 22 e0             	mov    %eax,%cr4

	mov %cr0 , %eax 
    7e29:	0f 20 c0             	mov    %cr0,%eax
	orl  $(1 << 31) , %eax
    7e2c:	0d 00 00 00 80       	or     $0x80000000,%eax
	mov %eax , %cr0 
    7e31:	0f 22 c0             	mov    %eax,%cr0
	
	mov $TASK0_TSS_SEG  , %ax 
    7e34:	66 b8 28 00          	mov    $0x28,%ax
	ltr %ax            # 将ax中的值放到TR寄存器中
    7e38:	0f 00 d8             	ltr    %ax


	mov $TASK0_LDT_SEG , %ax 
    7e3b:	66 b8 40 00          	mov    $0x40,%ax
	lldt %ax  
    7e3f:	0f 00 d0             	lldt   %ax
	 
	push $TASK_DATA_SEG 
    7e42:	6a 0f                	push   $0xf
	push $task0_dpl3_stack + 1024 * 4 
    7e44:	68 20 f9 00 00       	push   $0xf920
	push $0x202 
    7e49:	68 02 02 00 00       	push   $0x202
	push $TASK_CODE_SEG
    7e4e:	6a 07                	push   $0x7
	push $task_0_entry  
    7e50:	68 56 7e 00 00       	push   $0x7e56
	iret 
    7e55:	cf                   	iret   

00007e56 <task_0_entry>:
task_0_entry:               # 配置为特权级3的情况下运行

	mov %ss , %ax 
    7e56:	66 8c d0             	mov    %ss,%ax
	mov %ax , %ds 
    7e59:	8e d8                	mov    %eax,%ds
	mov %ax , %es 
    7e5b:	8e c0                	mov    %eax,%es
	# 配置栈空间
	jmp task_0 
    7e5d:	e9 11 01 00 00       	jmp    7f73 <task_0>

00007e62 <time_int>:


time_int:

	push %ds
    7e62:	1e                   	push   %ds
	pusha     # 相当于 push AX , CX , DX , BX , original SP , BP , SI , DI 
    7e63:	60                   	pusha  
	mov $0x20 , %al 
    7e64:	b0 20                	mov    $0x20,%al
	outb %al , $0x20 
    7e66:	e6 20                	out    %al,$0x20


	mov $KERNEL_DATA_SEG , %ax 
    7e68:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax , %ds 
    7e6c:	8e d8                	mov    %eax,%ds
	

	call task_sched 
    7e6e:	e8 7b 01 00 00       	call   7fee <task_sched>

	# 恢复现场
	popa 
    7e73:	61                   	popa   
	pop %ds 
    7e74:	1f                   	pop    %ds
	iret                  # 必须设置中断返回指令
    7e75:	cf                   	iret   

00007e76 <syscall_handler>:

syscall_handler:	

	push %ds
    7e76:	1e                   	push   %ds
	pusha     # 相当于 push AX , CX , DX , BX , original SP , BP , SI , DI 
    7e77:	60                   	pusha  

	mov $KERNEL_DATA_SEG , %ax 
    7e78:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax , %ds 
    7e7c:	8e d8                	mov    %eax,%ds

	mov %esp , %ebp 
    7e7e:	89 e5                	mov    %esp,%ebp

	push 13*4(%ebp) 
    7e80:	ff 75 34             	push   0x34(%ebp)
	push 12*4(%ebp)
    7e83:	ff 75 30             	push   0x30(%ebp)
	push 11*4(%ebp) 
    7e86:	ff 75 2c             	push   0x2c(%ebp)
	call do_syscall 
    7e89:	e8 14 00 00 00       	call   7ea2 <do_syscall>
	add $(3 * 4) , %esp 
    7e8e:	83 c4 0c             	add    $0xc,%esp
	# 恢复现场
	popa 
    7e91:	61                   	popa   
	pop %ds 
    7e92:	1f                   	pop    %ds
	retf $(3*4) 
    7e93:	ca 0c 00             	lret   $0xc

00007e96 <gdt_desc>:
    7e96:	ff 07                	incl   (%edi)
    7e98:	20 e0                	and    %ah,%al
	...

00007e9c <idt_desc>:
    7e9c:	ff 07                	incl   (%edi)
    7e9e:	20 29                	and    %ch,(%ecx)
    7ea0:	01 00                	add    %eax,(%eax)

00007ea2 <do_syscall>:
typedef unsigned char uint8_t ; 
typedef unsigned short int uint16_t ; 
typedef unsigned int  uint32_t ; 

void do_syscall(int func , char* str , char color ) 
{
    7ea2:	55                   	push   %ebp
    7ea3:	89 e5                	mov    %esp,%ebp
    7ea5:	83 ec 14             	sub    $0x14,%esp
    7ea8:	8b 45 10             	mov    0x10(%ebp),%eax
    7eab:	88 45 ec             	mov    %al,-0x14(%ebp)
    static int row = 1 ; 
    if(func == 2 ) 
    7eae:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
    7eb2:	0f 85 8a 00 00 00    	jne    7f42 <do_syscall+0xa0>
    {
        unsigned short * dest = (unsigned short *)0xb8000 + row * 80 ; 
    7eb8:	a1 08 e9 00 00       	mov    0xe908,%eax
    7ebd:	89 c2                	mov    %eax,%edx
    7ebf:	89 d0                	mov    %edx,%eax
    7ec1:	c1 e0 02             	shl    $0x2,%eax
    7ec4:	01 d0                	add    %edx,%eax
    7ec6:	c1 e0 05             	shl    $0x5,%eax
    7ec9:	05 00 80 0b 00       	add    $0xb8000,%eax
    7ece:	89 45 fc             	mov    %eax,-0x4(%ebp)
        while(*str != '\0' ) 
    7ed1:	eb 31                	jmp    7f04 <do_syscall+0x62>
        {
            *dest = *str ; 
    7ed3:	8b 45 0c             	mov    0xc(%ebp),%eax
    7ed6:	0f b6 00             	movzbl (%eax),%eax
    7ed9:	66 0f be d0          	movsbw %al,%dx
    7edd:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7ee0:	66 89 10             	mov    %dx,(%eax)
            *dest |= (color << 8 ) ; 
    7ee3:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7ee6:	0f b7 00             	movzwl (%eax),%eax
    7ee9:	89 c2                	mov    %eax,%edx
    7eeb:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
    7eef:	c1 e0 08             	shl    $0x8,%eax
    7ef2:	09 d0                	or     %edx,%eax
    7ef4:	89 c2                	mov    %eax,%edx
    7ef6:	8b 45 fc             	mov    -0x4(%ebp),%eax
    7ef9:	66 89 10             	mov    %dx,(%eax)
            ++ dest , ++ str ; 
    7efc:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    7f00:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        while(*str != '\0' ) 
    7f04:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f07:	0f b6 00             	movzbl (%eax),%eax
    7f0a:	84 c0                	test   %al,%al
    7f0c:	75 c5                	jne    7ed3 <do_syscall+0x31>
            // *dest ++ = *str ++ | (color << 8 ) ; 

        } 
        row = (row >= 25 ) ? 0 : row + 1 ; 
    7f0e:	a1 08 e9 00 00       	mov    0xe908,%eax
    7f13:	83 f8 18             	cmp    $0x18,%eax
    7f16:	7f 0a                	jg     7f22 <do_syscall+0x80>
    7f18:	a1 08 e9 00 00       	mov    0xe908,%eax
    7f1d:	83 c0 01             	add    $0x1,%eax
    7f20:	eb 05                	jmp    7f27 <do_syscall+0x85>
    7f22:	b8 00 00 00 00       	mov    $0x0,%eax
    7f27:	a3 08 e9 00 00       	mov    %eax,0xe908
        
        for(int i = 0 ; i < 0xFFFFFF ; i ++ ) ; 
    7f2c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f33:	eb 04                	jmp    7f39 <do_syscall+0x97>
    7f35:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    7f39:	81 7d f8 fe ff ff 00 	cmpl   $0xfffffe,-0x8(%ebp)
    7f40:	7e f3                	jle    7f35 <do_syscall+0x93>
    }
}
    7f42:	90                   	nop
    7f43:	c9                   	leave  
    7f44:	c3                   	ret    

00007f45 <sys_show>:

void sys_show(char* str , char color ) 
{
    7f45:	55                   	push   %ebp
    7f46:	89 e5                	mov    %esp,%ebp
    7f48:	83 ec 14             	sub    $0x14,%esp
    7f4b:	8b 45 0c             	mov    0xc(%ebp),%eax
    7f4e:	88 45 ec             	mov    %al,-0x14(%ebp)
    const unsigned long  addr[] = {0 ,  SYSCALL_SEG } ;  
    7f51:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    7f58:	c7 45 fc 38 00 00 00 	movl   $0x38,-0x4(%ebp)
    __asm__ __volatile__("push %[color];push %[str];push %[id];lcalll *(%[a])"::
    7f5f:	8d 45 f8             	lea    -0x8(%ebp),%eax
    7f62:	ba 02 00 00 00       	mov    $0x2,%edx
    7f67:	ff 75 ec             	push   -0x14(%ebp)
    7f6a:	ff 75 08             	push   0x8(%ebp)
    7f6d:	52                   	push   %edx
    7f6e:	ff 18                	lcall  *(%eax)
        [a]"r"(addr) , [color]"m"(color) , [str]"m"(str) , [id]"r"(2)  
    ) ;
}
    7f70:	90                   	nop
    7f71:	c9                   	leave  
    7f72:	c3                   	ret    

00007f73 <task_0>:
} ; 



void task_0(void)
{
    7f73:	55                   	push   %ebp
    7f74:	89 e5                	mov    %esp,%ebp
    7f76:	83 ec 10             	sub    $0x10,%esp
    char * str = "task a : 1234"; 
    7f79:	c7 45 f8 00 90 00 00 	movl   $0x9000,-0x8(%ebp)
    uint8_t color = 0 ; 
    7f80:	c6 45 ff 00          	movb   $0x0,-0x1(%ebp)

    for(; ; ) 
    {
        sys_show(str , color ++ ) ;  
    7f84:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
    7f88:	8d 42 01             	lea    0x1(%edx),%eax
    7f8b:	88 45 ff             	mov    %al,-0x1(%ebp)
    7f8e:	89 d0                	mov    %edx,%eax
    7f90:	0f be c0             	movsbl %al,%eax
    7f93:	50                   	push   %eax
    7f94:	ff 75 f8             	push   -0x8(%ebp)
    7f97:	e8 a9 ff ff ff       	call   7f45 <sys_show>
    7f9c:	83 c4 08             	add    $0x8,%esp
    7f9f:	eb e3                	jmp    7f84 <task_0+0x11>

00007fa1 <task_1>:
    }
}

void task_1(void)
{
    7fa1:	55                   	push   %ebp
    7fa2:	89 e5                	mov    %esp,%ebp
    7fa4:	83 ec 10             	sub    $0x10,%esp
    char * str = "task b : 5678" ; 
    7fa7:	c7 45 f8 0e 90 00 00 	movl   $0x900e,-0x8(%ebp)
    uint8_t color = 0xff ; 
    7fae:	c6 45 ff ff          	movb   $0xff,-0x1(%ebp)
    for( ; ; )
    {
        sys_show(str , color -- ); 
    7fb2:	0f b6 55 ff          	movzbl -0x1(%ebp),%edx
    7fb6:	8d 42 ff             	lea    -0x1(%edx),%eax
    7fb9:	88 45 ff             	mov    %al,-0x1(%ebp)
    7fbc:	89 d0                	mov    %edx,%eax
    7fbe:	0f be c0             	movsbl %al,%eax
    7fc1:	50                   	push   %eax
    7fc2:	ff 75 f8             	push   -0x8(%ebp)
    7fc5:	e8 7b ff ff ff       	call   7f45 <sys_show>
    7fca:	83 c4 08             	add    $0x8,%esp
    7fcd:	eb e3                	jmp    7fb2 <task_1+0x11>

00007fcf <outb>:
    }
}

 void outb(uint8_t data , uint16_t port ) 
{
    7fcf:	55                   	push   %ebp
    7fd0:	89 e5                	mov    %esp,%ebp
    7fd2:	83 ec 08             	sub    $0x8,%esp
    7fd5:	8b 55 08             	mov    0x8(%ebp),%edx
    7fd8:	8b 45 0c             	mov    0xc(%ebp),%eax
    7fdb:	88 55 fc             	mov    %dl,-0x4(%ebp)
    7fde:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("outb %[v] , %[p]"::[p]"d"(port) , [v]"a"(data) ) ; 
    7fe2:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
    7fe6:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
    7fea:	ee                   	out    %al,(%dx)
} 
    7feb:	90                   	nop
    7fec:	c9                   	leave  
    7fed:	c3                   	ret    

00007fee <task_sched>:


void task_sched(void)
{
    7fee:	55                   	push   %ebp
    7fef:	89 e5                	mov    %esp,%ebp
    7ff1:	83 ec 10             	sub    $0x10,%esp
    static int task_tss = TASK0_TSS_SEG ; 
    task_tss = (task_tss == TASK0_TSS_SEG) ? TASK1_TSS_SEG : TASK0_TSS_SEG ;
    7ff4:	a1 0c e9 00 00       	mov    0xe90c,%eax
    7ff9:	83 f8 28             	cmp    $0x28,%eax
    7ffc:	75 07                	jne    8005 <task_sched+0x17>
    7ffe:	b8 30 00 00 00       	mov    $0x30,%eax
    8003:	eb 05                	jmp    800a <task_sched+0x1c>
    8005:	b8 28 00 00 00       	mov    $0x28,%eax
    800a:	a3 0c e9 00 00       	mov    %eax,0xe90c

    uint32_t addr[] = {0 , task_tss } ; 
    800f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    8016:	a1 0c e9 00 00       	mov    0xe90c,%eax
    801b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr)) ; 
    801e:	8d 45 f8             	lea    -0x8(%ebp),%eax
    8021:	ff 28                	ljmp   *(%eax)
}
    8023:	90                   	nop
    8024:	c9                   	leave  
    8025:	c3                   	ret    

00008026 <os_init>:

void syscall_handler(void) ; 


void os_init(void )
{
    8026:	55                   	push   %ebp
    8027:	89 e5                	mov    %esp,%ebp
    8029:	83 ec 10             	sub    $0x10,%esp
    // 对8259进行初始化
    outb(0x11 , 0x20) ; 
    802c:	6a 20                	push   $0x20
    802e:	6a 11                	push   $0x11
    8030:	e8 9a ff ff ff       	call   7fcf <outb>
    8035:	83 c4 08             	add    $0x8,%esp
    outb(0x11 , 0xA0) ; 
    8038:	68 a0 00 00 00       	push   $0xa0
    803d:	6a 11                	push   $0x11
    803f:	e8 8b ff ff ff       	call   7fcf <outb>
    8044:	83 c4 08             	add    $0x8,%esp
    
    outb(0x20 , 0x21) ;
    8047:	6a 21                	push   $0x21
    8049:	6a 20                	push   $0x20
    804b:	e8 7f ff ff ff       	call   7fcf <outb>
    8050:	83 c4 08             	add    $0x8,%esp
    outb(0x28 , 0xA1) ; 
    8053:	68 a1 00 00 00       	push   $0xa1
    8058:	6a 28                	push   $0x28
    805a:	e8 70 ff ff ff       	call   7fcf <outb>
    805f:	83 c4 08             	add    $0x8,%esp

    outb(1 << 2 , 0x21 ) ; 
    8062:	6a 21                	push   $0x21
    8064:	6a 04                	push   $0x4
    8066:	e8 64 ff ff ff       	call   7fcf <outb>
    806b:	83 c4 08             	add    $0x8,%esp
    outb(2 , 0xa1 ) ;   
    806e:	68 a1 00 00 00       	push   $0xa1
    8073:	6a 02                	push   $0x2
    8075:	e8 55 ff ff ff       	call   7fcf <outb>
    807a:	83 c4 08             	add    $0x8,%esp

    outb(0x1 , 0x21 ) ; // 告知主芯片与其连接的cpu是8086系列的
    807d:	6a 21                	push   $0x21
    807f:	6a 01                	push   $0x1
    8081:	e8 49 ff ff ff       	call   7fcf <outb>
    8086:	83 c4 08             	add    $0x8,%esp
    outb(0x1 , 0xa1) ;  // 写icw4 , 告诉从芯片8086 
    8089:	68 a1 00 00 00       	push   $0xa1
    808e:	6a 01                	push   $0x1
    8090:	e8 3a ff ff ff       	call   7fcf <outb>
    8095:	83 c4 08             	add    $0x8,%esp
    outb(0xfe , 0x21) ;  // 仅接受0号引脚的信号
    8098:	6a 21                	push   $0x21
    809a:	68 fe 00 00 00       	push   $0xfe
    809f:	e8 2b ff ff ff       	call   7fcf <outb>
    80a4:	83 c4 08             	add    $0x8,%esp
    outb(0xff , 0xa1 ) ; 
    80a7:	68 a1 00 00 00       	push   $0xa1
    80ac:	68 ff 00 00 00       	push   $0xff
    80b1:	e8 19 ff ff ff       	call   7fcf <outb>
    80b6:	83 c4 08             	add    $0x8,%esp

    int tmo = 1193180 / 10 ;   // 每 100ms 产生一次中断
    80b9:	c7 45 fc 16 d2 01 00 	movl   $0x1d216,-0x4(%ebp)
    outb(0x36 , 0x43) ;        // 设置特定的模式使得8253的计数值能反复设置为给定的值
    80c0:	6a 43                	push   $0x43
    80c2:	6a 36                	push   $0x36
    80c4:	e8 06 ff ff ff       	call   7fcf <outb>
    80c9:	83 c4 08             	add    $0x8,%esp
    outb((uint8_t)tmo , 0x40) ;  // 四字节的底八位
    80cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80cf:	0f b6 c0             	movzbl %al,%eax
    80d2:	6a 40                	push   $0x40
    80d4:	50                   	push   %eax
    80d5:	e8 f5 fe ff ff       	call   7fcf <outb>
    80da:	83 c4 08             	add    $0x8,%esp
    outb(tmo >> 8 , 0x40 ) ;  // 四字节的高八位
    80dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
    80e0:	c1 f8 08             	sar    $0x8,%eax
    80e3:	0f b6 c0             	movzbl %al,%eax
    80e6:	6a 40                	push   $0x40
    80e8:	50                   	push   %eax
    80e9:	e8 e1 fe ff ff       	call   7fcf <outb>
    80ee:	83 c4 08             	add    $0x8,%esp

    idt_table[0x20].offset_h = (uint32_t)time_int >> 16 ;  
    80f1:	b8 62 7e 00 00       	mov    $0x7e62,%eax
    80f6:	c1 e8 10             	shr    $0x10,%eax
    80f9:	66 a3 26 2a 01 00    	mov    %ax,0x12a26
    idt_table[0x20].offset_l = (uint32_t)time_int & 0xffff ; 
    80ff:	b8 62 7e 00 00       	mov    $0x7e62,%eax
    8104:	66 a3 20 2a 01 00    	mov    %ax,0x12a20
    idt_table[0x20].selector = KERNEL_CODE_SEG ; 
    810a:	66 c7 05 22 2a 01 00 	movw   $0x8,0x12a22
    8111:	08 00 
    idt_table[0x20].attr = 0x8E00;
    8113:	66 c7 05 24 2a 01 00 	movw   $0x8e00,0x12a24
    811a:	00 8e 

    gdt_table[TASK0_TSS_SEG / 8].base_l = (uint16_t)(uint32_t)task0_tss ; 
    811c:	b8 20 e8 00 00       	mov    $0xe820,%eax
    8121:	66 a3 4a e0 00 00    	mov    %ax,0xe04a
    gdt_table[TASK1_TSS_SEG / 8 ].base_l = (uint16_t)(uint32_t)task1_tss ; 
    8127:	b8 a0 e8 00 00       	mov    $0xe8a0,%eax
    812c:	66 a3 52 e0 00 00    	mov    %ax,0xe052
    gdt_table[SYSCALL_SEG / 8 ].limit_l = (uint16_t)(uint32_t)syscall_handler ; 
    8132:	b8 76 7e 00 00       	mov    $0x7e76,%eax
    8137:	66 a3 58 e0 00 00    	mov    %ax,0xe058
    gdt_table[TASK0_LDT_SEG / 8 ].base_l = (uint16_t)(uint32_t)task0_ldt_table ; 
    813d:	b8 00 e0 00 00       	mov    $0xe000,%eax
    8142:	66 a3 62 e0 00 00    	mov    %ax,0xe062
    gdt_table[TASK1_LDT_SEG / 8 ].base_l = (uint16_t)(uint32_t)task1_ldt_table ; 
    8148:	b8 10 e0 00 00       	mov    $0xe010,%eax
    814d:	66 a3 6a e0 00 00    	mov    %ax,0xe06a



    pg_dir[MAP_ADDR >> 22 ] = (uint32_t)page_table | PDE_P | PDE_W | PDE_U ; 
    8153:	b8 00 c0 00 00       	mov    $0xc000,%eax
    8158:	83 c8 07             	or     $0x7,%eax
    815b:	a3 00 d8 00 00       	mov    %eax,0xd800
    page_table[(MAP_ADDR >> 12) & 0x3ff] = (uint32_t)map_phy_buffer | PDE_P | PDE_W | PDE_U ; 
    8160:	b8 00 b0 00 00       	mov    $0xb000,%eax
    8165:	83 c8 07             	or     $0x7,%eax
    8168:	a3 00 c0 00 00       	mov    %eax,0xc000


}
    816d:	90                   	nop
    816e:	c9                   	leave  
    816f:	c3                   	ret    
